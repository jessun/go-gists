package	model	
import (	
"time"	
"gorm.io/datatypes"	
)	
// CdbCkptHistory [...]		
type	CdbCkptHistory	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	string	`gorm:"column:TENANT_ID" json:"tenant_id"`			
CheckpointSnapshot	string	`gorm:"column:CHECKPOINT_SNAPSHOT" json:"checkpoint_snapshot"`			
CheckpointType	string	`gorm:"column:CHECKPOINT_TYPE" json:"checkpoint_type"`			
CheckpointClusterVersion	string	`gorm:"column:CHECKPOINT_CLUSTER_VERSION" json:"checkpoint_cluster_version"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
FinishTime	time.Time	`gorm:"column:FINISH_TIME" json:"finish_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbCkptHistory) TableName() string {
	return "CDB_CKPT_HISTORY"
}
	

// CdbCkptHistoryColumns get sql column name.获取数据库列名
var CdbCkptHistoryColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	CheckpointSnapshot string
	CheckpointType string
	CheckpointClusterVersion string
	StartTime string
	FinishTime string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		CheckpointSnapshot:"CHECKPOINT_SNAPSHOT",  
		CheckpointType:"CHECKPOINT_TYPE",  
		CheckpointClusterVersion:"CHECKPOINT_CLUSTER_VERSION",  
		StartTime:"START_TIME",  
		FinishTime:"FINISH_TIME",             
	}
	
// CdbObBackupArchivelog [...]		
type	CdbObBackupArchivelog	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
LogArchiveRound	int64	`gorm:"column:LOG_ARCHIVE_ROUND" json:"log_archive_round"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
StartPieceID	int64	`gorm:"column:START_PIECE_ID" json:"start_piece_id"`			
BackupPieceID	int64	`gorm:"column:BACKUP_PIECE_ID" json:"backup_piece_id"`			
MinFirstTime	string	`gorm:"column:MIN_FIRST_TIME" json:"min_first_time"`			
MaxNextTime	string	`gorm:"column:MAX_NEXT_TIME" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:INPUT_BYTES" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
InputBytesDisplay	string	`gorm:"column:INPUT_BYTES_DISPLAY" json:"input_bytes_display"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupArchivelog) TableName() string {
	return "CDB_OB_BACKUP_ARCHIVELOG"
}
	

// CdbObBackupArchivelogColumns get sql column name.获取数据库列名
var CdbObBackupArchivelogColumns = struct { 
	Incarnation string
	LogArchiveRound string
	TenantID string
	Status string
	StartPieceID string
	BackupPieceID string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	CompressionRatio string
	InputBytesDisplay string
	OutputBytesDisplay string    
	}{ 
		Incarnation:"INCARNATION",  
		LogArchiveRound:"LOG_ARCHIVE_ROUND",  
		TenantID:"TENANT_ID",  
		Status:"STATUS",  
		StartPieceID:"START_PIECE_ID",  
		BackupPieceID:"BACKUP_PIECE_ID",  
		MinFirstTime:"MIN_FIRST_TIME",  
		MaxNextTime:"MAX_NEXT_TIME",  
		InputBytes:"INPUT_BYTES",  
		OutputBytes:"OUTPUT_BYTES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		InputBytesDisplay:"INPUT_BYTES_DISPLAY",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",             
	}
	
// CdbObBackupArchivelogProgress [...]		
type	CdbObBackupArchivelogProgress	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
LogArchiveRound	int64	`gorm:"column:LOG_ARCHIVE_ROUND" json:"log_archive_round"`			
CurPieceID	int64	`gorm:"column:CUR_PIECE_ID" json:"cur_piece_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
MinFirstTime	time.Time	`gorm:"column:MIN_FIRST_TIME" json:"min_first_time"`			
MaxNextTime	time.Time	`gorm:"column:MAX_NEXT_TIME" json:"max_next_time"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupArchivelogProgress) TableName() string {
	return "CDB_OB_BACKUP_ARCHIVELOG_PROGRESS"
}
	

// CdbObBackupArchivelogProgressColumns get sql column name.获取数据库列名
var CdbObBackupArchivelogProgressColumns = struct { 
	Incarnation string
	TenantID string
	LogArchiveRound string
	CurPieceID string
	SvrIP string
	SvrPort string
	TableID string
	PartitionID string
	MinFirstTime string
	MaxNextTime string
	Status string    
	}{ 
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		LogArchiveRound:"LOG_ARCHIVE_ROUND",  
		CurPieceID:"CUR_PIECE_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		MinFirstTime:"MIN_FIRST_TIME",  
		MaxNextTime:"MAX_NEXT_TIME",  
		Status:"STATUS",             
	}
	
// CdbObBackupArchivelogSummary [...]		
type	CdbObBackupArchivelogSummary	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
LogArchiveRound	int64	`gorm:"column:LOG_ARCHIVE_ROUND" json:"log_archive_round"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
StartPieceID	int64	`gorm:"column:START_PIECE_ID" json:"start_piece_id"`			
BackupPieceID	int64	`gorm:"column:BACKUP_PIECE_ID" json:"backup_piece_id"`			
MinFirstTime	string	`gorm:"column:MIN_FIRST_TIME" json:"min_first_time"`			
MaxNextTime	string	`gorm:"column:MAX_NEXT_TIME" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:INPUT_BYTES" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
InputBytesDisplay	string	`gorm:"column:INPUT_BYTES_DISPLAY" json:"input_bytes_display"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupArchivelogSummary) TableName() string {
	return "CDB_OB_BACKUP_ARCHIVELOG_SUMMARY"
}
	

// CdbObBackupArchivelogSummaryColumns get sql column name.获取数据库列名
var CdbObBackupArchivelogSummaryColumns = struct { 
	Incarnation string
	LogArchiveRound string
	TenantID string
	Status string
	StartPieceID string
	BackupPieceID string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	CompressionRatio string
	InputBytesDisplay string
	OutputBytesDisplay string    
	}{ 
		Incarnation:"INCARNATION",  
		LogArchiveRound:"LOG_ARCHIVE_ROUND",  
		TenantID:"TENANT_ID",  
		Status:"STATUS",  
		StartPieceID:"START_PIECE_ID",  
		BackupPieceID:"BACKUP_PIECE_ID",  
		MinFirstTime:"MIN_FIRST_TIME",  
		MaxNextTime:"MAX_NEXT_TIME",  
		InputBytes:"INPUT_BYTES",  
		OutputBytes:"OUTPUT_BYTES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		InputBytesDisplay:"INPUT_BYTES_DISPLAY",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",             
	}
	
// CdbObBackupBackuppieceJob [...]		
type	CdbObBackupBackuppieceJob	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BackupPieceID	int64	`gorm:"column:BACKUP_PIECE_ID" json:"backup_piece_id"`			
MaxBackupTimes	int64	`gorm:"column:MAX_BACKUP_TIMES" json:"max_backup_times"`			
Result	int64	`gorm:"column:RESULT" json:"result"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
BackupDest	string	`gorm:"column:BACKUP_DEST" json:"backup_dest"`			
Comment	string	`gorm:"column:COMMENT" json:"comment"`			
Type	int64	`gorm:"column:TYPE" json:"type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackuppieceJob) TableName() string {
	return "CDB_OB_BACKUP_BACKUPPIECE_JOB"
}
	

// CdbObBackupBackuppieceJobColumns get sql column name.获取数据库列名
var CdbObBackupBackuppieceJobColumns = struct { 
	JobID string
	TenantID string
	Incarnation string
	BackupPieceID string
	MaxBackupTimes string
	Result string
	Status string
	BackupDest string
	Comment string
	Type string    
	}{ 
		JobID:"JOB_ID",  
		TenantID:"TENANT_ID",  
		Incarnation:"INCARNATION",  
		BackupPieceID:"BACKUP_PIECE_ID",  
		MaxBackupTimes:"MAX_BACKUP_TIMES",  
		Result:"RESULT",  
		Status:"STATUS",  
		BackupDest:"BACKUP_DEST",  
		Comment:"COMMENT",  
		Type:"TYPE",             
	}
	
// CdbObBackupBackuppieceJobHistory [...]		
type	CdbObBackupBackuppieceJobHistory	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BackupPieceID	int64	`gorm:"column:BACKUP_PIECE_ID" json:"backup_piece_id"`			
MaxBackupTimes	int64	`gorm:"column:MAX_BACKUP_TIMES" json:"max_backup_times"`			
Result	int64	`gorm:"column:RESULT" json:"result"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
BackupDest	string	`gorm:"column:BACKUP_DEST" json:"backup_dest"`			
Comment	string	`gorm:"column:COMMENT" json:"comment"`			
Type	int64	`gorm:"column:TYPE" json:"type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackuppieceJobHistory) TableName() string {
	return "CDB_OB_BACKUP_BACKUPPIECE_JOB_HISTORY"
}
	

// CdbObBackupBackuppieceJobHistoryColumns get sql column name.获取数据库列名
var CdbObBackupBackuppieceJobHistoryColumns = struct { 
	JobID string
	TenantID string
	Incarnation string
	BackupPieceID string
	MaxBackupTimes string
	Result string
	Status string
	BackupDest string
	Comment string
	Type string    
	}{ 
		JobID:"JOB_ID",  
		TenantID:"TENANT_ID",  
		Incarnation:"INCARNATION",  
		BackupPieceID:"BACKUP_PIECE_ID",  
		MaxBackupTimes:"MAX_BACKUP_TIMES",  
		Result:"RESULT",  
		Status:"STATUS",  
		BackupDest:"BACKUP_DEST",  
		Comment:"COMMENT",  
		Type:"TYPE",             
	}
	
// CdbObBackupBackuppieceTask [...]		
type	CdbObBackupBackuppieceTask	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
RoundID	int64	`gorm:"column:ROUND_ID" json:"round_id"`			
BackupPieceID	int64	`gorm:"column:BACKUP_PIECE_ID" json:"backup_piece_id"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
BackupDest	string	`gorm:"column:BACKUP_DEST" json:"backup_dest"`			
Result	int64	`gorm:"column:RESULT" json:"result"`			
Comment	string	`gorm:"column:COMMENT" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackuppieceTask) TableName() string {
	return "CDB_OB_BACKUP_BACKUPPIECE_TASK"
}
	

// CdbObBackupBackuppieceTaskColumns get sql column name.获取数据库列名
var CdbObBackupBackuppieceTaskColumns = struct { 
	JobID string
	Incarnation string
	TenantID string
	RoundID string
	BackupPieceID string
	CopyID string
	StartTime string
	EndTime string
	Status string
	BackupDest string
	Result string
	Comment string    
	}{ 
		JobID:"JOB_ID",  
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		RoundID:"ROUND_ID",  
		BackupPieceID:"BACKUP_PIECE_ID",  
		CopyID:"COPY_ID",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		Status:"STATUS",  
		BackupDest:"BACKUP_DEST",  
		Result:"RESULT",  
		Comment:"COMMENT",             
	}
	
// CdbObBackupBackuppieceTaskHistory [...]		
type	CdbObBackupBackuppieceTaskHistory	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
RoundID	int64	`gorm:"column:ROUND_ID" json:"round_id"`			
BackupPieceID	int64	`gorm:"column:BACKUP_PIECE_ID" json:"backup_piece_id"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
BackupDest	string	`gorm:"column:BACKUP_DEST" json:"backup_dest"`			
Result	int64	`gorm:"column:RESULT" json:"result"`			
Comment	string	`gorm:"column:COMMENT" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackuppieceTaskHistory) TableName() string {
	return "CDB_OB_BACKUP_BACKUPPIECE_TASK_HISTORY"
}
	

// CdbObBackupBackuppieceTaskHistoryColumns get sql column name.获取数据库列名
var CdbObBackupBackuppieceTaskHistoryColumns = struct { 
	JobID string
	Incarnation string
	TenantID string
	RoundID string
	BackupPieceID string
	CopyID string
	StartTime string
	EndTime string
	Status string
	BackupDest string
	Result string
	Comment string    
	}{ 
		JobID:"JOB_ID",  
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		RoundID:"ROUND_ID",  
		BackupPieceID:"BACKUP_PIECE_ID",  
		CopyID:"COPY_ID",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		Status:"STATUS",  
		BackupDest:"BACKUP_DEST",  
		Result:"RESULT",  
		Comment:"COMMENT",             
	}
	
// CdbObBackupBackupsetJob [...]		
type	CdbObBackupBackupsetJob	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BackupSetID	int64	`gorm:"column:BACKUP_SET_ID" json:"backup_set_id"`			
Type	string	`gorm:"column:TYPE" json:"type"`			
TenantName	string	`gorm:"column:TENANT_NAME" json:"tenant_name"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
BackupDest	string	`gorm:"column:BACKUP_DEST" json:"backup_dest"`			
MaxBackupTimes	int64	`gorm:"column:MAX_BACKUP_TIMES" json:"max_backup_times"`			
Result	int64	`gorm:"column:RESULT" json:"result"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackupsetJob) TableName() string {
	return "CDB_OB_BACKUP_BACKUPSET_JOB"
}
	

// CdbObBackupBackupsetJobColumns get sql column name.获取数据库列名
var CdbObBackupBackupsetJobColumns = struct { 
	JobID string
	TenantID string
	Incarnation string
	BackupSetID string
	Type string
	TenantName string
	Status string
	BackupDest string
	MaxBackupTimes string
	Result string    
	}{ 
		JobID:"JOB_ID",  
		TenantID:"TENANT_ID",  
		Incarnation:"INCARNATION",  
		BackupSetID:"BACKUP_SET_ID",  
		Type:"TYPE",  
		TenantName:"TENANT_NAME",  
		Status:"STATUS",  
		BackupDest:"BACKUP_DEST",  
		MaxBackupTimes:"MAX_BACKUP_TIMES",  
		Result:"RESULT",             
	}
	
// CdbObBackupBackupsetJobHistory [...]		
type	CdbObBackupBackupsetJobHistory	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BackupSetID	int64	`gorm:"column:BACKUP_SET_ID" json:"backup_set_id"`			
Type	string	`gorm:"column:TYPE" json:"type"`			
TenantName	string	`gorm:"column:TENANT_NAME" json:"tenant_name"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
BackupDest	string	`gorm:"column:BACKUP_DEST" json:"backup_dest"`			
MaxBackupTimes	int64	`gorm:"column:MAX_BACKUP_TIMES" json:"max_backup_times"`			
Result	int64	`gorm:"column:RESULT" json:"result"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackupsetJobHistory) TableName() string {
	return "CDB_OB_BACKUP_BACKUPSET_JOB_HISTORY"
}
	

// CdbObBackupBackupsetJobHistoryColumns get sql column name.获取数据库列名
var CdbObBackupBackupsetJobHistoryColumns = struct { 
	JobID string
	TenantID string
	Incarnation string
	BackupSetID string
	Type string
	TenantName string
	Status string
	BackupDest string
	MaxBackupTimes string
	Result string    
	}{ 
		JobID:"JOB_ID",  
		TenantID:"TENANT_ID",  
		Incarnation:"INCARNATION",  
		BackupSetID:"BACKUP_SET_ID",  
		Type:"TYPE",  
		TenantName:"TENANT_NAME",  
		Status:"STATUS",  
		BackupDest:"BACKUP_DEST",  
		MaxBackupTimes:"MAX_BACKUP_TIMES",  
		Result:"RESULT",             
	}
	
// CdbObBackupBackupsetTask [...]		
type	CdbObBackupBackupsetTask	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
BackupType	string	`gorm:"column:BACKUP_TYPE" json:"backup_type"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TotalPgCount	int64	`gorm:"column:TOTAL_PG_COUNT" json:"total_pg_count"`			
FinishPgCount	int64	`gorm:"column:FINISH_PG_COUNT" json:"finish_pg_count"`			
TotalPartitionCount	int64	`gorm:"column:TOTAL_PARTITION_COUNT" json:"total_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:TOTAL_MACRO_BLOCK_COUNT" json:"total_macro_block_count"`			
FinishPartitionCount	int64	`gorm:"column:FINISH_PARTITION_COUNT" json:"finish_partition_count"`			
FinishMacroBlockCount	int64	`gorm:"column:FINISH_MACRO_BLOCK_COUNT" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:INPUT_BYTES" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackupsetTask) TableName() string {
	return "CDB_OB_BACKUP_BACKUPSET_TASK"
}
	

// CdbObBackupBackupsetTaskColumns get sql column name.获取数据库列名
var CdbObBackupBackupsetTaskColumns = struct { 
	JobID string
	Incarnation string
	BsKey string
	CopyID string
	BackupType string
	TenantID string
	TotalPgCount string
	FinishPgCount string
	TotalPartitionCount string
	TotalMacroBlockCount string
	FinishPartitionCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	CompletionTime string
	Status string    
	}{ 
		JobID:"JOB_ID",  
		Incarnation:"INCARNATION",  
		BsKey:"BS_KEY",  
		CopyID:"COPY_ID",  
		BackupType:"BACKUP_TYPE",  
		TenantID:"TENANT_ID",  
		TotalPgCount:"TOTAL_PG_COUNT",  
		FinishPgCount:"FINISH_PG_COUNT",  
		TotalPartitionCount:"TOTAL_PARTITION_COUNT",  
		TotalMacroBlockCount:"TOTAL_MACRO_BLOCK_COUNT",  
		FinishPartitionCount:"FINISH_PARTITION_COUNT",  
		FinishMacroBlockCount:"FINISH_MACRO_BLOCK_COUNT",  
		InputBytes:"INPUT_BYTES",  
		OutputBytes:"OUTPUT_BYTES",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		Status:"STATUS",             
	}
	
// CdbObBackupBackupsetTaskHistory [...]		
type	CdbObBackupBackupsetTaskHistory	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
BackupType	string	`gorm:"column:BACKUP_TYPE" json:"backup_type"`			
EncryptionMode	string	`gorm:"column:ENCRYPTION_MODE" json:"encryption_mode"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
ElapsedSecondes	float64	`gorm:"column:ELAPSED_SECONDES" json:"elapsed_secondes"`			
Keep	string	`gorm:"column:KEEP" json:"keep"`			
KeepUntil	string	`gorm:"column:KEEP_UNTIL" json:"keep_until"`			
SrcDeviceType	string	`gorm:"column:SRC_DEVICE_TYPE" json:"src_device_type"`			
DstDeviceType	string	`gorm:"column:DST_DEVICE_TYPE" json:"dst_device_type"`			
Compressed	string	`gorm:"column:COMPRESSED" json:"compressed"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
OutputRateBytes	float64	`gorm:"column:OUTPUT_RATE_BYTES" json:"output_rate_bytes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
OutputRateBytesDisplay	string	`gorm:"column:OUTPUT_RATE_BYTES_DISPLAY" json:"output_rate_bytes_display"`			
TimeTakenDisplay	time.Time	`gorm:"column:TIME_TAKEN_DISPLAY" json:"time_taken_display"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackupsetTaskHistory) TableName() string {
	return "CDB_OB_BACKUP_BACKUPSET_TASK_HISTORY"
}
	

// CdbObBackupBackupsetTaskHistoryColumns get sql column name.获取数据库列名
var CdbObBackupBackupsetTaskHistoryColumns = struct { 
	JobID string
	Incarnation string
	TenantID string
	BsKey string
	CopyID string
	BackupType string
	EncryptionMode string
	StartTime string
	CompletionTime string
	ElapsedSecondes string
	Keep string
	KeepUntil string
	SrcDeviceType string
	DstDeviceType string
	Compressed string
	OutputBytes string
	OutputRateBytes string
	CompressionRatio string
	OutputBytesDisplay string
	OutputRateBytesDisplay string
	TimeTakenDisplay string
	Status string    
	}{ 
		JobID:"JOB_ID",  
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		BsKey:"BS_KEY",  
		CopyID:"COPY_ID",  
		BackupType:"BACKUP_TYPE",  
		EncryptionMode:"ENCRYPTION_MODE",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		ElapsedSecondes:"ELAPSED_SECONDES",  
		Keep:"KEEP",  
		KeepUntil:"KEEP_UNTIL",  
		SrcDeviceType:"SRC_DEVICE_TYPE",  
		DstDeviceType:"DST_DEVICE_TYPE",  
		Compressed:"COMPRESSED",  
		OutputBytes:"OUTPUT_BYTES",  
		OutputRateBytes:"OUTPUT_RATE_BYTES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",  
		OutputRateBytesDisplay:"OUTPUT_RATE_BYTES_DISPLAY",  
		TimeTakenDisplay:"TIME_TAKEN_DISPLAY",  
		Status:"STATUS",             
	}
	
// CdbObBackupBackupArchivelog [...]		
type	CdbObBackupBackupArchivelog	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
LogArchiveRound	int64	`gorm:"column:LOG_ARCHIVE_ROUND" json:"log_archive_round"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
StartPieceID	int64	`gorm:"column:START_PIECE_ID" json:"start_piece_id"`			
BackupPieceID	int64	`gorm:"column:BACKUP_PIECE_ID" json:"backup_piece_id"`			
MinFirstTime	string	`gorm:"column:MIN_FIRST_TIME" json:"min_first_time"`			
MaxNextTime	string	`gorm:"column:MAX_NEXT_TIME" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:INPUT_BYTES" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
InputBytesDisplay	string	`gorm:"column:INPUT_BYTES_DISPLAY" json:"input_bytes_display"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackupArchivelog) TableName() string {
	return "CDB_OB_BACKUP_BACKUP_ARCHIVELOG"
}
	

// CdbObBackupBackupArchivelogColumns get sql column name.获取数据库列名
var CdbObBackupBackupArchivelogColumns = struct { 
	Incarnation string
	LogArchiveRound string
	CopyID string
	TenantID string
	Status string
	StartPieceID string
	BackupPieceID string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	CompressionRatio string
	InputBytesDisplay string
	OutputBytesDisplay string    
	}{ 
		Incarnation:"INCARNATION",  
		LogArchiveRound:"LOG_ARCHIVE_ROUND",  
		CopyID:"COPY_ID",  
		TenantID:"TENANT_ID",  
		Status:"STATUS",  
		StartPieceID:"START_PIECE_ID",  
		BackupPieceID:"BACKUP_PIECE_ID",  
		MinFirstTime:"MIN_FIRST_TIME",  
		MaxNextTime:"MAX_NEXT_TIME",  
		InputBytes:"INPUT_BYTES",  
		OutputBytes:"OUTPUT_BYTES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		InputBytesDisplay:"INPUT_BYTES_DISPLAY",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",             
	}
	
// CdbObBackupBackupArchivelogSummary [...]		
type	CdbObBackupBackupArchivelogSummary	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
LogArchiveRound	int64	`gorm:"column:LOG_ARCHIVE_ROUND" json:"log_archive_round"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
MinFirstTime	string	`gorm:"column:MIN_FIRST_TIME" json:"min_first_time"`			
MaxNextTime	string	`gorm:"column:MAX_NEXT_TIME" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:INPUT_BYTES" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
InputBytesDisplay	string	`gorm:"column:INPUT_BYTES_DISPLAY" json:"input_bytes_display"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupBackupArchivelogSummary) TableName() string {
	return "CDB_OB_BACKUP_BACKUP_ARCHIVELOG_SUMMARY"
}
	

// CdbObBackupBackupArchivelogSummaryColumns get sql column name.获取数据库列名
var CdbObBackupBackupArchivelogSummaryColumns = struct { 
	Incarnation string
	LogArchiveRound string
	CopyID string
	TenantID string
	Status string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	CompressionRatio string
	InputBytesDisplay string
	OutputBytesDisplay string    
	}{ 
		Incarnation:"INCARNATION",  
		LogArchiveRound:"LOG_ARCHIVE_ROUND",  
		CopyID:"COPY_ID",  
		TenantID:"TENANT_ID",  
		Status:"STATUS",  
		MinFirstTime:"MIN_FIRST_TIME",  
		MaxNextTime:"MAX_NEXT_TIME",  
		InputBytes:"INPUT_BYTES",  
		OutputBytes:"OUTPUT_BYTES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		InputBytesDisplay:"INPUT_BYTES_DISPLAY",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",             
	}
	
// CdbObBackupCleanHistory [...]		
type	CdbObBackupCleanHistory	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
Type	string	`gorm:"column:TYPE" json:"type"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
Parameter	string	`gorm:"column:PARAMETER" json:"pa_ram_eter"`			
ErrorMsg	string	`gorm:"column:ERROR_MSG" json:"error_msg"`			
Comment	string	`gorm:"column:COMMENT" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupCleanHistory) TableName() string {
	return "CDB_OB_BACKUP_CLEAN_HISTORY"
}
	

// CdbObBackupCleanHistoryColumns get sql column name.获取数据库列名
var CdbObBackupCleanHistoryColumns = struct { 
	TenantID string
	BsKey string
	CopyID string
	StartTime string
	EndTime string
	Incarnation string
	Type string
	Status string
	Parameter string
	ErrorMsg string
	Comment string    
	}{ 
		TenantID:"TENANT_ID",  
		BsKey:"BS_KEY",  
		CopyID:"COPY_ID",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		Incarnation:"INCARNATION",  
		Type:"TYPE",  
		Status:"STATUS",  
		Parameter:"PARAMETER",  
		ErrorMsg:"ERROR_MSG",  
		Comment:"COMMENT",             
	}
	
// CdbObBackupJobDetails [...]		
type	CdbObBackupJobDetails	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
BackupType	string	`gorm:"column:BACKUP_TYPE" json:"backup_type"`			
EncryptionMode	string	`gorm:"column:ENCRYPTION_MODE" json:"encryption_mode"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
InputBytes	int64	`gorm:"column:INPUT_BYTES" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
OutputDeviceType	string	`gorm:"column:OUTPUT_DEVICE_TYPE" json:"output_device_type"`			
ElapsedSecondes	float64	`gorm:"column:ELAPSED_SECONDES" json:"elapsed_secondes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
InputBytesPerSec	float64	`gorm:"column:INPUT_BYTES_PER_SEC" json:"input_bytes_per_sec"`			
OutputBytesPerSec	float64	`gorm:"column:OUTPUT_BYTES_PER_SEC" json:"output_bytes_per_sec"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
InputBytesDisplay	string	`gorm:"column:INPUT_BYTES_DISPLAY" json:"input_bytes_display"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
InputBytesPerSecDisplay	string	`gorm:"column:INPUT_BYTES_PER_SEC_DISPLAY" json:"input_bytes_per_sec_display"`			
OutputBytesPerSecDisplay	string	`gorm:"column:OUTPUT_BYTES_PER_SEC_DISPLAY" json:"output_bytes_per_sec_display"`			
TimeTakenDisplay	time.Time	`gorm:"column:TIME_TAKEN_DISPLAY" json:"time_taken_display"`			
StartReplayLogTs	int64	`gorm:"column:START_REPLAY_LOG_TS" json:"start_replay_log_ts"`			
Date	int64	`gorm:"column:DATE" json:"date"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupJobDetails) TableName() string {
	return "CDB_OB_BACKUP_JOB_DETAILS"
}
	

// CdbObBackupJobDetailsColumns get sql column name.获取数据库列名
var CdbObBackupJobDetailsColumns = struct { 
	Incarnation string
	TenantID string
	BsKey string
	BackupType string
	EncryptionMode string
	StartTime string
	EndTime string
	InputBytes string
	OutputBytes string
	OutputDeviceType string
	ElapsedSecondes string
	CompressionRatio string
	InputBytesPerSec string
	OutputBytesPerSec string
	Status string
	InputBytesDisplay string
	OutputBytesDisplay string
	InputBytesPerSecDisplay string
	OutputBytesPerSecDisplay string
	TimeTakenDisplay string
	StartReplayLogTs string
	Date string    
	}{ 
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		BsKey:"BS_KEY",  
		BackupType:"BACKUP_TYPE",  
		EncryptionMode:"ENCRYPTION_MODE",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		InputBytes:"INPUT_BYTES",  
		OutputBytes:"OUTPUT_BYTES",  
		OutputDeviceType:"OUTPUT_DEVICE_TYPE",  
		ElapsedSecondes:"ELAPSED_SECONDES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		InputBytesPerSec:"INPUT_BYTES_PER_SEC",  
		OutputBytesPerSec:"OUTPUT_BYTES_PER_SEC",  
		Status:"STATUS",  
		InputBytesDisplay:"INPUT_BYTES_DISPLAY",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",  
		InputBytesPerSecDisplay:"INPUT_BYTES_PER_SEC_DISPLAY",  
		OutputBytesPerSecDisplay:"OUTPUT_BYTES_PER_SEC_DISPLAY",  
		TimeTakenDisplay:"TIME_TAKEN_DISPLAY",  
		StartReplayLogTs:"START_REPLAY_LOG_TS",  
		Date:"DATE",             
	}
	
// CdbObBackupPieceFiles [...]		
type	CdbObBackupPieceFiles	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
RoundID	int64	`gorm:"column:ROUND_ID" json:"round_id"`			
BackupPieceID	int64	`gorm:"column:BACKUP_PIECE_ID" json:"backup_piece_id"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
CreateDate	int64	`gorm:"column:CREATE_DATE" json:"create_date"`			
StartTs	string	`gorm:"column:START_TS" json:"start_ts"`			
CheckpointTs	string	`gorm:"column:CHECKPOINT_TS" json:"checkpoint_ts"`			
MaxTs	string	`gorm:"column:MAX_TS" json:"max_ts"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
FileStatus	string	`gorm:"column:FILE_STATUS" json:"file_status"`			
Compatible	int64	`gorm:"column:COMPATIBLE" json:"compatible"`			
StartPieceID	int64	`gorm:"column:START_PIECE_ID" json:"start_piece_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupPieceFiles) TableName() string {
	return "CDB_OB_BACKUP_PIECE_FILES"
}
	

// CdbObBackupPieceFilesColumns get sql column name.获取数据库列名
var CdbObBackupPieceFilesColumns = struct { 
	Incarnation string
	TenantID string
	RoundID string
	BackupPieceID string
	CopyID string
	CreateDate string
	StartTs string
	CheckpointTs string
	MaxTs string
	Status string
	FileStatus string
	Compatible string
	StartPieceID string    
	}{ 
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		RoundID:"ROUND_ID",  
		BackupPieceID:"BACKUP_PIECE_ID",  
		CopyID:"COPY_ID",  
		CreateDate:"CREATE_DATE",  
		StartTs:"START_TS",  
		CheckpointTs:"CHECKPOINT_TS",  
		MaxTs:"MAX_TS",  
		Status:"STATUS",  
		FileStatus:"FILE_STATUS",  
		Compatible:"COMPATIBLE",  
		StartPieceID:"START_PIECE_ID",             
	}
	
// CdbObBackupProgress [...]		
type	CdbObBackupProgress	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
BackupType	string	`gorm:"column:BACKUP_TYPE" json:"backup_type"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
PartitionCount	int64	`gorm:"column:PARTITION_COUNT" json:"partition_count"`			
MacroBlockCount	int64	`gorm:"column:MACRO_BLOCK_COUNT" json:"macro_block_count"`			
FinishPartitionCount	int64	`gorm:"column:FINISH_PARTITION_COUNT" json:"finish_partition_count"`			
FinishMacroBlockCount	int64	`gorm:"column:FINISH_MACRO_BLOCK_COUNT" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:INPUT_BYTES" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupProgress) TableName() string {
	return "CDB_OB_BACKUP_PROGRESS"
}
	

// CdbObBackupProgressColumns get sql column name.获取数据库列名
var CdbObBackupProgressColumns = struct { 
	Incarnation string
	BsKey string
	BackupType string
	TenantID string
	PartitionCount string
	MacroBlockCount string
	FinishPartitionCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	CompletionTime string
	Status string    
	}{ 
		Incarnation:"INCARNATION",  
		BsKey:"BS_KEY",  
		BackupType:"BACKUP_TYPE",  
		TenantID:"TENANT_ID",  
		PartitionCount:"PARTITION_COUNT",  
		MacroBlockCount:"MACRO_BLOCK_COUNT",  
		FinishPartitionCount:"FINISH_PARTITION_COUNT",  
		FinishMacroBlockCount:"FINISH_MACRO_BLOCK_COUNT",  
		InputBytes:"INPUT_BYTES",  
		OutputBytes:"OUTPUT_BYTES",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		Status:"STATUS",             
	}
	
// CdbObBackupSetDetails [...]		
type	CdbObBackupSetDetails	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
CopyID	string	`gorm:"column:COPY_ID" json:"copy_id"`			
BackupType	string	`gorm:"column:BACKUP_TYPE" json:"backup_type"`			
EncryptionMode	string	`gorm:"column:ENCRYPTION_MODE" json:"encryption_mode"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
ElapsedSecondes	float64	`gorm:"column:ELAPSED_SECONDES" json:"elapsed_secondes"`			
Keep	string	`gorm:"column:KEEP" json:"keep"`			
KeepUntil	string	`gorm:"column:KEEP_UNTIL" json:"keep_until"`			
DeviceType	string	`gorm:"column:DEVICE_TYPE" json:"device_type"`			
Compressed	string	`gorm:"column:COMPRESSED" json:"compressed"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
OutputRateBytes	float64	`gorm:"column:OUTPUT_RATE_BYTES" json:"output_rate_bytes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
OutputRateBytesDisplay	string	`gorm:"column:OUTPUT_RATE_BYTES_DISPLAY" json:"output_rate_bytes_display"`			
TimeTakenDisplay	time.Time	`gorm:"column:TIME_TAKEN_DISPLAY" json:"time_taken_display"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupSetDetails) TableName() string {
	return "CDB_OB_BACKUP_SET_DETAILS"
}
	

// CdbObBackupSetDetailsColumns get sql column name.获取数据库列名
var CdbObBackupSetDetailsColumns = struct { 
	Incarnation string
	TenantID string
	BsKey string
	CopyID string
	BackupType string
	EncryptionMode string
	StartTime string
	CompletionTime string
	ElapsedSecondes string
	Keep string
	KeepUntil string
	DeviceType string
	Compressed string
	OutputBytes string
	OutputRateBytes string
	CompressionRatio string
	OutputBytesDisplay string
	OutputRateBytesDisplay string
	TimeTakenDisplay string
	Status string    
	}{ 
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		BsKey:"BS_KEY",  
		CopyID:"COPY_ID",  
		BackupType:"BACKUP_TYPE",  
		EncryptionMode:"ENCRYPTION_MODE",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		ElapsedSecondes:"ELAPSED_SECONDES",  
		Keep:"KEEP",  
		KeepUntil:"KEEP_UNTIL",  
		DeviceType:"DEVICE_TYPE",  
		Compressed:"COMPRESSED",  
		OutputBytes:"OUTPUT_BYTES",  
		OutputRateBytes:"OUTPUT_RATE_BYTES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",  
		OutputRateBytesDisplay:"OUTPUT_RATE_BYTES_DISPLAY",  
		TimeTakenDisplay:"TIME_TAKEN_DISPLAY",  
		Status:"STATUS",             
	}
	
// CdbObBackupSetExpired [...]		
type	CdbObBackupSetExpired	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
CopyID	string	`gorm:"column:COPY_ID" json:"copy_id"`			
BackupType	string	`gorm:"column:BACKUP_TYPE" json:"backup_type"`			
EncryptionMode	string	`gorm:"column:ENCRYPTION_MODE" json:"encryption_mode"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
ElapsedSecondes	float64	`gorm:"column:ELAPSED_SECONDES" json:"elapsed_secondes"`			
Keep	string	`gorm:"column:KEEP" json:"keep"`			
KeepUntil	string	`gorm:"column:KEEP_UNTIL" json:"keep_until"`			
DeviceType	string	`gorm:"column:DEVICE_TYPE" json:"device_type"`			
Compressed	string	`gorm:"column:COMPRESSED" json:"compressed"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
OutputRateBytes	float64	`gorm:"column:OUTPUT_RATE_BYTES" json:"output_rate_bytes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
OutputRateBytesDisplay	string	`gorm:"column:OUTPUT_RATE_BYTES_DISPLAY" json:"output_rate_bytes_display"`			
TimeTakenDisplay	time.Time	`gorm:"column:TIME_TAKEN_DISPLAY" json:"time_taken_display"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupSetExpired) TableName() string {
	return "CDB_OB_BACKUP_SET_EXPIRED"
}
	

// CdbObBackupSetExpiredColumns get sql column name.获取数据库列名
var CdbObBackupSetExpiredColumns = struct { 
	Incarnation string
	TenantID string
	BsKey string
	CopyID string
	BackupType string
	EncryptionMode string
	StartTime string
	CompletionTime string
	ElapsedSecondes string
	Keep string
	KeepUntil string
	DeviceType string
	Compressed string
	OutputBytes string
	OutputRateBytes string
	CompressionRatio string
	OutputBytesDisplay string
	OutputRateBytesDisplay string
	TimeTakenDisplay string    
	}{ 
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		BsKey:"BS_KEY",  
		CopyID:"COPY_ID",  
		BackupType:"BACKUP_TYPE",  
		EncryptionMode:"ENCRYPTION_MODE",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		ElapsedSecondes:"ELAPSED_SECONDES",  
		Keep:"KEEP",  
		KeepUntil:"KEEP_UNTIL",  
		DeviceType:"DEVICE_TYPE",  
		Compressed:"COMPRESSED",  
		OutputBytes:"OUTPUT_BYTES",  
		OutputRateBytes:"OUTPUT_RATE_BYTES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",  
		OutputRateBytesDisplay:"OUTPUT_RATE_BYTES_DISPLAY",  
		TimeTakenDisplay:"TIME_TAKEN_DISPLAY",             
	}
	
// CdbObBackupSetFiles [...]		
type	CdbObBackupSetFiles	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
BackupType	string	`gorm:"column:BACKUP_TYPE" json:"backup_type"`			
EncryptionMode	string	`gorm:"column:ENCRYPTION_MODE" json:"encryption_mode"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
FileStatus	string	`gorm:"column:FILE_STATUS" json:"file_status"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
ElapsedSecondes	float64	`gorm:"column:ELAPSED_SECONDES" json:"elapsed_secondes"`			
Keep	string	`gorm:"column:KEEP" json:"keep"`			
KeepUntil	string	`gorm:"column:KEEP_UNTIL" json:"keep_until"`			
Compressed	string	`gorm:"column:COMPRESSED" json:"compressed"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
OutputRateBytes	float64	`gorm:"column:OUTPUT_RATE_BYTES" json:"output_rate_bytes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
OutputRateBytesDisplay	string	`gorm:"column:OUTPUT_RATE_BYTES_DISPLAY" json:"output_rate_bytes_display"`			
TimeTakenDisplay	time.Time	`gorm:"column:TIME_TAKEN_DISPLAY" json:"time_taken_display"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupSetFiles) TableName() string {
	return "CDB_OB_BACKUP_SET_FILES"
}
	

// CdbObBackupSetFilesColumns get sql column name.获取数据库列名
var CdbObBackupSetFilesColumns = struct { 
	Incarnation string
	TenantID string
	BsKey string
	CopyID string
	BackupType string
	EncryptionMode string
	Status string
	FileStatus string
	StartTime string
	CompletionTime string
	ElapsedSecondes string
	Keep string
	KeepUntil string
	Compressed string
	OutputBytes string
	OutputRateBytes string
	CompressionRatio string
	OutputBytesDisplay string
	OutputRateBytesDisplay string
	TimeTakenDisplay string    
	}{ 
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		BsKey:"BS_KEY",  
		CopyID:"COPY_ID",  
		BackupType:"BACKUP_TYPE",  
		EncryptionMode:"ENCRYPTION_MODE",  
		Status:"STATUS",  
		FileStatus:"FILE_STATUS",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		ElapsedSecondes:"ELAPSED_SECONDES",  
		Keep:"KEEP",  
		KeepUntil:"KEEP_UNTIL",  
		Compressed:"COMPRESSED",  
		OutputBytes:"OUTPUT_BYTES",  
		OutputRateBytes:"OUTPUT_RATE_BYTES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",  
		OutputRateBytesDisplay:"OUTPUT_RATE_BYTES_DISPLAY",  
		TimeTakenDisplay:"TIME_TAKEN_DISPLAY",             
	}
	
// CdbObBackupSetObsolete [...]		
type	CdbObBackupSetObsolete	struct {		
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
BackupType	string	`gorm:"column:BACKUP_TYPE" json:"backup_type"`			
EncryptionMode	string	`gorm:"column:ENCRYPTION_MODE" json:"encryption_mode"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
ElapsedSecondes	float64	`gorm:"column:ELAPSED_SECONDES" json:"elapsed_secondes"`			
Keep	string	`gorm:"column:KEEP" json:"keep"`			
KeepUntil	string	`gorm:"column:KEEP_UNTIL" json:"keep_until"`			
DeviceType	string	`gorm:"column:DEVICE_TYPE" json:"device_type"`			
Compressed	string	`gorm:"column:COMPRESSED" json:"compressed"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
OutputRateBytes	float64	`gorm:"column:OUTPUT_RATE_BYTES" json:"output_rate_bytes"`			
CompressionRatio	float64	`gorm:"column:COMPRESSION_RATIO" json:"compression_ratio"`			
OutputBytesDisplay	string	`gorm:"column:OUTPUT_BYTES_DISPLAY" json:"output_bytes_display"`			
OutputRateBytesDisplay	string	`gorm:"column:OUTPUT_RATE_BYTES_DISPLAY" json:"output_rate_bytes_display"`			
TimeTakenDisplay	time.Time	`gorm:"column:TIME_TAKEN_DISPLAY" json:"time_taken_display"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupSetObsolete) TableName() string {
	return "CDB_OB_BACKUP_SET_OBSOLETE"
}
	

// CdbObBackupSetObsoleteColumns get sql column name.获取数据库列名
var CdbObBackupSetObsoleteColumns = struct { 
	Incarnation string
	TenantID string
	BsKey string
	BackupType string
	EncryptionMode string
	StartTime string
	CompletionTime string
	ElapsedSecondes string
	Keep string
	KeepUntil string
	DeviceType string
	Compressed string
	OutputBytes string
	OutputRateBytes string
	CompressionRatio string
	OutputBytesDisplay string
	OutputRateBytesDisplay string
	TimeTakenDisplay string
	Status string    
	}{ 
		Incarnation:"INCARNATION",  
		TenantID:"TENANT_ID",  
		BsKey:"BS_KEY",  
		BackupType:"BACKUP_TYPE",  
		EncryptionMode:"ENCRYPTION_MODE",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		ElapsedSecondes:"ELAPSED_SECONDES",  
		Keep:"KEEP",  
		KeepUntil:"KEEP_UNTIL",  
		DeviceType:"DEVICE_TYPE",  
		Compressed:"COMPRESSED",  
		OutputBytes:"OUTPUT_BYTES",  
		OutputRateBytes:"OUTPUT_RATE_BYTES",  
		CompressionRatio:"COMPRESSION_RATIO",  
		OutputBytesDisplay:"OUTPUT_BYTES_DISPLAY",  
		OutputRateBytesDisplay:"OUTPUT_RATE_BYTES_DISPLAY",  
		TimeTakenDisplay:"TIME_TAKEN_DISPLAY",  
		Status:"STATUS",             
	}
	
// CdbObBackupTaskCleanHistory [...]		
type	CdbObBackupTaskCleanHistory	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BsKey	int64	`gorm:"column:BS_KEY" json:"bs_key"`			
CopyID	int64	`gorm:"column:COPY_ID" json:"copy_id"`			
BackupType	string	`gorm:"column:BACKUP_TYPE" json:"backup_type"`			
PartitionCount	int64	`gorm:"column:PARTITION_COUNT" json:"partition_count"`			
MacroBlockCount	int64	`gorm:"column:MACRO_BLOCK_COUNT" json:"macro_block_count"`			
FinishPartitionCount	int64	`gorm:"column:FINISH_PARTITION_COUNT" json:"finish_partition_count"`			
FinishMacroBlockCount	int64	`gorm:"column:FINISH_MACRO_BLOCK_COUNT" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:INPUT_BYTES" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:OUTPUT_BYTES" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupTaskCleanHistory) TableName() string {
	return "CDB_OB_BACKUP_TASK_CLEAN_HISTORY"
}
	

// CdbObBackupTaskCleanHistoryColumns get sql column name.获取数据库列名
var CdbObBackupTaskCleanHistoryColumns = struct { 
	TenantID string
	Incarnation string
	BsKey string
	CopyID string
	BackupType string
	PartitionCount string
	MacroBlockCount string
	FinishPartitionCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	CompletionTime string
	Status string    
	}{ 
		TenantID:"TENANT_ID",  
		Incarnation:"INCARNATION",  
		BsKey:"BS_KEY",  
		CopyID:"COPY_ID",  
		BackupType:"BACKUP_TYPE",  
		PartitionCount:"PARTITION_COUNT",  
		MacroBlockCount:"MACRO_BLOCK_COUNT",  
		FinishPartitionCount:"FINISH_PARTITION_COUNT",  
		FinishMacroBlockCount:"FINISH_MACRO_BLOCK_COUNT",  
		InputBytes:"INPUT_BYTES",  
		OutputBytes:"OUTPUT_BYTES",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		Status:"STATUS",             
	}
	
// CdbObBackupValidationJob [...]		
type	CdbObBackupValidationJob	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TenantName	string	`gorm:"column:TENANT_NAME" json:"tenant_name"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BackupSetID	int64	`gorm:"column:BACKUP_SET_ID" json:"backup_set_id"`			
ProgressPercent	int64	`gorm:"column:PROGRESS_PERCENT" json:"progress_percent"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupValidationJob) TableName() string {
	return "CDB_OB_BACKUP_VALIDATION_JOB"
}
	

// CdbObBackupValidationJobColumns get sql column name.获取数据库列名
var CdbObBackupValidationJobColumns = struct { 
	JobID string
	TenantID string
	TenantName string
	Incarnation string
	BackupSetID string
	ProgressPercent string
	Status string    
	}{ 
		JobID:"JOB_ID",  
		TenantID:"TENANT_ID",  
		TenantName:"TENANT_NAME",  
		Incarnation:"INCARNATION",  
		BackupSetID:"BACKUP_SET_ID",  
		ProgressPercent:"PROGRESS_PERCENT",  
		Status:"STATUS",             
	}
	
// CdbObBackupValidationJobHistory [...]		
type	CdbObBackupValidationJobHistory	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TenantName	string	`gorm:"column:TENANT_NAME" json:"tenant_name"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BackupSetID	int64	`gorm:"column:BACKUP_SET_ID" json:"backup_set_id"`			
ProgressPercent	int64	`gorm:"column:PROGRESS_PERCENT" json:"progress_percent"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupValidationJobHistory) TableName() string {
	return "CDB_OB_BACKUP_VALIDATION_JOB_HISTORY"
}
	

// CdbObBackupValidationJobHistoryColumns get sql column name.获取数据库列名
var CdbObBackupValidationJobHistoryColumns = struct { 
	JobID string
	TenantID string
	TenantName string
	Incarnation string
	BackupSetID string
	ProgressPercent string
	Status string    
	}{ 
		JobID:"JOB_ID",  
		TenantID:"TENANT_ID",  
		TenantName:"TENANT_NAME",  
		Incarnation:"INCARNATION",  
		BackupSetID:"BACKUP_SET_ID",  
		ProgressPercent:"PROGRESS_PERCENT",  
		Status:"STATUS",             
	}
	
// CdbObBackupValidationTaskHistory [...]		
type	CdbObBackupValidationTaskHistory	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TaskID	int64	`gorm:"column:TASK_ID" json:"task_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BackupSetID	int64	`gorm:"column:BACKUP_SET_ID" json:"backup_set_id"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
BackupDest	string	`gorm:"column:BACKUP_DEST" json:"backup_dest"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
TotalPgCount	int64	`gorm:"column:TOTAL_PG_COUNT" json:"total_pg_count"`			
FinishPgCount	int64	`gorm:"column:FINISH_PG_COUNT" json:"finish_pg_count"`			
TotalPartitionCount	int64	`gorm:"column:TOTAL_PARTITION_COUNT" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:FINISH_PARTITION_COUNT" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:TOTAL_MACRO_BLOCK_COUNT" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:FINISH_MACRO_BLOCK_COUNT" json:"finish_macro_block_count"`			
LogSize	int64	`gorm:"column:LOG_SIZE" json:"log_size"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObBackupValidationTaskHistory) TableName() string {
	return "CDB_OB_BACKUP_VALIDATION_TASK_HISTORY"
}
	

// CdbObBackupValidationTaskHistoryColumns get sql column name.获取数据库列名
var CdbObBackupValidationTaskHistoryColumns = struct { 
	JobID string
	TaskID string
	TenantID string
	Incarnation string
	BackupSetID string
	Status string
	BackupDest string
	StartTime string
	EndTime string
	TotalPgCount string
	FinishPgCount string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	LogSize string    
	}{ 
		JobID:"JOB_ID",  
		TaskID:"TASK_ID",  
		TenantID:"TENANT_ID",  
		Incarnation:"INCARNATION",  
		BackupSetID:"BACKUP_SET_ID",  
		Status:"STATUS",  
		BackupDest:"BACKUP_DEST",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		TotalPgCount:"TOTAL_PG_COUNT",  
		FinishPgCount:"FINISH_PG_COUNT",  
		TotalPartitionCount:"TOTAL_PARTITION_COUNT",  
		FinishPartitionCount:"FINISH_PARTITION_COUNT",  
		TotalMacroBlockCount:"TOTAL_MACRO_BLOCK_COUNT",  
		FinishMacroBlockCount:"FINISH_MACRO_BLOCK_COUNT",  
		LogSize:"LOG_SIZE",             
	}
	
// CdbObKvTTLTasks [...]		
type	CdbObKvTTLTasks	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TableName	string	`gorm:"column:TABLE_NAME" json:"table_name"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
TaskID	int64	`gorm:"column:TASK_ID" json:"task_id"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
TriggerType	string	`gorm:"column:TRIGGER_TYPE" json:"trigger_type"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
TTLDelCnt	int64	`gorm:"column:TTL_DEL_CNT" json:"ttl_del_cnt"`			
MaxVersionDelCnt	int64	`gorm:"column:MAX_VERSION_DEL_CNT" json:"max_version_del_cnt"`			
ScanCnt	int64	`gorm:"column:SCAN_CNT" json:"scan_cnt"`			
RetCode	string	`gorm:"column:RET_CODE" json:"ret_code"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObKvTTLTasks) TableName() string {
	return "CDB_OB_KV_TTL_TASKS"
}
	

// CdbObKvTTLTasksColumns get sql column name.获取数据库列名
var CdbObKvTTLTasksColumns = struct { 
	TenantID string
	TableName string
	TableID string
	PartitionID string
	TaskID string
	StartTime string
	EndTime string
	TriggerType string
	Status string
	TTLDelCnt string
	MaxVersionDelCnt string
	ScanCnt string
	RetCode string    
	}{ 
		TenantID:"TENANT_ID",  
		TableName:"TABLE_NAME",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		TaskID:"TASK_ID",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		TriggerType:"TRIGGER_TYPE",  
		Status:"STATUS",  
		TTLDelCnt:"TTL_DEL_CNT",  
		MaxVersionDelCnt:"MAX_VERSION_DEL_CNT",  
		ScanCnt:"SCAN_CNT",  
		RetCode:"RET_CODE",             
	}
	
// CdbObKvTTLTaskHistory [...]		
type	CdbObKvTTLTaskHistory	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TableName	string	`gorm:"column:TABLE_NAME" json:"table_name"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
TaskID	int64	`gorm:"column:TASK_ID" json:"task_id"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
TriggerType	string	`gorm:"column:TRIGGER_TYPE" json:"trigger_type"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
TTLDelCnt	int64	`gorm:"column:TTL_DEL_CNT" json:"ttl_del_cnt"`			
MaxVersionDelCnt	int64	`gorm:"column:MAX_VERSION_DEL_CNT" json:"max_version_del_cnt"`			
ScanCnt	int64	`gorm:"column:SCAN_CNT" json:"scan_cnt"`			
RetCode	string	`gorm:"column:RET_CODE" json:"ret_code"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObKvTTLTaskHistory) TableName() string {
	return "CDB_OB_KV_TTL_TASK_HISTORY"
}
	

// CdbObKvTTLTaskHistoryColumns get sql column name.获取数据库列名
var CdbObKvTTLTaskHistoryColumns = struct { 
	TenantID string
	TableName string
	TableID string
	PartitionID string
	TaskID string
	StartTime string
	EndTime string
	TriggerType string
	Status string
	TTLDelCnt string
	MaxVersionDelCnt string
	ScanCnt string
	RetCode string    
	}{ 
		TenantID:"TENANT_ID",  
		TableName:"TABLE_NAME",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		TaskID:"TASK_ID",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		TriggerType:"TRIGGER_TYPE",  
		Status:"STATUS",  
		TTLDelCnt:"TTL_DEL_CNT",  
		MaxVersionDelCnt:"MAX_VERSION_DEL_CNT",  
		ScanCnt:"SCAN_CNT",  
		RetCode:"RET_CODE",             
	}
	
// CdbObRestoreHistory [...]		
type	CdbObRestoreHistory	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
ExternalJobID	int64	`gorm:"column:EXTERNAL_JOB_ID" json:"external_job_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TenantName	string	`gorm:"column:TENANT_NAME" json:"tenant_name"`			
BackupTenantID	int64	`gorm:"column:BACKUP_TENANT_ID" json:"backup_tenant_id"`			
BackupTenantName	string	`gorm:"column:BACKUP_TENANT_NAME" json:"backup_tenant_name"`			
BackupClusterID	int64	`gorm:"column:BACKUP_CLUSTER_ID" json:"backup_cluster_id"`			
BackupClusterName	string	`gorm:"column:BACKUP_CLUSTER_NAME" json:"backup_cluster_name"`			
WhiteList	string	`gorm:"column:WHITE_LIST" json:"white_list"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
PartitionCount	int64	`gorm:"column:PARTITION_COUNT" json:"partition_count"`			
MacroBlockCount	int64	`gorm:"column:MACRO_BLOCK_COUNT" json:"macro_block_count"`			
FinishPartitionCount	int64	`gorm:"column:FINISH_PARTITION_COUNT" json:"finish_partition_count"`			
FinishMacroBlockCount	int64	`gorm:"column:FINISH_MACRO_BLOCK_COUNT" json:"finish_macro_block_count"`			
RestoreStartTimestamp	time.Time	`gorm:"column:RESTORE_START_TIMESTAMP" json:"restore_start_timestamp"`			
RestoreFinishTimestamp	time.Time	`gorm:"column:RESTORE_FINISH_TIMESTAMP" json:"restore_finish_timestamp"`			
RestoreCurrentTimestamp	time.Time	`gorm:"column:RESTORE_CURRENT_TIMESTAMP" json:"restore_current_timestamp"`			
BackupSetList	string	`gorm:"column:BACKUP_SET_LIST" json:"backup_set_list"`			
BackupPieceList	string	`gorm:"column:BACKUP_PIECE_LIST" json:"backup_piece_list"`			
Info	string	`gorm:"column:INFO" json:"info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObRestoreHistory) TableName() string {
	return "CDB_OB_RESTORE_HISTORY"
}
	

// CdbObRestoreHistoryColumns get sql column name.获取数据库列名
var CdbObRestoreHistoryColumns = struct { 
	JobID string
	ExternalJobID string
	TenantID string
	TenantName string
	BackupTenantID string
	BackupTenantName string
	BackupClusterID string
	BackupClusterName string
	WhiteList string
	Status string
	StartTime string
	CompletionTime string
	PartitionCount string
	MacroBlockCount string
	FinishPartitionCount string
	FinishMacroBlockCount string
	RestoreStartTimestamp string
	RestoreFinishTimestamp string
	RestoreCurrentTimestamp string
	BackupSetList string
	BackupPieceList string
	Info string    
	}{ 
		JobID:"JOB_ID",  
		ExternalJobID:"EXTERNAL_JOB_ID",  
		TenantID:"TENANT_ID",  
		TenantName:"TENANT_NAME",  
		BackupTenantID:"BACKUP_TENANT_ID",  
		BackupTenantName:"BACKUP_TENANT_NAME",  
		BackupClusterID:"BACKUP_CLUSTER_ID",  
		BackupClusterName:"BACKUP_CLUSTER_NAME",  
		WhiteList:"WHITE_LIST",  
		Status:"STATUS",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		PartitionCount:"PARTITION_COUNT",  
		MacroBlockCount:"MACRO_BLOCK_COUNT",  
		FinishPartitionCount:"FINISH_PARTITION_COUNT",  
		FinishMacroBlockCount:"FINISH_MACRO_BLOCK_COUNT",  
		RestoreStartTimestamp:"RESTORE_START_TIMESTAMP",  
		RestoreFinishTimestamp:"RESTORE_FINISH_TIMESTAMP",  
		RestoreCurrentTimestamp:"RESTORE_CURRENT_TIMESTAMP",  
		BackupSetList:"BACKUP_SET_LIST",  
		BackupPieceList:"BACKUP_PIECE_LIST",  
		Info:"INFO",             
	}
	
// CdbObRestoreProgress [...]		
type	CdbObRestoreProgress	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
ExternalJobID	int64	`gorm:"column:EXTERNAL_JOB_ID" json:"external_job_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TenantName	string	`gorm:"column:TENANT_NAME" json:"tenant_name"`			
BackupTenantID	int64	`gorm:"column:BACKUP_TENANT_ID" json:"backup_tenant_id"`			
BackupTenantName	string	`gorm:"column:BACKUP_TENANT_NAME" json:"backup_tenant_name"`			
BackupClusterID	int64	`gorm:"column:BACKUP_CLUSTER_ID" json:"backup_cluster_id"`			
BackupClusterName	string	`gorm:"column:BACKUP_CLUSTER_NAME" json:"backup_cluster_name"`			
WhiteList	string	`gorm:"column:WHITE_LIST" json:"white_list"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:COMPLETION_TIME" json:"completion_time"`			
PartitionCount	int64	`gorm:"column:PARTITION_COUNT" json:"partition_count"`			
MacroBlockCount	int64	`gorm:"column:MACRO_BLOCK_COUNT" json:"macro_block_count"`			
FinishPartitionCount	int64	`gorm:"column:FINISH_PARTITION_COUNT" json:"finish_partition_count"`			
FinishMacroBlockCount	int64	`gorm:"column:FINISH_MACRO_BLOCK_COUNT" json:"finish_macro_block_count"`			
RestoreStartTimestamp	time.Time	`gorm:"column:RESTORE_START_TIMESTAMP" json:"restore_start_timestamp"`			
RestoreFinishTimestamp	time.Time	`gorm:"column:RESTORE_FINISH_TIMESTAMP" json:"restore_finish_timestamp"`			
RestoreCurrentTimestamp	time.Time	`gorm:"column:RESTORE_CURRENT_TIMESTAMP" json:"restore_current_timestamp"`			
BackupSetList	string	`gorm:"column:BACKUP_SET_LIST" json:"backup_set_list"`			
BackupPieceList	string	`gorm:"column:BACKUP_PIECE_LIST" json:"backup_piece_list"`			
Info	string	`gorm:"column:INFO" json:"info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObRestoreProgress) TableName() string {
	return "CDB_OB_RESTORE_PROGRESS"
}
	

// CdbObRestoreProgressColumns get sql column name.获取数据库列名
var CdbObRestoreProgressColumns = struct { 
	JobID string
	ExternalJobID string
	TenantID string
	TenantName string
	BackupTenantID string
	BackupTenantName string
	BackupClusterID string
	BackupClusterName string
	WhiteList string
	Status string
	StartTime string
	CompletionTime string
	PartitionCount string
	MacroBlockCount string
	FinishPartitionCount string
	FinishMacroBlockCount string
	RestoreStartTimestamp string
	RestoreFinishTimestamp string
	RestoreCurrentTimestamp string
	BackupSetList string
	BackupPieceList string
	Info string    
	}{ 
		JobID:"JOB_ID",  
		ExternalJobID:"EXTERNAL_JOB_ID",  
		TenantID:"TENANT_ID",  
		TenantName:"TENANT_NAME",  
		BackupTenantID:"BACKUP_TENANT_ID",  
		BackupTenantName:"BACKUP_TENANT_NAME",  
		BackupClusterID:"BACKUP_CLUSTER_ID",  
		BackupClusterName:"BACKUP_CLUSTER_NAME",  
		WhiteList:"WHITE_LIST",  
		Status:"STATUS",  
		StartTime:"START_TIME",  
		CompletionTime:"COMPLETION_TIME",  
		PartitionCount:"PARTITION_COUNT",  
		MacroBlockCount:"MACRO_BLOCK_COUNT",  
		FinishPartitionCount:"FINISH_PARTITION_COUNT",  
		FinishMacroBlockCount:"FINISH_MACRO_BLOCK_COUNT",  
		RestoreStartTimestamp:"RESTORE_START_TIMESTAMP",  
		RestoreFinishTimestamp:"RESTORE_FINISH_TIMESTAMP",  
		RestoreCurrentTimestamp:"RESTORE_CURRENT_TIMESTAMP",  
		BackupSetList:"BACKUP_SET_LIST",  
		BackupPieceList:"BACKUP_PIECE_LIST",  
		Info:"INFO",             
	}
	
// CdbObTenantBackupValidationTask [...]		
type	CdbObTenantBackupValidationTask	struct {		
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TaskID	int64	`gorm:"column:TASK_ID" json:"task_id"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Incarnation	int64	`gorm:"column:INCARNATION" json:"incarnation"`			
BackupSetID	int64	`gorm:"column:BACKUP_SET_ID" json:"backup_set_id"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
BackupDest	string	`gorm:"column:BACKUP_DEST" json:"backup_dest"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
TotalPgCount	int64	`gorm:"column:TOTAL_PG_COUNT" json:"total_pg_count"`			
FinishPgCount	int64	`gorm:"column:FINISH_PG_COUNT" json:"finish_pg_count"`			
TotalPartitionCount	int64	`gorm:"column:TOTAL_PARTITION_COUNT" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:FINISH_PARTITION_COUNT" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:TOTAL_MACRO_BLOCK_COUNT" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:FINISH_MACRO_BLOCK_COUNT" json:"finish_macro_block_count"`			
LogSize	int64	`gorm:"column:LOG_SIZE" json:"log_size"`			
}		

// TableName get sql table name.获取数据库表名
func (m *CdbObTenantBackupValidationTask) TableName() string {
	return "CDB_OB_TENANT_BACKUP_VALIDATION_TASK"
}
	

// CdbObTenantBackupValidationTaskColumns get sql column name.获取数据库列名
var CdbObTenantBackupValidationTaskColumns = struct { 
	JobID string
	TaskID string
	TenantID string
	Incarnation string
	BackupSetID string
	Status string
	BackupDest string
	StartTime string
	EndTime string
	TotalPgCount string
	FinishPgCount string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	LogSize string    
	}{ 
		JobID:"JOB_ID",  
		TaskID:"TASK_ID",  
		TenantID:"TENANT_ID",  
		Incarnation:"INCARNATION",  
		BackupSetID:"BACKUP_SET_ID",  
		Status:"STATUS",  
		BackupDest:"BACKUP_DEST",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		TotalPgCount:"TOTAL_PG_COUNT",  
		FinishPgCount:"FINISH_PG_COUNT",  
		TotalPartitionCount:"TOTAL_PARTITION_COUNT",  
		FinishPartitionCount:"FINISH_PARTITION_COUNT",  
		TotalMacroBlockCount:"TOTAL_MACRO_BLOCK_COUNT",  
		FinishMacroBlockCount:"FINISH_MACRO_BLOCK_COUNT",  
		LogSize:"LOG_SIZE",             
	}
	
// DbaObKvTTLTasks [...]		
type	DbaObKvTTLTasks	struct {		
TableName	string	`gorm:"column:TABLE_NAME" json:"table_name"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
TaskID	int64	`gorm:"column:TASK_ID" json:"task_id"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
TriggerType	string	`gorm:"column:TRIGGER_TYPE" json:"trigger_type"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
TTLDelCnt	int64	`gorm:"column:TTL_DEL_CNT" json:"ttl_del_cnt"`			
MaxVersionDelCnt	int64	`gorm:"column:MAX_VERSION_DEL_CNT" json:"max_version_del_cnt"`			
ScanCnt	int64	`gorm:"column:SCAN_CNT" json:"scan_cnt"`			
RetCode	string	`gorm:"column:RET_CODE" json:"ret_code"`			
}		

// TableName get sql table name.获取数据库表名
func (m *DbaObKvTTLTasks) TableName() string {
	return "DBA_OB_KV_TTL_TASKS"
}
	

// DbaObKvTTLTasksColumns get sql column name.获取数据库列名
var DbaObKvTTLTasksColumns = struct { 
	TableName string
	TableID string
	PartitionID string
	TaskID string
	StartTime string
	EndTime string
	TriggerType string
	Status string
	TTLDelCnt string
	MaxVersionDelCnt string
	ScanCnt string
	RetCode string    
	}{ 
		TableName:"TABLE_NAME",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		TaskID:"TASK_ID",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		TriggerType:"TRIGGER_TYPE",  
		Status:"STATUS",  
		TTLDelCnt:"TTL_DEL_CNT",  
		MaxVersionDelCnt:"MAX_VERSION_DEL_CNT",  
		ScanCnt:"SCAN_CNT",  
		RetCode:"RET_CODE",             
	}
	
// DbaObKvTTLTaskHistory [...]		
type	DbaObKvTTLTaskHistory	struct {		
TableName	string	`gorm:"column:TABLE_NAME" json:"table_name"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
TaskID	int64	`gorm:"column:TASK_ID" json:"task_id"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
TriggerType	string	`gorm:"column:TRIGGER_TYPE" json:"trigger_type"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
TTLDelCnt	int64	`gorm:"column:TTL_DEL_CNT" json:"ttl_del_cnt"`			
MaxVersionDelCnt	int64	`gorm:"column:MAX_VERSION_DEL_CNT" json:"max_version_del_cnt"`			
ScanCnt	int64	`gorm:"column:SCAN_CNT" json:"scan_cnt"`			
RetCode	string	`gorm:"column:RET_CODE" json:"ret_code"`			
}		

// TableName get sql table name.获取数据库表名
func (m *DbaObKvTTLTaskHistory) TableName() string {
	return "DBA_OB_KV_TTL_TASK_HISTORY"
}
	

// DbaObKvTTLTaskHistoryColumns get sql column name.获取数据库列名
var DbaObKvTTLTaskHistoryColumns = struct { 
	TableName string
	TableID string
	PartitionID string
	TaskID string
	StartTime string
	EndTime string
	TriggerType string
	Status string
	TTLDelCnt string
	MaxVersionDelCnt string
	ScanCnt string
	RetCode string    
	}{ 
		TableName:"TABLE_NAME",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		TaskID:"TASK_ID",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		TriggerType:"TRIGGER_TYPE",  
		Status:"STATUS",  
		TTLDelCnt:"TTL_DEL_CNT",  
		MaxVersionDelCnt:"MAX_VERSION_DEL_CNT",  
		ScanCnt:"SCAN_CNT",  
		RetCode:"RET_CODE",             
	}
	
// AllVirtualInformationColumns [...]		
type	AllVirtualInformationColumns	struct {		
TableSchema	string	`gorm:"primaryKey;column:TABLE_SCHEMA" json:"-"`			
TableName	string	`gorm:"primaryKey;column:TABLE_NAME" json:"-"`			
TableCatalog	string	`gorm:"column:TABLE_CATALOG" json:"table_catalog"`			
ColumnName	string	`gorm:"column:COLUMN_NAME" json:"column_name"`			
OrdinalPosition	uint64	`gorm:"column:ORDINAL_POSITION" json:"ordinal_position"`			
ColumnDefault	string	`gorm:"column:COLUMN_DEFAULT" json:"column_default"`			
IsNullable	string	`gorm:"column:IS_NULLABLE" json:"is_nullable"`			
DataType	string	`gorm:"column:DATA_TYPE" json:"data_type"`			
CharacterMaximumLength	uint64	`gorm:"column:CHARACTER_MAXIMUM_LENGTH" json:"character_maximum_length"`			
CharacterOctetLength	uint64	`gorm:"column:CHARACTER_OCTET_LENGTH" json:"character_octet_length"`			
NumericPrecision	uint64	`gorm:"column:NUMERIC_PRECISION" json:"numeric_precision"`			
NumericScale	uint64	`gorm:"column:NUMERIC_SCALE" json:"numeric_scale"`			
DatetimePrecision	uint64	`gorm:"column:DATETIME_PRECISION" json:"datetime_precision"`			
CharacterSetName	string	`gorm:"column:CHARACTER_SET_NAME" json:"character_set_name"`			
CollationName	string	`gorm:"column:COLLATION_NAME" json:"collation_name"`			
ColumnType	string	`gorm:"column:COLUMN_TYPE" json:"column_type"`			
ColumnKey	string	`gorm:"column:COLUMN_KEY" json:"column_key"`			
Extra	string	`gorm:"column:EXTRA" json:"extra"`			
Privileges	string	`gorm:"column:PRIVILEGES" json:"privileges"`			
ColumnComment	string	`gorm:"column:COLUMN_COMMENT" json:"column_comment"`			
GenerationExpression	string	`gorm:"column:GENERATION_EXPRESSION" json:"generation_expression"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualInformationColumns) TableName() string {
	return "__ALL_VIRTUAL_INFORMATION_COLUMNS"
}
	

// AllVirtualInformationColumnsColumns get sql column name.获取数据库列名
var AllVirtualInformationColumnsColumns = struct { 
	TableSchema string
	TableName string
	TableCatalog string
	ColumnName string
	OrdinalPosition string
	ColumnDefault string
	IsNullable string
	DataType string
	CharacterMaximumLength string
	CharacterOctetLength string
	NumericPrecision string
	NumericScale string
	DatetimePrecision string
	CharacterSetName string
	CollationName string
	ColumnType string
	ColumnKey string
	Extra string
	Privileges string
	ColumnComment string
	GenerationExpression string    
	}{ 
		TableSchema:"TABLE_SCHEMA",  
		TableName:"TABLE_NAME",  
		TableCatalog:"TABLE_CATALOG",  
		ColumnName:"COLUMN_NAME",  
		OrdinalPosition:"ORDINAL_POSITION",  
		ColumnDefault:"COLUMN_DEFAULT",  
		IsNullable:"IS_NULLABLE",  
		DataType:"DATA_TYPE",  
		CharacterMaximumLength:"CHARACTER_MAXIMUM_LENGTH",  
		CharacterOctetLength:"CHARACTER_OCTET_LENGTH",  
		NumericPrecision:"NUMERIC_PRECISION",  
		NumericScale:"NUMERIC_SCALE",  
		DatetimePrecision:"DATETIME_PRECISION",  
		CharacterSetName:"CHARACTER_SET_NAME",  
		CollationName:"COLLATION_NAME",  
		ColumnType:"COLUMN_TYPE",  
		ColumnKey:"COLUMN_KEY",  
		Extra:"EXTRA",  
		Privileges:"PRIVILEGES",  
		ColumnComment:"COLUMN_COMMENT",  
		GenerationExpression:"GENERATION_EXPRESSION",             
	}
	
// AllAcquiredSnapshot [...]		
type	AllAcquiredSnapshot	struct {		
GmtCreate	time.Time	`gorm:"primaryKey;column:gmt_create" json:"-"`			
SnapshotType	int64	`gorm:"column:snapshot_type" json:"snapshot_type"`			
SnapshotTs	int64	`gorm:"column:snapshot_ts" json:"snapshot_ts"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
ExtraInfo	string	`gorm:"column:extra_info" json:"extra_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllAcquiredSnapshot) TableName() string {
	return "__all_acquired_snapshot"
}
	

// AllAcquiredSnapshotColumns get sql column name.获取数据库列名
var AllAcquiredSnapshotColumns = struct { 
	GmtCreate string
	SnapshotType string
	SnapshotTs string
	SchemaVersion string
	TenantID string
	TableID string
	ExtraInfo string    
	}{ 
		GmtCreate:"gmt_create",  
		SnapshotType:"snapshot_type",  
		SnapshotTs:"snapshot_ts",  
		SchemaVersion:"schema_version",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ExtraInfo:"extra_info",             
	}
	
// AllBackupBackupLogArchiveStatusHistory [...]		
type	AllBackupBackupLogArchiveStatusHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
LogArchiveRound	int64	`gorm:"primaryKey;column:log_archive_round" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
MinFirstTime	time.Time	`gorm:"column:min_first_time" json:"min_first_time"`			
MaxNextTime	time.Time	`gorm:"column:max_next_time" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
DeletedInputBytes	int64	`gorm:"column:deleted_input_bytes" json:"deleted_input_bytes"`			
DeletedOutputBytes	int64	`gorm:"column:deleted_output_bytes" json:"deleted_output_bytes"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
IsMarkDeleted	int8	`gorm:"column:is_mark_deleted" json:"is_mark_deleted"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
StartPieceID	int64	`gorm:"column:start_piece_id" json:"start_piece_id"`			
BackupPieceID	int64	`gorm:"column:backup_piece_id" json:"backup_piece_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupBackupLogArchiveStatusHistory) TableName() string {
	return "__all_backup_backup_log_archive_status_history"
}
	

// AllBackupBackupLogArchiveStatusHistoryColumns get sql column name.获取数据库列名
var AllBackupBackupLogArchiveStatusHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Incarnation string
	LogArchiveRound string
	CopyID string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	DeletedInputBytes string
	DeletedOutputBytes string
	PgCount string
	BackupDest string
	IsMarkDeleted string
	Compatible string
	StartPieceID string
	BackupPieceID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		LogArchiveRound:"log_archive_round",  
		CopyID:"copy_id",  
		MinFirstTime:"min_first_time",  
		MaxNextTime:"max_next_time",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		DeletedInputBytes:"deleted_input_bytes",  
		DeletedOutputBytes:"deleted_output_bytes",  
		PgCount:"pg_count",  
		BackupDest:"backup_dest",  
		IsMarkDeleted:"is_mark_deleted",  
		Compatible:"compatible",  
		StartPieceID:"start_piece_id",  
		BackupPieceID:"backup_piece_id",             
	}
	
// AllBackupBackupLogArchiveStatusV2 [...]		
type	AllBackupBackupLogArchiveStatusV2	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
CopyID	int64	`gorm:"column:copy_id" json:"copy_id"`			
Incarnation	int64	`gorm:"column:incarnation" json:"incarnation"`			
LogArchiveRound	int64	`gorm:"column:log_archive_round" json:"log_archive_round"`			
MinFirstTime	time.Time	`gorm:"column:min_first_time" json:"min_first_time"`			
MaxNextTime	time.Time	`gorm:"column:max_next_time" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
DeletedInputBytes	int64	`gorm:"column:deleted_input_bytes" json:"deleted_input_bytes"`			
DeletedOutputBytes	int64	`gorm:"column:deleted_output_bytes" json:"deleted_output_bytes"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
Status	string	`gorm:"column:status" json:"status"`			
IsMountFileCreated	int64	`gorm:"column:is_mount_file_created" json:"is_mount_file_created"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
StartPieceID	int64	`gorm:"column:start_piece_id" json:"start_piece_id"`			
BackupPieceID	int64	`gorm:"column:backup_piece_id" json:"backup_piece_id"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupBackupLogArchiveStatusV2) TableName() string {
	return "__all_backup_backup_log_archive_status_v2"
}
	

// AllBackupBackupLogArchiveStatusV2Columns get sql column name.获取数据库列名
var AllBackupBackupLogArchiveStatusV2Columns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	CopyID string
	Incarnation string
	LogArchiveRound string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	DeletedInputBytes string
	DeletedOutputBytes string
	PgCount string
	Status string
	IsMountFileCreated string
	Compatible string
	StartPieceID string
	BackupPieceID string
	BackupDest string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		CopyID:"copy_id",  
		Incarnation:"incarnation",  
		LogArchiveRound:"log_archive_round",  
		MinFirstTime:"min_first_time",  
		MaxNextTime:"max_next_time",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		DeletedInputBytes:"deleted_input_bytes",  
		DeletedOutputBytes:"deleted_output_bytes",  
		PgCount:"pg_count",  
		Status:"status",  
		IsMountFileCreated:"is_mount_file_created",  
		Compatible:"compatible",  
		StartPieceID:"start_piece_id",  
		BackupPieceID:"backup_piece_id",  
		BackupDest:"backup_dest",             
	}
	
// AllBackupBackuppieceJob [...]		
type	AllBackupBackuppieceJob	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupPieceID	int64	`gorm:"primaryKey;column:backup_piece_id" json:"-"`			
MaxBackupTimes	int64	`gorm:"column:max_backup_times" json:"max_backup_times"`			
Result	int64	`gorm:"column:result" json:"result"`			
Status	string	`gorm:"column:status" json:"status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
Type	int64	`gorm:"column:type" json:"type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupBackuppieceJob) TableName() string {
	return "__all_backup_backuppiece_job"
}
	

// AllBackupBackuppieceJobColumns get sql column name.获取数据库列名
var AllBackupBackuppieceJobColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	TenantID string
	Incarnation string
	BackupPieceID string
	MaxBackupTimes string
	Result string
	Status string
	BackupDest string
	Comment string
	Type string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupPieceID:"backup_piece_id",  
		MaxBackupTimes:"max_backup_times",  
		Result:"result",  
		Status:"status",  
		BackupDest:"backup_dest",  
		Comment:"comment",  
		Type:"type",             
	}
	
// AllBackupBackuppieceJobHistory [...]		
type	AllBackupBackuppieceJobHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupPieceID	int64	`gorm:"primaryKey;column:backup_piece_id" json:"-"`			
MaxBackupTimes	int64	`gorm:"column:max_backup_times" json:"max_backup_times"`			
Result	int64	`gorm:"column:result" json:"result"`			
Status	string	`gorm:"column:status" json:"status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
Type	int64	`gorm:"column:type" json:"type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupBackuppieceJobHistory) TableName() string {
	return "__all_backup_backuppiece_job_history"
}
	

// AllBackupBackuppieceJobHistoryColumns get sql column name.获取数据库列名
var AllBackupBackuppieceJobHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	TenantID string
	Incarnation string
	BackupPieceID string
	MaxBackupTimes string
	Result string
	Status string
	BackupDest string
	Comment string
	Type string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupPieceID:"backup_piece_id",  
		MaxBackupTimes:"max_backup_times",  
		Result:"result",  
		Status:"status",  
		BackupDest:"backup_dest",  
		Comment:"comment",  
		Type:"type",             
	}
	
// AllBackupBackuppieceTask [...]		
type	AllBackupBackuppieceTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoundID	int64	`gorm:"primaryKey;column:round_id" json:"-"`			
BackupPieceID	int64	`gorm:"primaryKey;column:backup_piece_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Status	string	`gorm:"column:status" json:"status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupBackuppieceTask) TableName() string {
	return "__all_backup_backuppiece_task"
}
	

// AllBackupBackuppieceTaskColumns get sql column name.获取数据库列名
var AllBackupBackuppieceTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	Incarnation string
	TenantID string
	RoundID string
	BackupPieceID string
	CopyID string
	StartTime string
	EndTime string
	Status string
	BackupDest string
	Result string
	Comment string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		Incarnation:"incarnation",  
		TenantID:"tenant_id",  
		RoundID:"round_id",  
		BackupPieceID:"backup_piece_id",  
		CopyID:"copy_id",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Status:"status",  
		BackupDest:"backup_dest",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllBackupBackuppieceTaskHistory [...]		
type	AllBackupBackuppieceTaskHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoundID	int64	`gorm:"primaryKey;column:round_id" json:"-"`			
BackupPieceID	int64	`gorm:"primaryKey;column:backup_piece_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Status	string	`gorm:"column:status" json:"status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupBackuppieceTaskHistory) TableName() string {
	return "__all_backup_backuppiece_task_history"
}
	

// AllBackupBackuppieceTaskHistoryColumns get sql column name.获取数据库列名
var AllBackupBackuppieceTaskHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	Incarnation string
	TenantID string
	RoundID string
	BackupPieceID string
	CopyID string
	StartTime string
	EndTime string
	Status string
	BackupDest string
	Result string
	Comment string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		Incarnation:"incarnation",  
		TenantID:"tenant_id",  
		RoundID:"round_id",  
		BackupPieceID:"backup_piece_id",  
		CopyID:"copy_id",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Status:"status",  
		BackupDest:"backup_dest",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllBackupBackupsetJob [...]		
type	AllBackupBackupsetJob	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
BackupBackupsetType	string	`gorm:"column:backup_backupset_type" json:"backup_backupset_type"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
Status	string	`gorm:"column:status" json:"status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
MaxBackupTimes	int64	`gorm:"column:max_backup_times" json:"max_backup_times"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupBackupsetJob) TableName() string {
	return "__all_backup_backupset_job"
}
	

// AllBackupBackupsetJobColumns get sql column name.获取数据库列名
var AllBackupBackupsetJobColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	TenantID string
	Incarnation string
	BackupSetID string
	CopyID string
	BackupBackupsetType string
	TenantName string
	Status string
	BackupDest string
	MaxBackupTimes string
	Result string
	Comment string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		CopyID:"copy_id",  
		BackupBackupsetType:"backup_backupset_type",  
		TenantName:"tenant_name",  
		Status:"status",  
		BackupDest:"backup_dest",  
		MaxBackupTimes:"max_backup_times",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllBackupBackupsetJobHistory [...]		
type	AllBackupBackupsetJobHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
BackupBackupsetType	string	`gorm:"column:backup_backupset_type" json:"backup_backupset_type"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
Status	string	`gorm:"column:status" json:"status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
MaxBackupTimes	int64	`gorm:"column:max_backup_times" json:"max_backup_times"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupBackupsetJobHistory) TableName() string {
	return "__all_backup_backupset_job_history"
}
	

// AllBackupBackupsetJobHistoryColumns get sql column name.获取数据库列名
var AllBackupBackupsetJobHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	TenantID string
	Incarnation string
	BackupSetID string
	CopyID string
	BackupBackupsetType string
	TenantName string
	Status string
	BackupDest string
	MaxBackupTimes string
	Result string
	Comment string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		CopyID:"copy_id",  
		BackupBackupsetType:"backup_backupset_type",  
		TenantName:"tenant_name",  
		Status:"status",  
		BackupDest:"backup_dest",  
		MaxBackupTimes:"max_backup_times",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllBackupBackupsetTaskHistory [...]		
type	AllBackupBackupsetTaskHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PrevFullBackupSetID	int64	`gorm:"column:prev_full_backup_set_id" json:"prev_full_backup_set_id"`			
PrevIncBackupSetID	int64	`gorm:"column:prev_inc_backup_set_id" json:"prev_inc_backup_set_id"`			
PrevBackupDataVersion	int64	`gorm:"column:prev_backup_data_version" json:"prev_backup_data_version"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
ClusterVersionDisplay	string	`gorm:"column:cluster_version_display" json:"cluster_version_display"`			
Status	string	`gorm:"column:status" json:"status"`			
SrcBackupDest	string	`gorm:"column:src_backup_dest" json:"src_backup_dest"`			
DstBackupDest	string	`gorm:"column:dst_backup_dest" json:"dst_backup_dest"`			
SrcDeviceType	string	`gorm:"column:src_device_type" json:"src_device_type"`			
DstDeviceType	string	`gorm:"column:dst_device_type" json:"dst_device_type"`			
BackupDataVersion	int64	`gorm:"column:backup_data_version" json:"backup_data_version"`			
BackupSchemaVersion	int64	`gorm:"column:backup_schema_version" json:"backup_schema_version"`			
TotalPgCount	int64	`gorm:"column:total_pg_count" json:"total_pg_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
Result	int64	`gorm:"column:result" json:"result"`			
EncryptionMode	string	`gorm:"column:encryption_mode" json:"encryption_mode"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
IsMarkDeleted	int8	`gorm:"column:is_mark_deleted" json:"is_mark_deleted"`			
StartReplayLogTs	int64	`gorm:"column:start_replay_log_ts" json:"start_replay_log_ts"`			
Date	int64	`gorm:"column:date" json:"date"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupBackupsetTaskHistory) TableName() string {
	return "__all_backup_backupset_task_history"
}
	

// AllBackupBackupsetTaskHistoryColumns get sql column name.获取数据库列名
var AllBackupBackupsetTaskHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	JobID string
	Incarnation string
	BackupSetID string
	CopyID string
	BackupType string
	SnapshotVersion string
	PrevFullBackupSetID string
	PrevIncBackupSetID string
	PrevBackupDataVersion string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	Compatible string
	ClusterID string
	ClusterVersion string
	ClusterVersionDisplay string
	Status string
	SrcBackupDest string
	DstBackupDest string
	SrcDeviceType string
	DstDeviceType string
	BackupDataVersion string
	BackupSchemaVersion string
	TotalPgCount string
	FinishPgCount string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	Result string
	EncryptionMode string
	Passwd string
	IsMarkDeleted string
	StartReplayLogTs string
	Date string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		JobID:"job_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		CopyID:"copy_id",  
		BackupType:"backup_type",  
		SnapshotVersion:"snapshot_version",  
		PrevFullBackupSetID:"prev_full_backup_set_id",  
		PrevIncBackupSetID:"prev_inc_backup_set_id",  
		PrevBackupDataVersion:"prev_backup_data_version",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Compatible:"compatible",  
		ClusterID:"cluster_id",  
		ClusterVersion:"cluster_version",  
		ClusterVersionDisplay:"cluster_version_display",  
		Status:"status",  
		SrcBackupDest:"src_backup_dest",  
		DstBackupDest:"dst_backup_dest",  
		SrcDeviceType:"src_device_type",  
		DstDeviceType:"dst_device_type",  
		BackupDataVersion:"backup_data_version",  
		BackupSchemaVersion:"backup_schema_version",  
		TotalPgCount:"total_pg_count",  
		FinishPgCount:"finish_pg_count",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		Result:"result",  
		EncryptionMode:"encryption_mode",  
		Passwd:"passwd",  
		IsMarkDeleted:"is_mark_deleted",  
		StartReplayLogTs:"start_replay_log_ts",  
		Date:"date",             
	}
	
// AllBackupCleanInfoHistory [...]		
type	AllBackupCleanInfoHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Incarnation	int64	`gorm:"column:incarnation" json:"incarnation"`			
Type	string	`gorm:"column:type" json:"type"`			
Status	string	`gorm:"column:status" json:"status"`			
Parameter	string	`gorm:"column:parameter" json:"parameter"`			
ErrorMsg	string	`gorm:"column:error_msg" json:"error_msg"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ClogGcSnapshot	int64	`gorm:"column:clog_gc_snapshot" json:"clog_gc_snapshot"`			
Result	int64	`gorm:"column:result" json:"result"`			
CopyID	int64	`gorm:"column:copy_id" json:"copy_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupCleanInfoHistory) TableName() string {
	return "__all_backup_clean_info_history"
}
	

// AllBackupCleanInfoHistoryColumns get sql column name.获取数据库列名
var AllBackupCleanInfoHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	JobID string
	StartTime string
	EndTime string
	Incarnation string
	Type string
	Status string
	Parameter string
	ErrorMsg string
	Comment string
	ClogGcSnapshot string
	Result string
	CopyID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		JobID:"job_id",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Incarnation:"incarnation",  
		Type:"type",  
		Status:"status",  
		Parameter:"parameter",  
		ErrorMsg:"error_msg",  
		Comment:"comment",  
		ClogGcSnapshot:"clog_gc_snapshot",  
		Result:"result",  
		CopyID:"copy_id",             
	}
	
// AllBackupInfo [...]		
type	AllBackupInfo	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
Value	string	`gorm:"column:value" json:"value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupInfo) TableName() string {
	return "__all_backup_info"
}
	

// AllBackupInfoColumns get sql column name.获取数据库列名
var AllBackupInfoColumns = struct { 
	GmtCreate string
	GmtModified string
	Name string
	Value string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Name:"name",  
		Value:"value",             
	}
	
// AllBackupLogArchiveStatusHistory [...]		
type	AllBackupLogArchiveStatusHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
LogArchiveRound	int64	`gorm:"primaryKey;column:log_archive_round" json:"-"`			
MinFirstTime	time.Time	`gorm:"column:min_first_time" json:"min_first_time"`			
MaxNextTime	time.Time	`gorm:"column:max_next_time" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
DeletedInputBytes	int64	`gorm:"column:deleted_input_bytes" json:"deleted_input_bytes"`			
DeletedOutputBytes	int64	`gorm:"column:deleted_output_bytes" json:"deleted_output_bytes"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
IsMarkDeleted	int8	`gorm:"column:is_mark_deleted" json:"is_mark_deleted"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
StartPieceID	int64	`gorm:"column:start_piece_id" json:"start_piece_id"`			
BackupPieceID	int64	`gorm:"column:backup_piece_id" json:"backup_piece_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupLogArchiveStatusHistory) TableName() string {
	return "__all_backup_log_archive_status_history"
}
	

// AllBackupLogArchiveStatusHistoryColumns get sql column name.获取数据库列名
var AllBackupLogArchiveStatusHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Incarnation string
	LogArchiveRound string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	DeletedInputBytes string
	DeletedOutputBytes string
	PgCount string
	BackupDest string
	IsMarkDeleted string
	Compatible string
	StartPieceID string
	BackupPieceID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		LogArchiveRound:"log_archive_round",  
		MinFirstTime:"min_first_time",  
		MaxNextTime:"max_next_time",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		DeletedInputBytes:"deleted_input_bytes",  
		DeletedOutputBytes:"deleted_output_bytes",  
		PgCount:"pg_count",  
		BackupDest:"backup_dest",  
		IsMarkDeleted:"is_mark_deleted",  
		Compatible:"compatible",  
		StartPieceID:"start_piece_id",  
		BackupPieceID:"backup_piece_id",             
	}
	
// AllBackupLogArchiveStatusV2 [...]		
type	AllBackupLogArchiveStatusV2	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"column:incarnation" json:"incarnation"`			
LogArchiveRound	int64	`gorm:"column:log_archive_round" json:"log_archive_round"`			
MinFirstTime	time.Time	`gorm:"column:min_first_time" json:"min_first_time"`			
MaxNextTime	time.Time	`gorm:"column:max_next_time" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
DeletedInputBytes	int64	`gorm:"column:deleted_input_bytes" json:"deleted_input_bytes"`			
DeletedOutputBytes	int64	`gorm:"column:deleted_output_bytes" json:"deleted_output_bytes"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
Status	string	`gorm:"column:status" json:"status"`			
IsMountFileCreated	int64	`gorm:"column:is_mount_file_created" json:"is_mount_file_created"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
StartPieceID	int64	`gorm:"column:start_piece_id" json:"start_piece_id"`			
BackupPieceID	int64	`gorm:"column:backup_piece_id" json:"backup_piece_id"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupLogArchiveStatusV2) TableName() string {
	return "__all_backup_log_archive_status_v2"
}
	

// AllBackupLogArchiveStatusV2Columns get sql column name.获取数据库列名
var AllBackupLogArchiveStatusV2Columns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Incarnation string
	LogArchiveRound string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	DeletedInputBytes string
	DeletedOutputBytes string
	PgCount string
	Status string
	IsMountFileCreated string
	Compatible string
	StartPieceID string
	BackupPieceID string
	BackupDest string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		LogArchiveRound:"log_archive_round",  
		MinFirstTime:"min_first_time",  
		MaxNextTime:"max_next_time",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		DeletedInputBytes:"deleted_input_bytes",  
		DeletedOutputBytes:"deleted_output_bytes",  
		PgCount:"pg_count",  
		Status:"status",  
		IsMountFileCreated:"is_mount_file_created",  
		Compatible:"compatible",  
		StartPieceID:"start_piece_id",  
		BackupPieceID:"backup_piece_id",  
		BackupDest:"backup_dest",             
	}
	
// AllBackupPieceFiles [...]		
type	AllBackupPieceFiles	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoundID	int64	`gorm:"primaryKey;column:round_id" json:"-"`			
BackupPieceID	int64	`gorm:"primaryKey;column:backup_piece_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
CreateDate	int64	`gorm:"column:create_date" json:"create_date"`			
StartTs	int64	`gorm:"column:start_ts" json:"start_ts"`			
CheckpointTs	int64	`gorm:"column:checkpoint_ts" json:"checkpoint_ts"`			
MaxTs	int64	`gorm:"column:max_ts" json:"max_ts"`			
Status	string	`gorm:"column:status" json:"status"`			
FileStatus	string	`gorm:"column:file_status" json:"file_status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
StartPieceID	int64	`gorm:"column:start_piece_id" json:"start_piece_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupPieceFiles) TableName() string {
	return "__all_backup_piece_files"
}
	

// AllBackupPieceFilesColumns get sql column name.获取数据库列名
var AllBackupPieceFilesColumns = struct { 
	GmtCreate string
	GmtModified string
	Incarnation string
	TenantID string
	RoundID string
	BackupPieceID string
	CopyID string
	CreateDate string
	StartTs string
	CheckpointTs string
	MaxTs string
	Status string
	FileStatus string
	BackupDest string
	Compatible string
	StartPieceID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Incarnation:"incarnation",  
		TenantID:"tenant_id",  
		RoundID:"round_id",  
		BackupPieceID:"backup_piece_id",  
		CopyID:"copy_id",  
		CreateDate:"create_date",  
		StartTs:"start_ts",  
		CheckpointTs:"checkpoint_ts",  
		MaxTs:"max_ts",  
		Status:"status",  
		FileStatus:"file_status",  
		BackupDest:"backup_dest",  
		Compatible:"compatible",  
		StartPieceID:"start_piece_id",             
	}
	
// AllBackupSetFiles [...]		
type	AllBackupSetFiles	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PrevFullBackupSetID	int64	`gorm:"column:prev_full_backup_set_id" json:"prev_full_backup_set_id"`			
PrevIncBackupSetID	int64	`gorm:"column:prev_inc_backup_set_id" json:"prev_inc_backup_set_id"`			
PrevBackupDataVersion	int64	`gorm:"column:prev_backup_data_version" json:"prev_backup_data_version"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	int64	`gorm:"column:start_time" json:"start_time"`			
EndTime	int64	`gorm:"column:end_time" json:"end_time"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
Status	string	`gorm:"column:status" json:"status"`			
Result	int64	`gorm:"column:result" json:"result"`			
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
BackupDataVersion	int64	`gorm:"column:backup_data_version" json:"backup_data_version"`			
BackupSchemaVersion	int64	`gorm:"column:backup_schema_version" json:"backup_schema_version"`			
ClusterVersionDisplay	string	`gorm:"column:cluster_version_display" json:"cluster_version_display"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
EncryptionMode	string	`gorm:"column:encryption_mode" json:"encryption_mode"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
FileStatus	string	`gorm:"column:file_status" json:"file_status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
StartReplayLogTs	int64	`gorm:"column:start_replay_log_ts" json:"start_replay_log_ts"`			
Date	int64	`gorm:"column:date" json:"date"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupSetFiles) TableName() string {
	return "__all_backup_set_files"
}
	

// AllBackupSetFilesColumns get sql column name.获取数据库列名
var AllBackupSetFilesColumns = struct { 
	GmtCreate string
	GmtModified string
	Incarnation string
	TenantID string
	BackupSetID string
	CopyID string
	BackupType string
	SnapshotVersion string
	PrevFullBackupSetID string
	PrevIncBackupSetID string
	PrevBackupDataVersion string
	PgCount string
	MacroBlockCount string
	FinishPgCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	Compatible string
	ClusterVersion string
	Status string
	Result string
	ClusterID string
	BackupDataVersion string
	BackupSchemaVersion string
	ClusterVersionDisplay string
	PartitionCount string
	FinishPartitionCount string
	EncryptionMode string
	Passwd string
	FileStatus string
	BackupDest string
	StartReplayLogTs string
	Date string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Incarnation:"incarnation",  
		TenantID:"tenant_id",  
		BackupSetID:"backup_set_id",  
		CopyID:"copy_id",  
		BackupType:"backup_type",  
		SnapshotVersion:"snapshot_version",  
		PrevFullBackupSetID:"prev_full_backup_set_id",  
		PrevIncBackupSetID:"prev_inc_backup_set_id",  
		PrevBackupDataVersion:"prev_backup_data_version",  
		PgCount:"pg_count",  
		MacroBlockCount:"macro_block_count",  
		FinishPgCount:"finish_pg_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Compatible:"compatible",  
		ClusterVersion:"cluster_version",  
		Status:"status",  
		Result:"result",  
		ClusterID:"cluster_id",  
		BackupDataVersion:"backup_data_version",  
		BackupSchemaVersion:"backup_schema_version",  
		ClusterVersionDisplay:"cluster_version_display",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		EncryptionMode:"encryption_mode",  
		Passwd:"passwd",  
		FileStatus:"file_status",  
		BackupDest:"backup_dest",  
		StartReplayLogTs:"start_replay_log_ts",  
		Date:"date",             
	}
	
// AllBackupTaskCleanHistory [...]		
type	AllBackupTaskCleanHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
DeviceType	string	`gorm:"column:device_type" json:"device_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PrevFullBackupSetID	int64	`gorm:"column:prev_full_backup_set_id" json:"prev_full_backup_set_id"`			
PrevIncBackupSetID	int64	`gorm:"column:prev_inc_backup_set_id" json:"prev_inc_backup_set_id"`			
PrevBackupDataVersion	int64	`gorm:"column:prev_backup_data_version" json:"prev_backup_data_version"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
Status	string	`gorm:"column:status" json:"status"`			
Result	int64	`gorm:"column:result" json:"result"`			
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
BackupDataVersion	int64	`gorm:"column:backup_data_version" json:"backup_data_version"`			
BackupSchemaVersion	int64	`gorm:"column:backup_schema_version" json:"backup_schema_version"`			
ClusterVersionDisplay	string	`gorm:"column:cluster_version_display" json:"cluster_version_display"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
CopyID	int64	`gorm:"column:copy_id" json:"copy_id"`			
StartReplayLogTs	int64	`gorm:"column:start_replay_log_ts" json:"start_replay_log_ts"`			
Date	int64	`gorm:"column:date" json:"date"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupTaskCleanHistory) TableName() string {
	return "__all_backup_task_clean_history"
}
	

// AllBackupTaskCleanHistoryColumns get sql column name.获取数据库列名
var AllBackupTaskCleanHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Incarnation string
	BackupSetID string
	JobID string
	BackupType string
	DeviceType string
	SnapshotVersion string
	PrevFullBackupSetID string
	PrevIncBackupSetID string
	PrevBackupDataVersion string
	PgCount string
	MacroBlockCount string
	FinishPgCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	Compatible string
	ClusterVersion string
	Status string
	Result string
	ClusterID string
	BackupDest string
	BackupDataVersion string
	BackupSchemaVersion string
	ClusterVersionDisplay string
	PartitionCount string
	FinishPartitionCount string
	CopyID string
	StartReplayLogTs string
	Date string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		JobID:"job_id",  
		BackupType:"backup_type",  
		DeviceType:"device_type",  
		SnapshotVersion:"snapshot_version",  
		PrevFullBackupSetID:"prev_full_backup_set_id",  
		PrevIncBackupSetID:"prev_inc_backup_set_id",  
		PrevBackupDataVersion:"prev_backup_data_version",  
		PgCount:"pg_count",  
		MacroBlockCount:"macro_block_count",  
		FinishPgCount:"finish_pg_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Compatible:"compatible",  
		ClusterVersion:"cluster_version",  
		Status:"status",  
		Result:"result",  
		ClusterID:"cluster_id",  
		BackupDest:"backup_dest",  
		BackupDataVersion:"backup_data_version",  
		BackupSchemaVersion:"backup_schema_version",  
		ClusterVersionDisplay:"cluster_version_display",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		CopyID:"copy_id",  
		StartReplayLogTs:"start_replay_log_ts",  
		Date:"date",             
	}
	
// AllBackupTaskHistory [...]		
type	AllBackupTaskHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
DeviceType	string	`gorm:"column:device_type" json:"device_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PrevFullBackupSetID	int64	`gorm:"column:prev_full_backup_set_id" json:"prev_full_backup_set_id"`			
PrevIncBackupSetID	int64	`gorm:"column:prev_inc_backup_set_id" json:"prev_inc_backup_set_id"`			
PrevBackupDataVersion	int64	`gorm:"column:prev_backup_data_version" json:"prev_backup_data_version"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
Status	string	`gorm:"column:status" json:"status"`			
Result	int64	`gorm:"column:result" json:"result"`			
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
BackupDataVersion	int64	`gorm:"column:backup_data_version" json:"backup_data_version"`			
BackupSchemaVersion	int64	`gorm:"column:backup_schema_version" json:"backup_schema_version"`			
ClusterVersionDisplay	string	`gorm:"column:cluster_version_display" json:"cluster_version_display"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
IsMarkDeleted	int8	`gorm:"column:is_mark_deleted" json:"is_mark_deleted"`			
EncryptionMode	string	`gorm:"column:encryption_mode" json:"encryption_mode"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
StartReplayLogTs	int64	`gorm:"column:start_replay_log_ts" json:"start_replay_log_ts"`			
Date	int64	`gorm:"column:date" json:"date"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupTaskHistory) TableName() string {
	return "__all_backup_task_history"
}
	

// AllBackupTaskHistoryColumns get sql column name.获取数据库列名
var AllBackupTaskHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Incarnation string
	BackupSetID string
	BackupType string
	DeviceType string
	SnapshotVersion string
	PrevFullBackupSetID string
	PrevIncBackupSetID string
	PrevBackupDataVersion string
	PgCount string
	MacroBlockCount string
	FinishPgCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	Compatible string
	ClusterVersion string
	Status string
	Result string
	ClusterID string
	BackupDest string
	BackupDataVersion string
	BackupSchemaVersion string
	ClusterVersionDisplay string
	PartitionCount string
	FinishPartitionCount string
	IsMarkDeleted string
	EncryptionMode string
	Passwd string
	StartReplayLogTs string
	Date string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		BackupType:"backup_type",  
		DeviceType:"device_type",  
		SnapshotVersion:"snapshot_version",  
		PrevFullBackupSetID:"prev_full_backup_set_id",  
		PrevIncBackupSetID:"prev_inc_backup_set_id",  
		PrevBackupDataVersion:"prev_backup_data_version",  
		PgCount:"pg_count",  
		MacroBlockCount:"macro_block_count",  
		FinishPgCount:"finish_pg_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Compatible:"compatible",  
		ClusterVersion:"cluster_version",  
		Status:"status",  
		Result:"result",  
		ClusterID:"cluster_id",  
		BackupDest:"backup_dest",  
		BackupDataVersion:"backup_data_version",  
		BackupSchemaVersion:"backup_schema_version",  
		ClusterVersionDisplay:"cluster_version_display",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		IsMarkDeleted:"is_mark_deleted",  
		EncryptionMode:"encryption_mode",  
		Passwd:"passwd",  
		StartReplayLogTs:"start_replay_log_ts",  
		Date:"date",             
	}
	
// AllBackupValidationJob [...]		
type	AllBackupValidationJob	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
ProgressPercent	int64	`gorm:"column:progress_percent" json:"progress_percent"`			
Status	string	`gorm:"column:status" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupValidationJob) TableName() string {
	return "__all_backup_validation_job"
}
	

// AllBackupValidationJobColumns get sql column name.获取数据库列名
var AllBackupValidationJobColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	TenantID string
	Incarnation string
	BackupSetID string
	TenantName string
	ProgressPercent string
	Status string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		TenantName:"tenant_name",  
		ProgressPercent:"progress_percent",  
		Status:"status",             
	}
	
// AllBackupValidationJobHistory [...]		
type	AllBackupValidationJobHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
ProgressPercent	int64	`gorm:"column:progress_percent" json:"progress_percent"`			
Status	string	`gorm:"column:status" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupValidationJobHistory) TableName() string {
	return "__all_backup_validation_job_history"
}
	

// AllBackupValidationJobHistoryColumns get sql column name.获取数据库列名
var AllBackupValidationJobHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	TenantID string
	Incarnation string
	BackupSetID string
	TenantName string
	ProgressPercent string
	Status string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		TenantName:"tenant_name",  
		ProgressPercent:"progress_percent",  
		Status:"status",             
	}
	
// AllBackupValidationTaskHistory [...]		
type	AllBackupValidationTaskHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
Status	string	`gorm:"column:status" json:"status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
TotalPgCount	int64	`gorm:"column:total_pg_count" json:"total_pg_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
LogSize	int64	`gorm:"column:log_size" json:"log_size"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBackupValidationTaskHistory) TableName() string {
	return "__all_backup_validation_task_history"
}
	

// AllBackupValidationTaskHistoryColumns get sql column name.获取数据库列名
var AllBackupValidationTaskHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	JobID string
	TaskID string
	Incarnation string
	BackupSetID string
	Status string
	BackupDest string
	StartTime string
	EndTime string
	TotalPgCount string
	FinishPgCount string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	LogSize string
	Result string
	Comment string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		JobID:"job_id",  
		TaskID:"task_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		Status:"status",  
		BackupDest:"backup_dest",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		TotalPgCount:"total_pg_count",  
		FinishPgCount:"finish_pg_count",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		LogSize:"log_size",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllBuildIndexParam [...]		
type	AllBuildIndexParam	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
SnapshotVersion	int64	`gorm:"primaryKey;column:snapshot_version" json:"-"`			
ExecutionID	int64	`gorm:"primaryKey;column:execution_id" json:"-"`			
SeqNo	int64	`gorm:"primaryKey;column:seq_no" json:"-"`			
Param	string	`gorm:"column:param" json:"param"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllBuildIndexParam) TableName() string {
	return "__all_build_index_param"
}
	

// AllBuildIndexParamColumns get sql column name.获取数据库列名
var AllBuildIndexParamColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	SnapshotVersion string
	ExecutionID string
	SeqNo string
	Param string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		SnapshotVersion:"snapshot_version",  
		ExecutionID:"execution_id",  
		SeqNo:"seq_no",  
		Param:"param",             
	}
	
// AllCharset [...]		
type	AllCharset	struct {		
Charset	string	`gorm:"primaryKey;column:charset" json:"-"`			
Description	string	`gorm:"column:description" json:"description"`			
DefaultCollation	string	`gorm:"column:default_collation" json:"default_collation"`			
MaxLength	int64	`gorm:"column:max_length" json:"max_length"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllCharset) TableName() string {
	return "__all_charset"
}
	

// AllCharsetColumns get sql column name.获取数据库列名
var AllCharsetColumns = struct { 
	Charset string
	Description string
	DefaultCollation string
	MaxLength string    
	}{ 
		Charset:"charset",  
		Description:"description",  
		DefaultCollation:"default_collation",  
		MaxLength:"max_length",             
	}
	
// AllClogHistoryInfo [...]		
type	AllClogHistoryInfo	struct {		
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionIDx	int64	`gorm:"primaryKey;column:partition_idx" json:"-"`			
PartitionCnt	int64	`gorm:"primaryKey;column:partition_cnt" json:"-"`			
StartLogID	int64	`gorm:"primaryKey;column:start_log_id" json:"-"`			
StartLogTimestamp	int64	`gorm:"primaryKey;column:start_log_timestamp" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
EndLogID	int64	`gorm:"column:end_log_id" json:"end_log_id"`			
EndLogTimestamp	int64	`gorm:"column:end_log_timestamp" json:"end_log_timestamp"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllClogHistoryInfo) TableName() string {
	return "__all_clog_history_info"
}
	

// AllClogHistoryInfoColumns get sql column name.获取数据库列名
var AllClogHistoryInfoColumns = struct { 
	TableID string
	PartitionIDx string
	PartitionCnt string
	StartLogID string
	StartLogTimestamp string
	SvrIP string
	SvrPort string
	EndLogID string
	EndLogTimestamp string    
	}{ 
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		StartLogID:"start_log_id",  
		StartLogTimestamp:"start_log_timestamp",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		EndLogID:"end_log_id",  
		EndLogTimestamp:"end_log_timestamp",             
	}
	
// AllClogHistoryInfoV2 [...]		
type	AllClogHistoryInfoV2	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TableID	uint64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionIDx	int64	`gorm:"primaryKey;column:partition_idx" json:"-"`			
PartitionCnt	int64	`gorm:"primaryKey;column:partition_cnt" json:"-"`			
StartLogID	uint64	`gorm:"primaryKey;column:start_log_id" json:"-"`			
StartLogTimestamp	int64	`gorm:"primaryKey;column:start_log_timestamp" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
EndLogID	uint64	`gorm:"column:end_log_id" json:"end_log_id"`			
EndLogTimestamp	int64	`gorm:"column:end_log_timestamp" json:"end_log_timestamp"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllClogHistoryInfoV2) TableName() string {
	return "__all_clog_history_info_v2"
}
	

// AllClogHistoryInfoV2Columns get sql column name.获取数据库列名
var AllClogHistoryInfoV2Columns = struct { 
	GmtCreate string
	GmtModified string
	TableID string
	PartitionIDx string
	PartitionCnt string
	StartLogID string
	StartLogTimestamp string
	SvrIP string
	SvrPort string
	EndLogID string
	EndLogTimestamp string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		StartLogID:"start_log_id",  
		StartLogTimestamp:"start_log_timestamp",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		EndLogID:"end_log_id",  
		EndLogTimestamp:"end_log_timestamp",             
	}
	
// AllCollType [...]		
type	AllCollType	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
CollTypeID	int64	`gorm:"primaryKey;column:coll_type_id" json:"-"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ElemTypeID	int64	`gorm:"column:elem_type_id" json:"elem_type_id"`			
ElemSchemaVersion	int64	`gorm:"column:elem_schema_version" json:"elem_schema_version"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
UpperBound	int64	`gorm:"column:upper_bound" json:"upper_bound"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
CollName	string	`gorm:"column:coll_name" json:"coll_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllCollType) TableName() string {
	return "__all_coll_type"
}
	

// AllCollTypeColumns get sql column name.获取数据库列名
var AllCollTypeColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	CollTypeID string
	SchemaVersion string
	ElemTypeID string
	ElemSchemaVersion string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	UpperBound string
	PackageID string
	CollName string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		CollTypeID:"coll_type_id",  
		SchemaVersion:"schema_version",  
		ElemTypeID:"elem_type_id",  
		ElemSchemaVersion:"elem_schema_version",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		UpperBound:"upper_bound",  
		PackageID:"package_id",  
		CollName:"coll_name",             
	}
	
// AllCollTypeHistory [...]		
type	AllCollTypeHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
CollTypeID	int64	`gorm:"primaryKey;column:coll_type_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ElemTypeID	int64	`gorm:"column:elem_type_id" json:"elem_type_id"`			
ElemSchemaVersion	int64	`gorm:"column:elem_schema_version" json:"elem_schema_version"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
UpperBound	int64	`gorm:"column:upper_bound" json:"upper_bound"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
CollName	string	`gorm:"column:coll_name" json:"coll_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllCollTypeHistory) TableName() string {
	return "__all_coll_type_history"
}
	

// AllCollTypeHistoryColumns get sql column name.获取数据库列名
var AllCollTypeHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	CollTypeID string
	SchemaVersion string
	IsDeleted string
	ElemTypeID string
	ElemSchemaVersion string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	UpperBound string
	PackageID string
	CollName string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		CollTypeID:"coll_type_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		ElemTypeID:"elem_type_id",  
		ElemSchemaVersion:"elem_schema_version",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		UpperBound:"upper_bound",  
		PackageID:"package_id",  
		CollName:"coll_name",             
	}
	
// AllCollation [...]		
type	AllCollation	struct {		
Collation	string	`gorm:"primaryKey;column:collation" json:"-"`			
Charset	string	`gorm:"column:charset" json:"charset"`			
ID	int64	`gorm:"column:id" json:"id"`			
IsDefault	string	`gorm:"column:is_default" json:"is_default"`			
IsCompiled	string	`gorm:"column:is_compiled" json:"is_compiled"`			
Sortlen	int64	`gorm:"column:sortlen" json:"sortlen"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllCollation) TableName() string {
	return "__all_collation"
}
	

// AllCollationColumns get sql column name.获取数据库列名
var AllCollationColumns = struct { 
	Collation string
	Charset string
	ID string
	IsDefault string
	IsCompiled string
	Sortlen string    
	}{ 
		Collation:"collation",  
		Charset:"charset",  
		ID:"id",  
		IsDefault:"is_default",  
		IsCompiled:"is_compiled",  
		Sortlen:"sortlen",             
	}
	
// AllColumn [...]		
type	AllColumn	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
ColumnName	string	`gorm:"column:column_name" json:"column_name"`			
RowkeyPosition	int64	`gorm:"column:rowkey_position" json:"rowkey_position"`			
IndexPosition	int64	`gorm:"column:index_position" json:"index_position"`			
OrderInRowkey	int64	`gorm:"column:order_in_rowkey" json:"order_in_rowkey"`			
PartitionKeyPosition	int64	`gorm:"column:partition_key_position" json:"partition_key_position"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
DataLength	int64	`gorm:"column:data_length" json:"data_length"`			
DataPrecision	int64	`gorm:"column:data_precision" json:"data_precision"`			
DataScale	int64	`gorm:"column:data_scale" json:"data_scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
Nullable	int64	`gorm:"column:nullable" json:"nullable"`			
OnUpdateCurrentTimestamp	int64	`gorm:"column:on_update_current_timestamp" json:"on_update_current_timestamp"`			
Autoincrement	int64	`gorm:"column:autoincrement" json:"autoincrement"`			
IsHidden	int64	`gorm:"column:is_hidden" json:"is_hidden"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
OrigDefaultValue	string	`gorm:"column:orig_default_value" json:"orig_default_value"`			
CurDefaultValue	string	`gorm:"column:cur_default_value" json:"cur_default_value"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ColumnFlags	int64	`gorm:"column:column_flags" json:"column_flags"`			
PrevColumnID	int64	`gorm:"column:prev_column_id" json:"prev_column_id"`			
ExtendedTypeInfo	[]byte	`gorm:"column:extended_type_info" json:"extended_type_info"`			
OrigDefaultValueV2	[]byte	`gorm:"column:orig_default_value_v2" json:"orig_default_value_v2"`			
CurDefaultValueV2	[]byte	`gorm:"column:cur_default_value_v2" json:"cur_default_value_v2"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllColumn) TableName() string {
	return "__all_column"
}
	

// AllColumnColumns get sql column name.获取数据库列名
var AllColumnColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	ColumnID string
	ColumnName string
	RowkeyPosition string
	IndexPosition string
	OrderInRowkey string
	PartitionKeyPosition string
	DataType string
	DataLength string
	DataPrecision string
	DataScale string
	ZeroFill string
	Nullable string
	OnUpdateCurrentTimestamp string
	Autoincrement string
	IsHidden string
	CollationType string
	OrigDefaultValue string
	CurDefaultValue string
	Comment string
	SchemaVersion string
	ColumnFlags string
	PrevColumnID string
	ExtendedTypeInfo string
	OrigDefaultValueV2 string
	CurDefaultValueV2 string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ColumnID:"column_id",  
		ColumnName:"column_name",  
		RowkeyPosition:"rowkey_position",  
		IndexPosition:"index_position",  
		OrderInRowkey:"order_in_rowkey",  
		PartitionKeyPosition:"partition_key_position",  
		DataType:"data_type",  
		DataLength:"data_length",  
		DataPrecision:"data_precision",  
		DataScale:"data_scale",  
		ZeroFill:"zero_fill",  
		Nullable:"nullable",  
		OnUpdateCurrentTimestamp:"on_update_current_timestamp",  
		Autoincrement:"autoincrement",  
		IsHidden:"is_hidden",  
		CollationType:"collation_type",  
		OrigDefaultValue:"orig_default_value",  
		CurDefaultValue:"cur_default_value",  
		Comment:"comment",  
		SchemaVersion:"schema_version",  
		ColumnFlags:"column_flags",  
		PrevColumnID:"prev_column_id",  
		ExtendedTypeInfo:"extended_type_info",  
		OrigDefaultValueV2:"orig_default_value_v2",  
		CurDefaultValueV2:"cur_default_value_v2",             
	}
	
// AllColumnHistory [...]		
type	AllColumnHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ColumnName	string	`gorm:"column:column_name" json:"column_name"`			
RowkeyPosition	int64	`gorm:"column:rowkey_position" json:"rowkey_position"`			
IndexPosition	int64	`gorm:"column:index_position" json:"index_position"`			
OrderInRowkey	int64	`gorm:"column:order_in_rowkey" json:"order_in_rowkey"`			
PartitionKeyPosition	int64	`gorm:"column:partition_key_position" json:"partition_key_position"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
DataLength	int64	`gorm:"column:data_length" json:"data_length"`			
DataPrecision	int64	`gorm:"column:data_precision" json:"data_precision"`			
DataScale	int64	`gorm:"column:data_scale" json:"data_scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
Nullable	int64	`gorm:"column:nullable" json:"nullable"`			
OnUpdateCurrentTimestamp	int64	`gorm:"column:on_update_current_timestamp" json:"on_update_current_timestamp"`			
Autoincrement	int64	`gorm:"column:autoincrement" json:"autoincrement"`			
IsHidden	int64	`gorm:"column:is_hidden" json:"is_hidden"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
OrigDefaultValue	string	`gorm:"column:orig_default_value" json:"orig_default_value"`			
CurDefaultValue	string	`gorm:"column:cur_default_value" json:"cur_default_value"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ColumnFlags	int64	`gorm:"column:column_flags" json:"column_flags"`			
PrevColumnID	int64	`gorm:"column:prev_column_id" json:"prev_column_id"`			
ExtendedTypeInfo	[]byte	`gorm:"column:extended_type_info" json:"extended_type_info"`			
OrigDefaultValueV2	[]byte	`gorm:"column:orig_default_value_v2" json:"orig_default_value_v2"`			
CurDefaultValueV2	[]byte	`gorm:"column:cur_default_value_v2" json:"cur_default_value_v2"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllColumnHistory) TableName() string {
	return "__all_column_history"
}
	

// AllColumnHistoryColumns get sql column name.获取数据库列名
var AllColumnHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	ColumnID string
	SchemaVersion string
	IsDeleted string
	ColumnName string
	RowkeyPosition string
	IndexPosition string
	OrderInRowkey string
	PartitionKeyPosition string
	DataType string
	DataLength string
	DataPrecision string
	DataScale string
	ZeroFill string
	Nullable string
	OnUpdateCurrentTimestamp string
	Autoincrement string
	IsHidden string
	CollationType string
	OrigDefaultValue string
	CurDefaultValue string
	Comment string
	ColumnFlags string
	PrevColumnID string
	ExtendedTypeInfo string
	OrigDefaultValueV2 string
	CurDefaultValueV2 string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ColumnID:"column_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		ColumnName:"column_name",  
		RowkeyPosition:"rowkey_position",  
		IndexPosition:"index_position",  
		OrderInRowkey:"order_in_rowkey",  
		PartitionKeyPosition:"partition_key_position",  
		DataType:"data_type",  
		DataLength:"data_length",  
		DataPrecision:"data_precision",  
		DataScale:"data_scale",  
		ZeroFill:"zero_fill",  
		Nullable:"nullable",  
		OnUpdateCurrentTimestamp:"on_update_current_timestamp",  
		Autoincrement:"autoincrement",  
		IsHidden:"is_hidden",  
		CollationType:"collation_type",  
		OrigDefaultValue:"orig_default_value",  
		CurDefaultValue:"cur_default_value",  
		Comment:"comment",  
		ColumnFlags:"column_flags",  
		PrevColumnID:"prev_column_id",  
		ExtendedTypeInfo:"extended_type_info",  
		OrigDefaultValueV2:"orig_default_value_v2",  
		CurDefaultValueV2:"cur_default_value_v2",             
	}
	
// AllColumnStat [...]		
type	AllColumnStat	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
ObjectType	int64	`gorm:"column:object_type" json:"object_type"`			
LastAnalyzed	time.Time	`gorm:"column:last_analyzed" json:"last_analyzed"`			
DistinctCnt	int64	`gorm:"column:distinct_cnt" json:"distinct_cnt"`			
NullCnt	int64	`gorm:"column:null_cnt" json:"null_cnt"`			
MaxValue	string	`gorm:"column:max_value" json:"max_value"`			
BMaxValue	string	`gorm:"column:b_max_value" json:"b_max_value"`			
MinValue	string	`gorm:"column:min_value" json:"min_value"`			
BMinValue	string	`gorm:"column:b_min_value" json:"b_min_value"`			
AvgLen	int64	`gorm:"column:avg_len" json:"avg_len"`			
DistinctCntSynopsis	string	`gorm:"column:distinct_cnt_synopsis" json:"distinct_cnt_synopsis"`			
DistinctCntSynopsisSize	int64	`gorm:"column:distinct_cnt_synopsis_size" json:"distinct_cnt_synopsis_size"`			
SampleSize	float64	`gorm:"column:sample_size" json:"sample_size"`			
Density	float64	`gorm:"column:density" json:"density"`			
BucketCnt	int64	`gorm:"column:bucket_cnt" json:"bucket_cnt"`			
HistogramType	int64	`gorm:"column:histogram_type" json:"histogram_type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllColumnStat) TableName() string {
	return "__all_column_stat"
}
	

// AllColumnStatColumns get sql column name.获取数据库列名
var AllColumnStatColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	ColumnID string
	ObjectType string
	LastAnalyzed string
	DistinctCnt string
	NullCnt string
	MaxValue string
	BMaxValue string
	MinValue string
	BMinValue string
	AvgLen string
	DistinctCntSynopsis string
	DistinctCntSynopsisSize string
	SampleSize string
	Density string
	BucketCnt string
	HistogramType string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		ColumnID:"column_id",  
		ObjectType:"object_type",  
		LastAnalyzed:"last_analyzed",  
		DistinctCnt:"distinct_cnt",  
		NullCnt:"null_cnt",  
		MaxValue:"max_value",  
		BMaxValue:"b_max_value",  
		MinValue:"min_value",  
		BMinValue:"b_min_value",  
		AvgLen:"avg_len",  
		DistinctCntSynopsis:"distinct_cnt_synopsis",  
		DistinctCntSynopsisSize:"distinct_cnt_synopsis_size",  
		SampleSize:"sample_size",  
		Density:"density",  
		BucketCnt:"bucket_cnt",  
		HistogramType:"histogram_type",             
	}
	
// AllColumnStatistic [...]		
type	AllColumnStatistic	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
NumDistinct	int64	`gorm:"column:num_distinct" json:"num_distinct"`			
NumNull	int64	`gorm:"column:num_null" json:"num_null"`			
MinValue	string	`gorm:"column:min_value" json:"min_value"`			
MaxValue	string	`gorm:"column:max_value" json:"max_value"`			
LlcBitmap	string	`gorm:"column:llc_bitmap" json:"llc_bitmap"`			
LlcBitmapSize	int64	`gorm:"column:llc_bitmap_size" json:"llc_bitmap_size"`			
Version	int64	`gorm:"column:version" json:"version"`			
LastRebuildVersion	int64	`gorm:"column:last_rebuild_version" json:"last_rebuild_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllColumnStatistic) TableName() string {
	return "__all_column_statistic"
}
	

// AllColumnStatisticColumns get sql column name.获取数据库列名
var AllColumnStatisticColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	ColumnID string
	NumDistinct string
	NumNull string
	MinValue string
	MaxValue string
	LlcBitmap string
	LlcBitmapSize string
	Version string
	LastRebuildVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		ColumnID:"column_id",  
		NumDistinct:"num_distinct",  
		NumNull:"num_null",  
		MinValue:"min_value",  
		MaxValue:"max_value",  
		LlcBitmap:"llc_bitmap",  
		LlcBitmapSize:"llc_bitmap_size",  
		Version:"version",  
		LastRebuildVersion:"last_rebuild_version",             
	}
	
// AllConstraint [...]		
type	AllConstraint	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ConstraintID	int64	`gorm:"primaryKey;column:constraint_id" json:"-"`			
ConstraintName	string	`gorm:"column:constraint_name" json:"constraint_name"`			
CheckExpr	string	`gorm:"column:check_expr" json:"check_expr"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ConstraintType	int64	`gorm:"column:constraint_type" json:"constraint_type"`			
RelyFlag	int8	`gorm:"column:rely_flag" json:"rely_flag"`			
EnableFlag	int8	`gorm:"column:enable_flag" json:"enable_flag"`			
ValidateFlag	int8	`gorm:"column:validate_flag" json:"validate_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllConstraint) TableName() string {
	return "__all_constraint"
}
	

// AllConstraintColumns get sql column name.获取数据库列名
var AllConstraintColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	ConstraintID string
	ConstraintName string
	CheckExpr string
	SchemaVersion string
	ConstraintType string
	RelyFlag string
	EnableFlag string
	ValidateFlag string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ConstraintID:"constraint_id",  
		ConstraintName:"constraint_name",  
		CheckExpr:"check_expr",  
		SchemaVersion:"schema_version",  
		ConstraintType:"constraint_type",  
		RelyFlag:"rely_flag",  
		EnableFlag:"enable_flag",  
		ValidateFlag:"validate_flag",             
	}
	
// AllConstraintHistory [...]		
type	AllConstraintHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ConstraintID	int64	`gorm:"primaryKey;column:constraint_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ConstraintName	string	`gorm:"column:constraint_name" json:"constraint_name"`			
CheckExpr	string	`gorm:"column:check_expr" json:"check_expr"`			
ConstraintType	int64	`gorm:"column:constraint_type" json:"constraint_type"`			
RelyFlag	int8	`gorm:"column:rely_flag" json:"rely_flag"`			
EnableFlag	int8	`gorm:"column:enable_flag" json:"enable_flag"`			
ValidateFlag	int8	`gorm:"column:validate_flag" json:"validate_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllConstraintHistory) TableName() string {
	return "__all_constraint_history"
}
	

// AllConstraintHistoryColumns get sql column name.获取数据库列名
var AllConstraintHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	ConstraintID string
	SchemaVersion string
	IsDeleted string
	ConstraintName string
	CheckExpr string
	ConstraintType string
	RelyFlag string
	EnableFlag string
	ValidateFlag string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ConstraintID:"constraint_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		ConstraintName:"constraint_name",  
		CheckExpr:"check_expr",  
		ConstraintType:"constraint_type",  
		RelyFlag:"rely_flag",  
		EnableFlag:"enable_flag",  
		ValidateFlag:"validate_flag",             
	}
	
// AllCoreTable [...]		
type	AllCoreTable	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TableName	string	`gorm:"primaryKey;column:table_name" json:"-"`			
RowID	int64	`gorm:"primaryKey;column:row_id" json:"-"`			
ColumnName	string	`gorm:"primaryKey;column:column_name" json:"-"`			
ColumnValue	string	`gorm:"column:column_value" json:"column_value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllCoreTable) TableName() string {
	return "__all_core_table"
}
	

// AllCoreTableColumns get sql column name.获取数据库列名
var AllCoreTableColumns = struct { 
	GmtCreate string
	GmtModified string
	TableName string
	RowID string
	ColumnName string
	ColumnValue string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TableName:"table_name",  
		RowID:"row_id",  
		ColumnName:"column_name",  
		ColumnValue:"column_value",             
	}
	
// AllDatabase [...]		
type	AllDatabase	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DatabaseID	int64	`gorm:"primaryKey;column:database_id" json:"-"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
DefaultTablegroupID	int64	`gorm:"column:default_tablegroup_id" json:"default_tablegroup_id"`			
InRecyclebin	int64	`gorm:"column:in_recyclebin" json:"in_recyclebin"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDatabase) TableName() string {
	return "__all_database"
}
	

// AllDatabaseColumns get sql column name.获取数据库列名
var AllDatabaseColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DatabaseID string
	DatabaseName string
	ReplicaNum string
	ZoneList string
	PrimaryZone string
	CollationType string
	Comment string
	ReadOnly string
	DefaultTablegroupID string
	InRecyclebin string
	DropSchemaVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DatabaseID:"database_id",  
		DatabaseName:"database_name",  
		ReplicaNum:"replica_num",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		CollationType:"collation_type",  
		Comment:"comment",  
		ReadOnly:"read_only",  
		DefaultTablegroupID:"default_tablegroup_id",  
		InRecyclebin:"in_recyclebin",  
		DropSchemaVersion:"drop_schema_version",             
	}
	
// AllDatabaseHistory [...]		
type	AllDatabaseHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DatabaseID	int64	`gorm:"primaryKey;column:database_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
DefaultTablegroupID	int64	`gorm:"column:default_tablegroup_id" json:"default_tablegroup_id"`			
InRecyclebin	int64	`gorm:"column:in_recyclebin" json:"in_recyclebin"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDatabaseHistory) TableName() string {
	return "__all_database_history"
}
	

// AllDatabaseHistoryColumns get sql column name.获取数据库列名
var AllDatabaseHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DatabaseID string
	SchemaVersion string
	IsDeleted string
	DatabaseName string
	ReplicaNum string
	ZoneList string
	PrimaryZone string
	CollationType string
	Comment string
	ReadOnly string
	DefaultTablegroupID string
	InRecyclebin string
	DropSchemaVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DatabaseName:"database_name",  
		ReplicaNum:"replica_num",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		CollationType:"collation_type",  
		Comment:"comment",  
		ReadOnly:"read_only",  
		DefaultTablegroupID:"default_tablegroup_id",  
		InRecyclebin:"in_recyclebin",  
		DropSchemaVersion:"drop_schema_version",             
	}
	
// AllDatabasePrivilege [...]		
type	AllDatabasePrivilege	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDatabasePrivilege) TableName() string {
	return "__all_database_privilege"
}
	

// AllDatabasePrivilegeColumns get sql column name.获取数据库列名
var AllDatabasePrivilegeColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	UserID string
	DatabaseName string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		UserID:"user_id",  
		DatabaseName:"database_name",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",             
	}
	
// AllDatabasePrivilegeHistory [...]		
type	AllDatabasePrivilegeHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDatabasePrivilegeHistory) TableName() string {
	return "__all_database_privilege_history"
}
	

// AllDatabasePrivilegeHistoryColumns get sql column name.获取数据库列名
var AllDatabasePrivilegeHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	UserID string
	DatabaseName string
	SchemaVersion string
	IsDeleted string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		UserID:"user_id",  
		DatabaseName:"database_name",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",             
	}
	
// AllDatafileRecoveryStatus [...]		
type	AllDatafileRecoveryStatus	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
FileID	int64	`gorm:"primaryKey;column:file_id" json:"-"`			
DestSvrIP	string	`gorm:"column:dest_svr_ip" json:"dest_svr_ip"`			
DestSvrPort	int64	`gorm:"column:dest_svr_port" json:"dest_svr_port"`			
DestUnitID	int64	`gorm:"column:dest_unit_id" json:"dest_unit_id"`			
Status	int64	`gorm:"column:status" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDatafileRecoveryStatus) TableName() string {
	return "__all_datafile_recovery_status"
}
	

// AllDatafileRecoveryStatusColumns get sql column name.获取数据库列名
var AllDatafileRecoveryStatusColumns = struct { 
	GmtCreate string
	GmtModified string
	SvrIP string
	SvrPort string
	TenantID string
	FileID string
	DestSvrIP string
	DestSvrPort string
	DestUnitID string
	Status string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		FileID:"file_id",  
		DestSvrIP:"dest_svr_ip",  
		DestSvrPort:"dest_svr_port",  
		DestUnitID:"dest_unit_id",  
		Status:"status",             
	}
	
// AllDblink [...]		
type	AllDblink	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DblinkID	int64	`gorm:"primaryKey;column:dblink_id" json:"-"`			
DblinkName	string	`gorm:"column:dblink_name" json:"dblink_name"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
HostIP	string	`gorm:"column:host_ip" json:"host_ip"`			
HostPort	int64	`gorm:"column:host_port" json:"host_port"`			
ClusterName	string	`gorm:"column:cluster_name" json:"cluster_name"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
Password	string	`gorm:"column:password" json:"password"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDblink) TableName() string {
	return "__all_dblink"
}
	

// AllDblinkColumns get sql column name.获取数据库列名
var AllDblinkColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DblinkID string
	DblinkName string
	OwnerID string
	HostIP string
	HostPort string
	ClusterName string
	TenantName string
	UserName string
	Password string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DblinkID:"dblink_id",  
		DblinkName:"dblink_name",  
		OwnerID:"owner_id",  
		HostIP:"host_ip",  
		HostPort:"host_port",  
		ClusterName:"cluster_name",  
		TenantName:"tenant_name",  
		UserName:"user_name",  
		Password:"password",             
	}
	
// AllDblinkHistory [...]		
type	AllDblinkHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DblinkID	int64	`gorm:"primaryKey;column:dblink_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DblinkName	string	`gorm:"column:dblink_name" json:"dblink_name"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
HostIP	string	`gorm:"column:host_ip" json:"host_ip"`			
HostPort	int64	`gorm:"column:host_port" json:"host_port"`			
ClusterName	string	`gorm:"column:cluster_name" json:"cluster_name"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
Password	string	`gorm:"column:password" json:"password"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDblinkHistory) TableName() string {
	return "__all_dblink_history"
}
	

// AllDblinkHistoryColumns get sql column name.获取数据库列名
var AllDblinkHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DblinkID string
	SchemaVersion string
	IsDeleted string
	DblinkName string
	OwnerID string
	HostIP string
	HostPort string
	ClusterName string
	TenantName string
	UserName string
	Password string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DblinkID:"dblink_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DblinkName:"dblink_name",  
		OwnerID:"owner_id",  
		HostIP:"host_ip",  
		HostPort:"host_port",  
		ClusterName:"cluster_name",  
		TenantName:"tenant_name",  
		UserName:"user_name",  
		Password:"password",             
	}
	
// AllDdlHelper [...]		
type	AllDdlHelper	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
SchemaID	int64	`gorm:"column:schema_id" json:"schema_id"`			
DdlType	int64	`gorm:"column:ddl_type" json:"ddl_type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDdlHelper) TableName() string {
	return "__all_ddl_helper"
}
	

// AllDdlHelperColumns get sql column name.获取数据库列名
var AllDdlHelperColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	SchemaVersion string
	SchemaID string
	DdlType string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		SchemaVersion:"schema_version",  
		SchemaID:"schema_id",  
		DdlType:"ddl_type",             
	}
	
// AllDdlID [...]		
type	AllDdlID	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DdlIDStr	string	`gorm:"primaryKey;column:ddl_id_str" json:"-"`			
DdlStmtStr	string	`gorm:"column:ddl_stmt_str" json:"ddl_stmt_str"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDdlID) TableName() string {
	return "__all_ddl_id"
}
	

// AllDdlIDColumns get sql column name.获取数据库列名
var AllDdlIDColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DdlIDStr string
	DdlStmtStr string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DdlIDStr:"ddl_id_str",  
		DdlStmtStr:"ddl_stmt_str",             
	}
	
// AllDdlOperation [...]		
type	AllDdlOperation	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
UserID	int64	`gorm:"column:user_id" json:"user_id"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
OperationType	int64	`gorm:"column:operation_type" json:"operation_type"`			
DdlStmtStr	string	`gorm:"column:ddl_stmt_str" json:"ddl_stmt_str"`			
ExecTenantID	int64	`gorm:"column:exec_tenant_id" json:"exec_tenant_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDdlOperation) TableName() string {
	return "__all_ddl_operation"
}
	

// AllDdlOperationColumns get sql column name.获取数据库列名
var AllDdlOperationColumns = struct { 
	GmtCreate string
	GmtModified string
	SchemaVersion string
	TenantID string
	UserID string
	DatabaseID string
	DatabaseName string
	TablegroupID string
	TableID string
	TableName string
	OperationType string
	DdlStmtStr string
	ExecTenantID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SchemaVersion:"schema_version",  
		TenantID:"tenant_id",  
		UserID:"user_id",  
		DatabaseID:"database_id",  
		DatabaseName:"database_name",  
		TablegroupID:"tablegroup_id",  
		TableID:"table_id",  
		TableName:"table_name",  
		OperationType:"operation_type",  
		DdlStmtStr:"ddl_stmt_str",  
		ExecTenantID:"exec_tenant_id",             
	}
	
// AllDefSubPart [...]		
type	AllDefSubPart	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
SubPartID	int64	`gorm:"primaryKey;column:sub_part_id" json:"-"`			
SubPartName	string	`gorm:"column:sub_part_name" json:"sub_part_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
SubPartIDx	int64	`gorm:"column:sub_part_idx" json:"sub_part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgSubPartID	int64	`gorm:"column:mapping_pg_sub_part_id" json:"mapping_pg_sub_part_id"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDefSubPart) TableName() string {
	return "__all_def_sub_part"
}
	

// AllDefSubPartColumns get sql column name.获取数据库列名
var AllDefSubPartColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	SubPartID string
	SubPartName string
	SchemaVersion string
	HighBoundVal string
	BHighBoundVal string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	SubPartIDx string
	SourcePartitionID string
	MappingPgSubPartID string
	TablespaceID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		SubPartID:"sub_part_id",  
		SubPartName:"sub_part_name",  
		SchemaVersion:"schema_version",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		SubPartIDx:"sub_part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgSubPartID:"mapping_pg_sub_part_id",  
		TablespaceID:"tablespace_id",             
	}
	
// AllDefSubPartHistory [...]		
type	AllDefSubPartHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
SubPartID	int64	`gorm:"primaryKey;column:sub_part_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
SubPartName	string	`gorm:"column:sub_part_name" json:"sub_part_name"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
SubPartIDx	int64	`gorm:"column:sub_part_idx" json:"sub_part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgSubPartID	int64	`gorm:"column:mapping_pg_sub_part_id" json:"mapping_pg_sub_part_id"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDefSubPartHistory) TableName() string {
	return "__all_def_sub_part_history"
}
	

// AllDefSubPartHistoryColumns get sql column name.获取数据库列名
var AllDefSubPartHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	SubPartID string
	SchemaVersion string
	IsDeleted string
	SubPartName string
	HighBoundVal string
	BHighBoundVal string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	SubPartIDx string
	SourcePartitionID string
	MappingPgSubPartID string
	TablespaceID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		SubPartID:"sub_part_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		SubPartName:"sub_part_name",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		SubPartIDx:"sub_part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgSubPartID:"mapping_pg_sub_part_id",  
		TablespaceID:"tablespace_id",             
	}
	
// AllDummy [...]		
type	AllDummy	struct {		
Key	int64	`gorm:"primaryKey;column:key" json:"-"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllDummy) TableName() string {
	return "__all_dummy"
}
	

// AllDummyColumns get sql column name.获取数据库列名
var AllDummyColumns = struct { 
	Key string    
	}{ 
		Key:"key",             
	}
	
// AllElectionEventHistory [...]		
type	AllElectionEventHistory	struct {		
GmtCreate	time.Time	`gorm:"primaryKey;column:gmt_create" json:"-"`			
TableID	uint64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionIDx	int64	`gorm:"primaryKey;column:partition_idx" json:"-"`			
PartitionCnt	int64	`gorm:"primaryKey;column:partition_cnt" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Event	string	`gorm:"column:event" json:"event"`			
Leader	string	`gorm:"column:leader" json:"leader"`			
Info	string	`gorm:"column:info" json:"info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllElectionEventHistory) TableName() string {
	return "__all_election_event_history"
}
	

// AllElectionEventHistoryColumns get sql column name.获取数据库列名
var AllElectionEventHistoryColumns = struct { 
	GmtCreate string
	TableID string
	PartitionIDx string
	PartitionCnt string
	SvrIP string
	SvrPort string
	Event string
	Leader string
	Info string    
	}{ 
		GmtCreate:"gmt_create",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Event:"event",  
		Leader:"leader",  
		Info:"info",             
	}
	
// AllForeignKey [...]		
type	AllForeignKey	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ForeignKeyID	int64	`gorm:"primaryKey;column:foreign_key_id" json:"-"`			
ForeignKeyName	string	`gorm:"column:foreign_key_name" json:"foreign_key_name"`			
ChildTableID	int64	`gorm:"column:child_table_id" json:"child_table_id"`			
ParentTableID	int64	`gorm:"column:parent_table_id" json:"parent_table_id"`			
UpdateAction	int64	`gorm:"column:update_action" json:"update_action"`			
DeleteAction	int64	`gorm:"column:delete_action" json:"delete_action"`			
EnableFlag	int8	`gorm:"column:enable_flag" json:"enable_flag"`			
RefCstType	int64	`gorm:"column:ref_cst_type" json:"ref_cst_type"`			
RefCstID	int64	`gorm:"column:ref_cst_id" json:"ref_cst_id"`			
ValidateFlag	int8	`gorm:"column:validate_flag" json:"validate_flag"`			
RelyFlag	int8	`gorm:"column:rely_flag" json:"rely_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllForeignKey) TableName() string {
	return "__all_foreign_key"
}
	

// AllForeignKeyColumns get sql column name.获取数据库列名
var AllForeignKeyColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ForeignKeyID string
	ForeignKeyName string
	ChildTableID string
	ParentTableID string
	UpdateAction string
	DeleteAction string
	EnableFlag string
	RefCstType string
	RefCstID string
	ValidateFlag string
	RelyFlag string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ForeignKeyID:"foreign_key_id",  
		ForeignKeyName:"foreign_key_name",  
		ChildTableID:"child_table_id",  
		ParentTableID:"parent_table_id",  
		UpdateAction:"update_action",  
		DeleteAction:"delete_action",  
		EnableFlag:"enable_flag",  
		RefCstType:"ref_cst_type",  
		RefCstID:"ref_cst_id",  
		ValidateFlag:"validate_flag",  
		RelyFlag:"rely_flag",             
	}
	
// AllForeignKeyColumn [...]		
type	AllForeignKeyColumn	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ForeignKeyID	int64	`gorm:"primaryKey;column:foreign_key_id" json:"-"`			
ChildColumnID	int64	`gorm:"primaryKey;column:child_column_id" json:"-"`			
ParentColumnID	int64	`gorm:"primaryKey;column:parent_column_id" json:"-"`			
Position	int64	`gorm:"column:position" json:"position"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllForeignKeyColumn) TableName() string {
	return "__all_foreign_key_column"
}
	

// AllForeignKeyColumnColumns get sql column name.获取数据库列名
var AllForeignKeyColumnColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ForeignKeyID string
	ChildColumnID string
	ParentColumnID string
	Position string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ForeignKeyID:"foreign_key_id",  
		ChildColumnID:"child_column_id",  
		ParentColumnID:"parent_column_id",  
		Position:"position",             
	}
	
// AllForeignKeyColumnHistory [...]		
type	AllForeignKeyColumnHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ForeignKeyID	int64	`gorm:"primaryKey;column:foreign_key_id" json:"-"`			
ChildColumnID	int64	`gorm:"primaryKey;column:child_column_id" json:"-"`			
ParentColumnID	int64	`gorm:"primaryKey;column:parent_column_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
Position	int64	`gorm:"column:position" json:"position"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllForeignKeyColumnHistory) TableName() string {
	return "__all_foreign_key_column_history"
}
	

// AllForeignKeyColumnHistoryColumns get sql column name.获取数据库列名
var AllForeignKeyColumnHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ForeignKeyID string
	ChildColumnID string
	ParentColumnID string
	SchemaVersion string
	IsDeleted string
	Position string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ForeignKeyID:"foreign_key_id",  
		ChildColumnID:"child_column_id",  
		ParentColumnID:"parent_column_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		Position:"position",             
	}
	
// AllForeignKeyHistory [...]		
type	AllForeignKeyHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ForeignKeyID	int64	`gorm:"primaryKey;column:foreign_key_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ForeignKeyName	string	`gorm:"column:foreign_key_name" json:"foreign_key_name"`			
ChildTableID	int64	`gorm:"column:child_table_id" json:"child_table_id"`			
ParentTableID	int64	`gorm:"column:parent_table_id" json:"parent_table_id"`			
UpdateAction	int64	`gorm:"column:update_action" json:"update_action"`			
DeleteAction	int64	`gorm:"column:delete_action" json:"delete_action"`			
EnableFlag	int8	`gorm:"column:enable_flag" json:"enable_flag"`			
RefCstType	int64	`gorm:"column:ref_cst_type" json:"ref_cst_type"`			
RefCstID	int64	`gorm:"column:ref_cst_id" json:"ref_cst_id"`			
ValidateFlag	int8	`gorm:"column:validate_flag" json:"validate_flag"`			
RelyFlag	int8	`gorm:"column:rely_flag" json:"rely_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllForeignKeyHistory) TableName() string {
	return "__all_foreign_key_history"
}
	

// AllForeignKeyHistoryColumns get sql column name.获取数据库列名
var AllForeignKeyHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ForeignKeyID string
	SchemaVersion string
	IsDeleted string
	ForeignKeyName string
	ChildTableID string
	ParentTableID string
	UpdateAction string
	DeleteAction string
	EnableFlag string
	RefCstType string
	RefCstID string
	ValidateFlag string
	RelyFlag string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ForeignKeyID:"foreign_key_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		ForeignKeyName:"foreign_key_name",  
		ChildTableID:"child_table_id",  
		ParentTableID:"parent_table_id",  
		UpdateAction:"update_action",  
		DeleteAction:"delete_action",  
		EnableFlag:"enable_flag",  
		RefCstType:"ref_cst_type",  
		RefCstID:"ref_cst_id",  
		ValidateFlag:"validate_flag",  
		RelyFlag:"rely_flag",             
	}
	
// AllFreezeSchemaVersion [...]		
type	AllFreezeSchemaVersion	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
FrozenVersion	int64	`gorm:"primaryKey;column:frozen_version" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllFreezeSchemaVersion) TableName() string {
	return "__all_freeze_schema_version"
}
	

// AllFreezeSchemaVersionColumns get sql column name.获取数据库列名
var AllFreezeSchemaVersionColumns = struct { 
	GmtCreate string
	GmtModified string
	FrozenVersion string
	TenantID string
	SchemaVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		FrozenVersion:"frozen_version",  
		TenantID:"tenant_id",  
		SchemaVersion:"schema_version",             
	}
	
// AllFrozenMap [...]		
type	AllFrozenMap	struct {		
FrozenVersion	int64	`gorm:"primaryKey;column:frozen_version" json:"-"`			
FrozenTimestamp	int64	`gorm:"primaryKey;column:frozen_timestamp" json:"-"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllFrozenMap) TableName() string {
	return "__all_frozen_map"
}
	

// AllFrozenMapColumns get sql column name.获取数据库列名
var AllFrozenMapColumns = struct { 
	FrozenVersion string
	FrozenTimestamp string    
	}{ 
		FrozenVersion:"frozen_version",  
		FrozenTimestamp:"frozen_timestamp",             
	}
	
// AllFunc [...]		
type	AllFunc	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
Ret	int64	`gorm:"column:ret" json:"ret"`			
Dl	string	`gorm:"column:dl" json:"dl"`			
UdfID	int64	`gorm:"column:udf_id" json:"udf_id"`			
Type	int64	`gorm:"column:type" json:"type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllFunc) TableName() string {
	return "__all_func"
}
	

// AllFuncColumns get sql column name.获取数据库列名
var AllFuncColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Name string
	Ret string
	Dl string
	UdfID string
	Type string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Name:"name",  
		Ret:"ret",  
		Dl:"dl",  
		UdfID:"udf_id",  
		Type:"type",             
	}
	
// AllFuncHistory [...]		
type	AllFuncHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
Ret	int64	`gorm:"column:ret" json:"ret"`			
Dl	string	`gorm:"column:dl" json:"dl"`			
UdfID	int64	`gorm:"column:udf_id" json:"udf_id"`			
Type	int64	`gorm:"column:type" json:"type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllFuncHistory) TableName() string {
	return "__all_func_history"
}
	

// AllFuncHistoryColumns get sql column name.获取数据库列名
var AllFuncHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Name string
	SchemaVersion string
	IsDeleted string
	Ret string
	Dl string
	UdfID string
	Type string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Name:"name",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		Ret:"ret",  
		Dl:"dl",  
		UdfID:"udf_id",  
		Type:"type",             
	}
	
// AllGlobalIndexDataSrc [...]		
type	AllGlobalIndexDataSrc	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
IndexTableID	int64	`gorm:"primaryKey;column:index_table_id" json:"-"`			
DataTableID	int64	`gorm:"primaryKey;column:data_table_id" json:"-"`			
DataPartitionID	int64	`gorm:"primaryKey;column:data_partition_id" json:"-"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllGlobalIndexDataSrc) TableName() string {
	return "__all_global_index_data_src"
}
	

// AllGlobalIndexDataSrcColumns get sql column name.获取数据库列名
var AllGlobalIndexDataSrcColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	IndexTableID string
	DataTableID string
	DataPartitionID string
	SvrIP string
	SvrPort string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		IndexTableID:"index_table_id",  
		DataTableID:"data_table_id",  
		DataPartitionID:"data_partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",             
	}
	
// AllGts [...]		
type	AllGts	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
GtsID	int64	`gorm:"primaryKey;column:gts_id" json:"-"`			
GtsName	string	`gorm:"column:gts_name" json:"gts_name"`			
Region	string	`gorm:"column:region" json:"region"`			
EpochID	int64	`gorm:"column:epoch_id" json:"epoch_id"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
StandbyIP	string	`gorm:"column:standby_ip" json:"standby_ip"`			
StandbyPort	int64	`gorm:"column:standby_port" json:"standby_port"`			
HeartbeatTs	int64	`gorm:"column:heartbeat_ts" json:"heartbeat_ts"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllGts) TableName() string {
	return "__all_gts"
}
	

// AllGtsColumns get sql column name.获取数据库列名
var AllGtsColumns = struct { 
	GmtCreate string
	GmtModified string
	GtsID string
	GtsName string
	Region string
	EpochID string
	MemberList string
	StandbyIP string
	StandbyPort string
	HeartbeatTs string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		GtsID:"gts_id",  
		GtsName:"gts_name",  
		Region:"region",  
		EpochID:"epoch_id",  
		MemberList:"member_list",  
		StandbyIP:"standby_ip",  
		StandbyPort:"standby_port",  
		HeartbeatTs:"heartbeat_ts",             
	}
	
// AllHistogramStat [...]		
type	AllHistogramStat	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
EndpointNum	int64	`gorm:"primaryKey;column:endpoint_num" json:"-"`			
ObjectType	int64	`gorm:"column:object_type" json:"object_type"`			
EndpointValue	string	`gorm:"column:endpoint_value" json:"endpoint_value"`			
BEndpointValue	string	`gorm:"column:b_endpoint_value" json:"b_endpoint_value"`			
EndpointRepeatCnt	int64	`gorm:"column:endpoint_repeat_cnt" json:"endpoint_repeat_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllHistogramStat) TableName() string {
	return "__all_histogram_stat"
}
	

// AllHistogramStatColumns get sql column name.获取数据库列名
var AllHistogramStatColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	ColumnID string
	EndpointNum string
	ObjectType string
	EndpointValue string
	BEndpointValue string
	EndpointRepeatCnt string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		ColumnID:"column_id",  
		EndpointNum:"endpoint_num",  
		ObjectType:"object_type",  
		EndpointValue:"endpoint_value",  
		BEndpointValue:"b_endpoint_value",  
		EndpointRepeatCnt:"endpoint_repeat_cnt",             
	}
	
// AllImmediateEffectIndexSstable [...]		
type	AllImmediateEffectIndexSstable	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
IndexTableID	int64	`gorm:"primaryKey;column:index_table_id" json:"-"`			
PartitionID,	int64	`gorm:"primaryKey;column:partition_id," json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Snapshot	int64	`gorm:"column:snapshot" json:"snapshot"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllImmediateEffectIndexSstable) TableName() string {
	return "__all_immediate_effect_index_sstable"
}
	

// AllImmediateEffectIndexSstableColumns get sql column name.获取数据库列名
var AllImmediateEffectIndexSstableColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	IndexTableID string
	PartitionID, string
	SvrIP string
	SvrPort string
	Snapshot string
	PartitionCnt string
	DataSize string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		IndexTableID:"index_table_id",  
		PartitionID,:"partition_id,",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Snapshot:"snapshot",  
		PartitionCnt:"partition_cnt",  
		DataSize:"data_size",             
	}
	
// AllIndexBuildStat [...]		
type	AllIndexBuildStat	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DataTableID	int64	`gorm:"primaryKey;column:data_table_id" json:"-"`			
IndexTableID	int64	`gorm:"primaryKey;column:index_table_id" json:"-"`			
Status	int64	`gorm:"column:status" json:"status"`			
Snapshot	int64	`gorm:"column:snapshot" json:"snapshot"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllIndexBuildStat) TableName() string {
	return "__all_index_build_stat"
}
	

// AllIndexBuildStatColumns get sql column name.获取数据库列名
var AllIndexBuildStatColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DataTableID string
	IndexTableID string
	Status string
	Snapshot string
	SchemaVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DataTableID:"data_table_id",  
		IndexTableID:"index_table_id",  
		Status:"status",  
		Snapshot:"snapshot",  
		SchemaVersion:"schema_version",             
	}
	
// AllIndexChecksum [...]		
type	AllIndexChecksum	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ExecutionID	int64	`gorm:"primaryKey;column:execution_id" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
Checksum	int64	`gorm:"column:checksum" json:"checksum"`			
ChecksumMethod	int64	`gorm:"column:checksum_method" json:"checksum_method"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllIndexChecksum) TableName() string {
	return "__all_index_checksum"
}
	

// AllIndexChecksumColumns get sql column name.获取数据库列名
var AllIndexChecksumColumns = struct { 
	GmtCreate string
	GmtModified string
	ExecutionID string
	TenantID string
	TableID string
	PartitionID string
	ColumnID string
	TaskID string
	Checksum string
	ChecksumMethod string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ExecutionID:"execution_id",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		ColumnID:"column_id",  
		TaskID:"task_id",  
		Checksum:"checksum",  
		ChecksumMethod:"checksum_method",             
	}
	
// AllIndexScheduleTask [...]		
type	AllIndexScheduleTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
IndexTableID	int64	`gorm:"primaryKey;column:index_table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
FrozenVersion	int64	`gorm:"column:frozen_version" json:"frozen_version"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllIndexScheduleTask) TableName() string {
	return "__all_index_schedule_task"
}
	

// AllIndexScheduleTaskColumns get sql column name.获取数据库列名
var AllIndexScheduleTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	IndexTableID string
	PartitionID string
	SvrIP string
	SvrPort string
	FrozenVersion string
	SnapshotVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		IndexTableID:"index_table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		FrozenVersion:"frozen_version",  
		SnapshotVersion:"snapshot_version",             
	}
	
// AllIndexWaitTransactionStatus [...]		
type	AllIndexWaitTransactionStatus	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
IndexTableID	int64	`gorm:"primaryKey;column:index_table_id" json:"-"`			
SvrType	int64	`gorm:"primaryKey;column:svr_type" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TransStatus	int64	`gorm:"column:trans_status" json:"trans_status"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
FrozenVersion	int64	`gorm:"column:frozen_version" json:"frozen_version"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllIndexWaitTransactionStatus) TableName() string {
	return "__all_index_wait_transaction_status"
}
	

// AllIndexWaitTransactionStatusColumns get sql column name.获取数据库列名
var AllIndexWaitTransactionStatusColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	IndexTableID string
	SvrType string
	PartitionID string
	SvrIP string
	SvrPort string
	TransStatus string
	SnapshotVersion string
	FrozenVersion string
	SchemaVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		IndexTableID:"index_table_id",  
		SvrType:"svr_type",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TransStatus:"trans_status",  
		SnapshotVersion:"snapshot_version",  
		FrozenVersion:"frozen_version",  
		SchemaVersion:"schema_version",             
	}
	
// AllKvTTLTask [...]		
type	AllKvTTLTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
TaskStartTime	int64	`gorm:"column:task_start_time" json:"task_start_time"`			
TaskUpdateTime	int64	`gorm:"column:task_update_time" json:"task_update_time"`			
TriggerType	int64	`gorm:"column:trigger_type" json:"trigger_type"`			
Status	int64	`gorm:"column:status" json:"status"`			
TTLDelCnt	int64	`gorm:"column:ttl_del_cnt" json:"ttl_del_cnt"`			
MaxVersionDelCnt	int64	`gorm:"column:max_version_del_cnt" json:"max_version_del_cnt"`			
ScanCnt	int64	`gorm:"column:scan_cnt" json:"scan_cnt"`			
RowKey	[]byte	`gorm:"column:row_key" json:"row_key"`			
RetCode	string	`gorm:"column:ret_code" json:"ret_code"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllKvTTLTask) TableName() string {
	return "__all_kv_ttl_task"
}
	

// AllKvTTLTaskColumns get sql column name.获取数据库列名
var AllKvTTLTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TaskID string
	TableID string
	PartitionID string
	TaskStartTime string
	TaskUpdateTime string
	TriggerType string
	Status string
	TTLDelCnt string
	MaxVersionDelCnt string
	ScanCnt string
	RowKey string
	RetCode string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TaskID:"task_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		TaskStartTime:"task_start_time",  
		TaskUpdateTime:"task_update_time",  
		TriggerType:"trigger_type",  
		Status:"status",  
		TTLDelCnt:"ttl_del_cnt",  
		MaxVersionDelCnt:"max_version_del_cnt",  
		ScanCnt:"scan_cnt",  
		RowKey:"row_key",  
		RetCode:"ret_code",             
	}
	
// AllKvTTLTaskHistory [...]		
type	AllKvTTLTaskHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
TaskStartTime	int64	`gorm:"column:task_start_time" json:"task_start_time"`			
TaskUpdateTime	int64	`gorm:"column:task_update_time" json:"task_update_time"`			
TriggerType	int64	`gorm:"column:trigger_type" json:"trigger_type"`			
Status	int64	`gorm:"column:status" json:"status"`			
TTLDelCnt	int64	`gorm:"column:ttl_del_cnt" json:"ttl_del_cnt"`			
MaxVersionDelCnt	int64	`gorm:"column:max_version_del_cnt" json:"max_version_del_cnt"`			
ScanCnt	int64	`gorm:"column:scan_cnt" json:"scan_cnt"`			
RowKey	[]byte	`gorm:"column:row_key" json:"row_key"`			
RetCode	string	`gorm:"column:ret_code" json:"ret_code"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllKvTTLTaskHistory) TableName() string {
	return "__all_kv_ttl_task_history"
}
	

// AllKvTTLTaskHistoryColumns get sql column name.获取数据库列名
var AllKvTTLTaskHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TaskID string
	TableID string
	PartitionID string
	TaskStartTime string
	TaskUpdateTime string
	TriggerType string
	Status string
	TTLDelCnt string
	MaxVersionDelCnt string
	ScanCnt string
	RowKey string
	RetCode string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TaskID:"task_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		TaskStartTime:"task_start_time",  
		TaskUpdateTime:"task_update_time",  
		TriggerType:"trigger_type",  
		Status:"status",  
		TTLDelCnt:"ttl_del_cnt",  
		MaxVersionDelCnt:"max_version_del_cnt",  
		ScanCnt:"scan_cnt",  
		RowKey:"row_key",  
		RetCode:"ret_code",             
	}
	
// AllLocalIndexStatus [...]		
type	AllLocalIndexStatus	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
IndexTableID	int64	`gorm:"primaryKey;column:index_table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
IndexStatus	int64	`gorm:"column:index_status" json:"index_status"`			
RetCode	int64	`gorm:"column:ret_code" json:"ret_code"`			
Role	int64	`gorm:"column:role" json:"role"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllLocalIndexStatus) TableName() string {
	return "__all_local_index_status"
}
	

// AllLocalIndexStatusColumns get sql column name.获取数据库列名
var AllLocalIndexStatusColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	IndexTableID string
	PartitionID string
	SvrIP string
	SvrPort string
	IndexStatus string
	RetCode string
	Role string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		IndexTableID:"index_table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		IndexStatus:"index_status",  
		RetCode:"ret_code",  
		Role:"role",             
	}
	
// AllMetaTable [...]		
type	AllMetaTable	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
IsOriginalLeader	int64	`gorm:"column:is_original_leader" json:"is_original_leader"`			
IsPreviousLeader	int64	`gorm:"column:is_previous_leader" json:"is_previous_leader"`			
CreateTime	int64	`gorm:"column:create_time" json:"create_time"`			
Rebuild	int64	`gorm:"column:rebuild" json:"rebuild"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
Status	string	`gorm:"column:status" json:"status"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
PartitionChecksum	int64	`gorm:"column:partition_checksum" json:"partition_checksum"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
FailList	string	`gorm:"column:fail_list" json:"fail_list"`			
RecoveryTimestamp	int64	`gorm:"column:recovery_timestamp" json:"recovery_timestamp"`			
MemstorePercent	int64	`gorm:"column:memstore_percent" json:"memstore_percent"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllMetaTable) TableName() string {
	return "__all_meta_table"
}
	

// AllMetaTableColumns get sql column name.获取数据库列名
var AllMetaTableColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	SQLPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	RowCount string
	DataSize string
	DataVersion string
	DataChecksum string
	RowChecksum string
	ColumnChecksum string
	IsOriginalLeader string
	IsPreviousLeader string
	CreateTime string
	Rebuild string
	ReplicaType string
	RequiredSize string
	Status string
	IsRestore string
	PartitionChecksum string
	Quorum string
	FailList string
	RecoveryTimestamp string
	MemstorePercent string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLPort:"sql_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		DataChecksum:"data_checksum",  
		RowChecksum:"row_checksum",  
		ColumnChecksum:"column_checksum",  
		IsOriginalLeader:"is_original_leader",  
		IsPreviousLeader:"is_previous_leader",  
		CreateTime:"create_time",  
		Rebuild:"rebuild",  
		ReplicaType:"replica_type",  
		RequiredSize:"required_size",  
		Status:"status",  
		IsRestore:"is_restore",  
		PartitionChecksum:"partition_checksum",  
		Quorum:"quorum",  
		FailList:"fail_list",  
		RecoveryTimestamp:"recovery_timestamp",  
		MemstorePercent:"memstore_percent",             
	}
	
// AllOriSchemaVersion [...]		
type	AllOriSchemaVersion	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
OriSchemaVersion	int64	`gorm:"column:ori_schema_version" json:"ori_schema_version"`			
BuildingSnapshot	int64	`gorm:"column:building_snapshot" json:"building_snapshot"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllOriSchemaVersion) TableName() string {
	return "__all_ori_schema_version"
}
	

// AllOriSchemaVersionColumns get sql column name.获取数据库列名
var AllOriSchemaVersionColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	OriSchemaVersion string
	BuildingSnapshot string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		OriSchemaVersion:"ori_schema_version",  
		BuildingSnapshot:"building_snapshot",             
	}
	
// AllOutline [...]		
type	AllOutline	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
OutlineID	int64	`gorm:"primaryKey;column:outline_id" json:"-"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
Name	string	`gorm:"column:name" json:"name"`			
Signature	[]byte	`gorm:"column:signature" json:"signature"`			
OutlineContent	string	`gorm:"column:outline_content" json:"outline_content"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
Owner	string	`gorm:"column:owner" json:"owner"`			
Used	int64	`gorm:"column:used" json:"used"`			
Version	string	`gorm:"column:version" json:"version"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
Enabled	int64	`gorm:"column:enabled" json:"enabled"`			
Format	int64	`gorm:"column:format" json:"format"`			
OutlineParams	[]byte	`gorm:"column:outline_params" json:"outline_params"`			
OutlineTarget	string	`gorm:"column:outline_target" json:"outline_target"`			
SQLID	[]byte	`gorm:"column:sql_id" json:"sql_id"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllOutline) TableName() string {
	return "__all_outline"
}
	

// AllOutlineColumns get sql column name.获取数据库列名
var AllOutlineColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	OutlineID string
	DatabaseID string
	SchemaVersion string
	Name string
	Signature string
	OutlineContent string
	SQLText string
	Owner string
	Used string
	Version string
	Compatible string
	Enabled string
	Format string
	OutlineParams string
	OutlineTarget string
	SQLID string
	OwnerID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		OutlineID:"outline_id",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		Name:"name",  
		Signature:"signature",  
		OutlineContent:"outline_content",  
		SQLText:"sql_text",  
		Owner:"owner",  
		Used:"used",  
		Version:"version",  
		Compatible:"compatible",  
		Enabled:"enabled",  
		Format:"format",  
		OutlineParams:"outline_params",  
		OutlineTarget:"outline_target",  
		SQLID:"sql_id",  
		OwnerID:"owner_id",             
	}
	
// AllOutlineHistory [...]		
type	AllOutlineHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
OutlineID	int64	`gorm:"primaryKey;column:outline_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
Name	string	`gorm:"column:name" json:"name"`			
Signature	[]byte	`gorm:"column:signature" json:"signature"`			
OutlineContent	string	`gorm:"column:outline_content" json:"outline_content"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
Owner	string	`gorm:"column:owner" json:"owner"`			
Used	int64	`gorm:"column:used" json:"used"`			
Version	string	`gorm:"column:version" json:"version"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
Enabled	int64	`gorm:"column:enabled" json:"enabled"`			
Format	int64	`gorm:"column:format" json:"format"`			
OutlineParams	[]byte	`gorm:"column:outline_params" json:"outline_params"`			
OutlineTarget	string	`gorm:"column:outline_target" json:"outline_target"`			
SQLID	[]byte	`gorm:"column:sql_id" json:"sql_id"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllOutlineHistory) TableName() string {
	return "__all_outline_history"
}
	

// AllOutlineHistoryColumns get sql column name.获取数据库列名
var AllOutlineHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	OutlineID string
	SchemaVersion string
	IsDeleted string
	DatabaseID string
	Name string
	Signature string
	OutlineContent string
	SQLText string
	Owner string
	Used string
	Version string
	Compatible string
	Enabled string
	Format string
	OutlineParams string
	OutlineTarget string
	SQLID string
	OwnerID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		OutlineID:"outline_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		Name:"name",  
		Signature:"signature",  
		OutlineContent:"outline_content",  
		SQLText:"sql_text",  
		Owner:"owner",  
		Used:"used",  
		Version:"version",  
		Compatible:"compatible",  
		Enabled:"enabled",  
		Format:"format",  
		OutlineParams:"outline_params",  
		OutlineTarget:"outline_target",  
		SQLID:"sql_id",  
		OwnerID:"owner_id",             
	}
	
// AllPackage [...]		
type	AllPackage	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
PackageID	int64	`gorm:"primaryKey;column:package_id" json:"-"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
PackageName	string	`gorm:"column:package_name" json:"package_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
Type	int64	`gorm:"column:type" json:"type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
Source	string	`gorm:"column:source" json:"source"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllPackage) TableName() string {
	return "__all_package"
}
	

// AllPackageColumns get sql column name.获取数据库列名
var AllPackageColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	PackageID string
	DatabaseID string
	PackageName string
	SchemaVersion string
	Type string
	Flag string
	OwnerID string
	CompFlag string
	ExecEnv string
	Source string
	Comment string
	RouteSQL string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		PackageID:"package_id",  
		DatabaseID:"database_id",  
		PackageName:"package_name",  
		SchemaVersion:"schema_version",  
		Type:"type",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		CompFlag:"comp_flag",  
		ExecEnv:"exec_env",  
		Source:"source",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllPackageHistory [...]		
type	AllPackageHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
PackageID	int64	`gorm:"primaryKey;column:package_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
PackageName	string	`gorm:"column:package_name" json:"package_name"`			
Type	int64	`gorm:"column:type" json:"type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
Source	string	`gorm:"column:source" json:"source"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllPackageHistory) TableName() string {
	return "__all_package_history"
}
	

// AllPackageHistoryColumns get sql column name.获取数据库列名
var AllPackageHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	PackageID string
	SchemaVersion string
	IsDeleted string
	DatabaseID string
	PackageName string
	Type string
	Flag string
	OwnerID string
	CompFlag string
	ExecEnv string
	Source string
	Comment string
	RouteSQL string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		PackageID:"package_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		PackageName:"package_name",  
		Type:"type",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		CompFlag:"comp_flag",  
		ExecEnv:"exec_env",  
		Source:"source",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllPart [...]		
type	AllPart	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
PartName	string	`gorm:"column:part_name" json:"part_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
SubPartSpace	int64	`gorm:"column:sub_part_space" json:"sub_part_space"`			
NewSubPartNum	int64	`gorm:"column:new_sub_part_num" json:"new_sub_part_num"`			
NewSubPartSpace	int64	`gorm:"column:new_sub_part_space" json:"new_sub_part_space"`			
SubPartInterval	string	`gorm:"column:sub_part_interval" json:"sub_part_interval"`			
SubIntervalStart	string	`gorm:"column:sub_interval_start" json:"sub_interval_start"`			
NewSubPartInterval	string	`gorm:"column:new_sub_part_interval" json:"new_sub_part_interval"`			
NewSubIntervalStart	string	`gorm:"column:new_sub_interval_start" json:"new_sub_interval_start"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
PartIDx	int64	`gorm:"column:part_idx" json:"part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgPartID	int64	`gorm:"column:mapping_pg_part_id" json:"mapping_pg_part_id"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
MaxUsedSubPartID	int64	`gorm:"column:max_used_sub_part_id" json:"max_used_sub_part_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllPart) TableName() string {
	return "__all_part"
}
	

// AllPartColumns get sql column name.获取数据库列名
var AllPartColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartID string
	PartName string
	SchemaVersion string
	HighBoundVal string
	BHighBoundVal string
	SubPartNum string
	SubPartSpace string
	NewSubPartNum string
	NewSubPartSpace string
	SubPartInterval string
	SubIntervalStart string
	NewSubPartInterval string
	NewSubIntervalStart string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Status string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	PartIDx string
	SourcePartitionID string
	MappingPgPartID string
	TablespaceID string
	DropSchemaVersion string
	MaxUsedSubPartID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartID:"part_id",  
		PartName:"part_name",  
		SchemaVersion:"schema_version",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		SubPartNum:"sub_part_num",  
		SubPartSpace:"sub_part_space",  
		NewSubPartNum:"new_sub_part_num",  
		NewSubPartSpace:"new_sub_part_space",  
		SubPartInterval:"sub_part_interval",  
		SubIntervalStart:"sub_interval_start",  
		NewSubPartInterval:"new_sub_part_interval",  
		NewSubIntervalStart:"new_sub_interval_start",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Status:"status",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		PartIDx:"part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgPartID:"mapping_pg_part_id",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		MaxUsedSubPartID:"max_used_sub_part_id",             
	}
	
// AllPartHistory [...]		
type	AllPartHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PartName	string	`gorm:"column:part_name" json:"part_name"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
SubPartSpace	int64	`gorm:"column:sub_part_space" json:"sub_part_space"`			
NewSubPartNum	int64	`gorm:"column:new_sub_part_num" json:"new_sub_part_num"`			
NewSubPartSpace	int64	`gorm:"column:new_sub_part_space" json:"new_sub_part_space"`			
SubPartInterval	string	`gorm:"column:sub_part_interval" json:"sub_part_interval"`			
SubIntervalStart	string	`gorm:"column:sub_interval_start" json:"sub_interval_start"`			
NewSubPartInterval	string	`gorm:"column:new_sub_part_interval" json:"new_sub_part_interval"`			
NewSubIntervalStart	string	`gorm:"column:new_sub_interval_start" json:"new_sub_interval_start"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
PartIDx	int64	`gorm:"column:part_idx" json:"part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgPartID	int64	`gorm:"column:mapping_pg_part_id" json:"mapping_pg_part_id"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
MaxUsedSubPartID	int64	`gorm:"column:max_used_sub_part_id" json:"max_used_sub_part_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllPartHistory) TableName() string {
	return "__all_part_history"
}
	

// AllPartHistoryColumns get sql column name.获取数据库列名
var AllPartHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartID string
	SchemaVersion string
	IsDeleted string
	PartName string
	HighBoundVal string
	BHighBoundVal string
	SubPartNum string
	SubPartSpace string
	NewSubPartNum string
	NewSubPartSpace string
	SubPartInterval string
	SubIntervalStart string
	NewSubPartInterval string
	NewSubIntervalStart string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Status string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	PartIDx string
	SourcePartitionID string
	MappingPgPartID string
	TablespaceID string
	DropSchemaVersion string
	MaxUsedSubPartID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartID:"part_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		PartName:"part_name",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		SubPartNum:"sub_part_num",  
		SubPartSpace:"sub_part_space",  
		NewSubPartNum:"new_sub_part_num",  
		NewSubPartSpace:"new_sub_part_space",  
		SubPartInterval:"sub_part_interval",  
		SubIntervalStart:"sub_interval_start",  
		NewSubPartInterval:"new_sub_part_interval",  
		NewSubIntervalStart:"new_sub_interval_start",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Status:"status",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		PartIDx:"part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgPartID:"mapping_pg_part_id",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		MaxUsedSubPartID:"max_used_sub_part_id",             
	}
	
// AllPartInfo [...]		
type	AllPartInfo	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartType	int64	`gorm:"column:part_type" json:"part_type"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
PartSpace	int64	`gorm:"column:part_space" json:"part_space"`			
NewPartNum	int64	`gorm:"column:new_part_num" json:"new_part_num"`			
NewPartSpace	int64	`gorm:"column:new_part_space" json:"new_part_space"`			
SubPartType	int64	`gorm:"column:sub_part_type" json:"sub_part_type"`			
DefSubPartNum	int64	`gorm:"column:def_sub_part_num" json:"def_sub_part_num"`			
PartExpr	string	`gorm:"column:part_expr" json:"part_expr"`			
SubPartExpr	string	`gorm:"column:sub_part_expr" json:"sub_part_expr"`			
PartInterval	string	`gorm:"column:part_interval" json:"part_interval"`			
IntervalStart	string	`gorm:"column:interval_start" json:"interval_start"`			
NewPartInterval	string	`gorm:"column:new_part_interval" json:"new_part_interval"`			
NewIntervalStart	string	`gorm:"column:new_interval_start" json:"new_interval_start"`			
DefSubPartInterval	string	`gorm:"column:def_sub_part_interval" json:"def_sub_part_interval"`			
DefSubIntervalStart	string	`gorm:"column:def_sub_interval_start" json:"def_sub_interval_start"`			
NewDefSubPartInterval	string	`gorm:"column:new_def_sub_part_interval" json:"new_def_sub_part_interval"`			
NewDefSubIntervalStart	string	`gorm:"column:new_def_sub_interval_start" json:"new_def_sub_interval_start"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllPartInfo) TableName() string {
	return "__all_part_info"
}
	

// AllPartInfoColumns get sql column name.获取数据库列名
var AllPartInfoColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartType string
	SchemaVersion string
	PartNum string
	PartSpace string
	NewPartNum string
	NewPartSpace string
	SubPartType string
	DefSubPartNum string
	PartExpr string
	SubPartExpr string
	PartInterval string
	IntervalStart string
	NewPartInterval string
	NewIntervalStart string
	DefSubPartInterval string
	DefSubIntervalStart string
	NewDefSubPartInterval string
	NewDefSubIntervalStart string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Spare1 string
	Spare2 string
	Spare3 string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartType:"part_type",  
		SchemaVersion:"schema_version",  
		PartNum:"part_num",  
		PartSpace:"part_space",  
		NewPartNum:"new_part_num",  
		NewPartSpace:"new_part_space",  
		SubPartType:"sub_part_type",  
		DefSubPartNum:"def_sub_part_num",  
		PartExpr:"part_expr",  
		SubPartExpr:"sub_part_expr",  
		PartInterval:"part_interval",  
		IntervalStart:"interval_start",  
		NewPartInterval:"new_part_interval",  
		NewIntervalStart:"new_interval_start",  
		DefSubPartInterval:"def_sub_part_interval",  
		DefSubIntervalStart:"def_sub_interval_start",  
		NewDefSubPartInterval:"new_def_sub_part_interval",  
		NewDefSubIntervalStart:"new_def_sub_interval_start",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",             
	}
	
// AllPartInfoHistory [...]		
type	AllPartInfoHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PartType	int64	`gorm:"column:part_type" json:"part_type"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
PartSpace	int64	`gorm:"column:part_space" json:"part_space"`			
NewPartNum	int64	`gorm:"column:new_part_num" json:"new_part_num"`			
NewPartSpace	int64	`gorm:"column:new_part_space" json:"new_part_space"`			
SubPartType	int64	`gorm:"column:sub_part_type" json:"sub_part_type"`			
DefSubPartNum	int64	`gorm:"column:def_sub_part_num" json:"def_sub_part_num"`			
PartExpr	string	`gorm:"column:part_expr" json:"part_expr"`			
SubPartExpr	string	`gorm:"column:sub_part_expr" json:"sub_part_expr"`			
PartInterval	string	`gorm:"column:part_interval" json:"part_interval"`			
IntervalStart	string	`gorm:"column:interval_start" json:"interval_start"`			
NewPartInterval	string	`gorm:"column:new_part_interval" json:"new_part_interval"`			
NewIntervalStart	string	`gorm:"column:new_interval_start" json:"new_interval_start"`			
DefSubPartInterval	string	`gorm:"column:def_sub_part_interval" json:"def_sub_part_interval"`			
DefSubIntervalStart	string	`gorm:"column:def_sub_interval_start" json:"def_sub_interval_start"`			
NewDefSubPartInterval	string	`gorm:"column:new_def_sub_part_interval" json:"new_def_sub_part_interval"`			
NewDefSubIntervalStart	string	`gorm:"column:new_def_sub_interval_start" json:"new_def_sub_interval_start"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllPartInfoHistory) TableName() string {
	return "__all_part_info_history"
}
	

// AllPartInfoHistoryColumns get sql column name.获取数据库列名
var AllPartInfoHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	SchemaVersion string
	IsDeleted string
	PartType string
	PartNum string
	PartSpace string
	NewPartNum string
	NewPartSpace string
	SubPartType string
	DefSubPartNum string
	PartExpr string
	SubPartExpr string
	PartInterval string
	IntervalStart string
	NewPartInterval string
	NewIntervalStart string
	DefSubPartInterval string
	DefSubIntervalStart string
	NewDefSubPartInterval string
	NewDefSubIntervalStart string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Spare1 string
	Spare2 string
	Spare3 string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		PartType:"part_type",  
		PartNum:"part_num",  
		PartSpace:"part_space",  
		NewPartNum:"new_part_num",  
		NewPartSpace:"new_part_space",  
		SubPartType:"sub_part_type",  
		DefSubPartNum:"def_sub_part_num",  
		PartExpr:"part_expr",  
		SubPartExpr:"sub_part_expr",  
		PartInterval:"part_interval",  
		IntervalStart:"interval_start",  
		NewPartInterval:"new_part_interval",  
		NewIntervalStart:"new_interval_start",  
		DefSubPartInterval:"def_sub_part_interval",  
		DefSubIntervalStart:"def_sub_interval_start",  
		NewDefSubPartInterval:"new_def_sub_part_interval",  
		NewDefSubIntervalStart:"new_def_sub_interval_start",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",             
	}
	
// AllPartitionMemberList [...]		
type	AllPartitionMemberList	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllPartitionMemberList) TableName() string {
	return "__all_partition_member_list"
}
	

// AllPartitionMemberListColumns get sql column name.获取数据库列名
var AllPartitionMemberListColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	MemberList string
	SchemaVersion string
	PartitionStatus string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		MemberList:"member_list",  
		SchemaVersion:"schema_version",  
		PartitionStatus:"partition_status",             
	}
	
// AllPrivilege [...]		
type	AllPrivilege	struct {		
Privilege	string	`gorm:"primaryKey;column:Privilege" json:"-"`			
Context	string	`gorm:"column:Context" json:"context"`			
Comment	string	`gorm:"column:Comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllPrivilege) TableName() string {
	return "__all_privilege"
}
	

// AllPrivilegeColumns get sql column name.获取数据库列名
var AllPrivilegeColumns = struct { 
	Privilege string
	Context string
	Comment string    
	}{ 
		Privilege:"Privilege",  
		Context:"Context",  
		Comment:"Comment",             
	}
	
// AllRecyclebin [...]		
type	AllRecyclebin	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjectName	string	`gorm:"primaryKey;column:object_name" json:"-"`			
Type	int64	`gorm:"primaryKey;column:type" json:"-"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
OriginalName	string	`gorm:"column:original_name" json:"original_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRecyclebin) TableName() string {
	return "__all_recyclebin"
}
	

// AllRecyclebinColumns get sql column name.获取数据库列名
var AllRecyclebinColumns = struct { 
	GmtCreate string
	TenantID string
	ObjectName string
	Type string
	DatabaseID string
	TableID string
	TablegroupID string
	OriginalName string    
	}{ 
		GmtCreate:"gmt_create",  
		TenantID:"tenant_id",  
		ObjectName:"object_name",  
		Type:"type",  
		DatabaseID:"database_id",  
		TableID:"table_id",  
		TablegroupID:"tablegroup_id",  
		OriginalName:"original_name",             
	}
	
// AllResMgrConsumerGroup [...]		
type	AllResMgrConsumerGroup	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ConsumerGroup	string	`gorm:"primaryKey;column:consumer_group" json:"-"`			
ConsumerGroupID	int64	`gorm:"column:consumer_group_id" json:"consumer_group_id"`			
Comments	string	`gorm:"column:comments" json:"comments"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllResMgrConsumerGroup) TableName() string {
	return "__all_res_mgr_consumer_group"
}
	

// AllResMgrConsumerGroupColumns get sql column name.获取数据库列名
var AllResMgrConsumerGroupColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ConsumerGroup string
	ConsumerGroupID string
	Comments string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ConsumerGroup:"consumer_group",  
		ConsumerGroupID:"consumer_group_id",  
		Comments:"comments",             
	}
	
// AllResMgrDirective [...]		
type	AllResMgrDirective	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Plan	string	`gorm:"primaryKey;column:plan" json:"-"`			
GroupOrSubplan	string	`gorm:"primaryKey;column:group_or_subplan" json:"-"`			
Comments	string	`gorm:"column:comments" json:"comments"`			
MgmtP1	int64	`gorm:"column:mgmt_p1" json:"mgmt_p1"`			
UtilizationLimit	int64	`gorm:"column:utilization_limit" json:"utilization_limit"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllResMgrDirective) TableName() string {
	return "__all_res_mgr_directive"
}
	

// AllResMgrDirectiveColumns get sql column name.获取数据库列名
var AllResMgrDirectiveColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Plan string
	GroupOrSubplan string
	Comments string
	MgmtP1 string
	UtilizationLimit string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Plan:"plan",  
		GroupOrSubplan:"group_or_subplan",  
		Comments:"comments",  
		MgmtP1:"mgmt_p1",  
		UtilizationLimit:"utilization_limit",             
	}
	
// AllResMgrMappingRule [...]		
type	AllResMgrMappingRule	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Attribute	string	`gorm:"primaryKey;column:attribute" json:"-"`			
Value	[]byte	`gorm:"primaryKey;column:value" json:"-"`			
ConsumerGroup	string	`gorm:"column:consumer_group" json:"consumer_group"`			
Status	int64	`gorm:"column:status" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllResMgrMappingRule) TableName() string {
	return "__all_res_mgr_mapping_rule"
}
	

// AllResMgrMappingRuleColumns get sql column name.获取数据库列名
var AllResMgrMappingRuleColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Attribute string
	Value string
	ConsumerGroup string
	Status string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Attribute:"attribute",  
		Value:"value",  
		ConsumerGroup:"consumer_group",  
		Status:"status",             
	}
	
// AllResMgrPlan [...]		
type	AllResMgrPlan	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Plan	string	`gorm:"primaryKey;column:plan" json:"-"`			
Comments	string	`gorm:"column:comments" json:"comments"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllResMgrPlan) TableName() string {
	return "__all_res_mgr_plan"
}
	

// AllResMgrPlanColumns get sql column name.获取数据库列名
var AllResMgrPlanColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Plan string
	Comments string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Plan:"plan",  
		Comments:"comments",             
	}
	
// AllResourcePool [...]		
type	AllResourcePool	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ResourcePoolID	int64	`gorm:"primaryKey;column:resource_pool_id" json:"-"`			
Name	string	`gorm:"column:name" json:"name"`			
UnitCount	int64	`gorm:"column:unit_count" json:"unit_count"`			
UnitConfigID	int64	`gorm:"column:unit_config_id" json:"unit_config_id"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
IsTenantSysPool	int8	`gorm:"column:is_tenant_sys_pool" json:"is_tenant_sys_pool"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllResourcePool) TableName() string {
	return "__all_resource_pool"
}
	

// AllResourcePoolColumns get sql column name.获取数据库列名
var AllResourcePoolColumns = struct { 
	GmtCreate string
	GmtModified string
	ResourcePoolID string
	Name string
	UnitCount string
	UnitConfigID string
	ZoneList string
	TenantID string
	ReplicaType string
	IsTenantSysPool string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ResourcePoolID:"resource_pool_id",  
		Name:"name",  
		UnitCount:"unit_count",  
		UnitConfigID:"unit_config_id",  
		ZoneList:"zone_list",  
		TenantID:"tenant_id",  
		ReplicaType:"replica_type",  
		IsTenantSysPool:"is_tenant_sys_pool",             
	}
	
// AllRestoreHistory [...]		
type	AllRestoreHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
ExternalJobID	int64	`gorm:"column:external_job_id" json:"external_job_id"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
Status	string	`gorm:"column:status" json:"status"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:completion_time" json:"completion_time"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
RestoreStartTimestamp	time.Time	`gorm:"column:restore_start_timestamp" json:"restore_start_timestamp"`			
RestoreFinishTimestamp	time.Time	`gorm:"column:restore_finish_timestamp" json:"restore_finish_timestamp"`			
RestoreCurrentTimestamp	time.Time	`gorm:"column:restore_current_timestamp" json:"restore_current_timestamp"`			
RestoreDataVersion	int64	`gorm:"column:restore_data_version" json:"restore_data_version"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
RestoreOption	string	`gorm:"column:restore_option" json:"restore_option"`			
Info	string	`gorm:"column:info" json:"info"`			
BackupClusterID	int64	`gorm:"column:backup_cluster_id" json:"backup_cluster_id"`			
BackupClusterName	string	`gorm:"column:backup_cluster_name" json:"backup_cluster_name"`			
BackupTenantID	int64	`gorm:"column:backup_tenant_id" json:"backup_tenant_id"`			
BackupTenantName	string	`gorm:"column:backup_tenant_name" json:"backup_tenant_name"`			
WhiteList	string	`gorm:"column:white_list" json:"white_list"`			
BackupSetList	string	`gorm:"column:backup_set_list" json:"backup_set_list"`			
BackupPieceList	string	`gorm:"column:backup_piece_list" json:"backup_piece_list"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRestoreHistory) TableName() string {
	return "__all_restore_history"
}
	

// AllRestoreHistoryColumns get sql column name.获取数据库列名
var AllRestoreHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	ExternalJobID string
	TenantID string
	TenantName string
	Status string
	StartTime string
	CompletionTime string
	PgCount string
	FinishPgCount string
	PartitionCount string
	FinishPartitionCount string
	MacroBlockCount string
	FinishMacroBlockCount string
	RestoreStartTimestamp string
	RestoreFinishTimestamp string
	RestoreCurrentTimestamp string
	RestoreDataVersion string
	BackupDest string
	RestoreOption string
	Info string
	BackupClusterID string
	BackupClusterName string
	BackupTenantID string
	BackupTenantName string
	WhiteList string
	BackupSetList string
	BackupPieceList string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		ExternalJobID:"external_job_id",  
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		Status:"status",  
		StartTime:"start_time",  
		CompletionTime:"completion_time",  
		PgCount:"pg_count",  
		FinishPgCount:"finish_pg_count",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		MacroBlockCount:"macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		RestoreStartTimestamp:"restore_start_timestamp",  
		RestoreFinishTimestamp:"restore_finish_timestamp",  
		RestoreCurrentTimestamp:"restore_current_timestamp",  
		RestoreDataVersion:"restore_data_version",  
		BackupDest:"backup_dest",  
		RestoreOption:"restore_option",  
		Info:"info",  
		BackupClusterID:"backup_cluster_id",  
		BackupClusterName:"backup_cluster_name",  
		BackupTenantID:"backup_tenant_id",  
		BackupTenantName:"backup_tenant_name",  
		WhiteList:"white_list",  
		BackupSetList:"backup_set_list",  
		BackupPieceList:"backup_piece_list",             
	}
	
// AllRestoreInfo [...]		
type	AllRestoreInfo	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
Value	string	`gorm:"column:value" json:"value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRestoreInfo) TableName() string {
	return "__all_restore_info"
}
	

// AllRestoreInfoColumns get sql column name.获取数据库列名
var AllRestoreInfoColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	Name string
	Value string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		Name:"name",  
		Value:"value",             
	}
	
// AllRestoreJob [...]		
type	AllRestoreJob	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
StartTime	int64	`gorm:"column:start_time" json:"start_time"`			
BackupURI	string	`gorm:"column:backup_uri" json:"backup_uri"`			
BackupEndTime	int64	`gorm:"column:backup_end_time" json:"backup_end_time"`			
RecycleEndTime	int64	`gorm:"column:recycle_end_time" json:"recycle_end_time"`			
Level	int64	`gorm:"column:level" json:"level"`			
Status	int64	`gorm:"column:status" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRestoreJob) TableName() string {
	return "__all_restore_job"
}
	

// AllRestoreJobColumns get sql column name.获取数据库列名
var AllRestoreJobColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	TenantName string
	StartTime string
	BackupURI string
	BackupEndTime string
	RecycleEndTime string
	Level string
	Status string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		TenantName:"tenant_name",  
		StartTime:"start_time",  
		BackupURI:"backup_uri",  
		BackupEndTime:"backup_end_time",  
		RecycleEndTime:"recycle_end_time",  
		Level:"level",  
		Status:"status",             
	}
	
// AllRestoreJobHistory [...]		
type	AllRestoreJobHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
StartTime	int64	`gorm:"column:start_time" json:"start_time"`			
BackupURI	string	`gorm:"column:backup_uri" json:"backup_uri"`			
BackupEndTime	int64	`gorm:"column:backup_end_time" json:"backup_end_time"`			
RecycleEndTime	int64	`gorm:"column:recycle_end_time" json:"recycle_end_time"`			
Level	int64	`gorm:"column:level" json:"level"`			
Status	int64	`gorm:"column:status" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRestoreJobHistory) TableName() string {
	return "__all_restore_job_history"
}
	

// AllRestoreJobHistoryColumns get sql column name.获取数据库列名
var AllRestoreJobHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	TenantName string
	StartTime string
	BackupURI string
	BackupEndTime string
	RecycleEndTime string
	Level string
	Status string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		TenantName:"tenant_name",  
		StartTime:"start_time",  
		BackupURI:"backup_uri",  
		BackupEndTime:"backup_end_time",  
		RecycleEndTime:"recycle_end_time",  
		Level:"level",  
		Status:"status",             
	}
	
// AllRestoreProgress [...]		
type	AllRestoreProgress	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
ExternalJobID	int64	`gorm:"column:external_job_id" json:"external_job_id"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
Status	string	`gorm:"column:status" json:"status"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
CompletionTime	time.Time	`gorm:"column:completion_time" json:"completion_time"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
RestoreStartTimestamp	time.Time	`gorm:"column:restore_start_timestamp" json:"restore_start_timestamp"`			
RestoreFinishTimestamp	time.Time	`gorm:"column:restore_finish_timestamp" json:"restore_finish_timestamp"`			
RestoreCurrentTimestamp	time.Time	`gorm:"column:restore_current_timestamp" json:"restore_current_timestamp"`			
Info	string	`gorm:"column:info" json:"info"`			
BackupClusterID	int64	`gorm:"column:backup_cluster_id" json:"backup_cluster_id"`			
BackupClusterName	string	`gorm:"column:backup_cluster_name" json:"backup_cluster_name"`			
BackupTenantID	int64	`gorm:"column:backup_tenant_id" json:"backup_tenant_id"`			
BackupTenantName	string	`gorm:"column:backup_tenant_name" json:"backup_tenant_name"`			
WhiteList	string	`gorm:"column:white_list" json:"white_list"`			
BackupSetList	string	`gorm:"column:backup_set_list" json:"backup_set_list"`			
BackupPieceList	string	`gorm:"column:backup_piece_list" json:"backup_piece_list"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRestoreProgress) TableName() string {
	return "__all_restore_progress"
}
	

// AllRestoreProgressColumns get sql column name.获取数据库列名
var AllRestoreProgressColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	ExternalJobID string
	TenantID string
	TenantName string
	Status string
	StartTime string
	CompletionTime string
	PgCount string
	FinishPgCount string
	PartitionCount string
	FinishPartitionCount string
	MacroBlockCount string
	FinishMacroBlockCount string
	RestoreStartTimestamp string
	RestoreFinishTimestamp string
	RestoreCurrentTimestamp string
	Info string
	BackupClusterID string
	BackupClusterName string
	BackupTenantID string
	BackupTenantName string
	WhiteList string
	BackupSetList string
	BackupPieceList string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		ExternalJobID:"external_job_id",  
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		Status:"status",  
		StartTime:"start_time",  
		CompletionTime:"completion_time",  
		PgCount:"pg_count",  
		FinishPgCount:"finish_pg_count",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		MacroBlockCount:"macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		RestoreStartTimestamp:"restore_start_timestamp",  
		RestoreFinishTimestamp:"restore_finish_timestamp",  
		RestoreCurrentTimestamp:"restore_current_timestamp",  
		Info:"info",  
		BackupClusterID:"backup_cluster_id",  
		BackupClusterName:"backup_cluster_name",  
		BackupTenantID:"backup_tenant_id",  
		BackupTenantName:"backup_tenant_name",  
		WhiteList:"white_list",  
		BackupSetList:"backup_set_list",  
		BackupPieceList:"backup_piece_list",             
	}
	
// AllRestoreTask [...]		
type	AllRestoreTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
BackupTableID	int64	`gorm:"column:backup_table_id" json:"backup_table_id"`			
IndexMap	string	`gorm:"column:index_map" json:"index_map"`			
StartTime	int64	`gorm:"column:start_time" json:"start_time"`			
Status	int64	`gorm:"column:status" json:"status"`			
JobID	int64	`gorm:"column:job_id" json:"job_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRestoreTask) TableName() string {
	return "__all_restore_task"
}
	

// AllRestoreTaskColumns get sql column name.获取数据库列名
var AllRestoreTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	BackupTableID string
	IndexMap string
	StartTime string
	Status string
	JobID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		BackupTableID:"backup_table_id",  
		IndexMap:"index_map",  
		StartTime:"start_time",  
		Status:"status",  
		JobID:"job_id",             
	}
	
// AllRootTable [...]		
type	AllRootTable	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
IsOriginalLeader	int64	`gorm:"column:is_original_leader" json:"is_original_leader"`			
IsPreviousLeader	int64	`gorm:"column:is_previous_leader" json:"is_previous_leader"`			
CreateTime	int64	`gorm:"column:create_time" json:"create_time"`			
Rebuild	int64	`gorm:"column:rebuild" json:"rebuild"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
Status	string	`gorm:"column:status" json:"status"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
PartitionChecksum	int64	`gorm:"column:partition_checksum" json:"partition_checksum"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
FailList	string	`gorm:"column:fail_list" json:"fail_list"`			
RecoveryTimestamp	int64	`gorm:"column:recovery_timestamp" json:"recovery_timestamp"`			
MemstorePercent	int64	`gorm:"column:memstore_percent" json:"memstore_percent"`			
DataFileID	int64	`gorm:"column:data_file_id" json:"data_file_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRootTable) TableName() string {
	return "__all_root_table"
}
	

// AllRootTableColumns get sql column name.获取数据库列名
var AllRootTableColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	SQLPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	RowCount string
	DataSize string
	DataVersion string
	DataChecksum string
	RowChecksum string
	ColumnChecksum string
	IsOriginalLeader string
	IsPreviousLeader string
	CreateTime string
	Rebuild string
	ReplicaType string
	RequiredSize string
	Status string
	IsRestore string
	PartitionChecksum string
	Quorum string
	FailList string
	RecoveryTimestamp string
	MemstorePercent string
	DataFileID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLPort:"sql_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		DataChecksum:"data_checksum",  
		RowChecksum:"row_checksum",  
		ColumnChecksum:"column_checksum",  
		IsOriginalLeader:"is_original_leader",  
		IsPreviousLeader:"is_previous_leader",  
		CreateTime:"create_time",  
		Rebuild:"rebuild",  
		ReplicaType:"replica_type",  
		RequiredSize:"required_size",  
		Status:"status",  
		IsRestore:"is_restore",  
		PartitionChecksum:"partition_checksum",  
		Quorum:"quorum",  
		FailList:"fail_list",  
		RecoveryTimestamp:"recovery_timestamp",  
		MemstorePercent:"memstore_percent",  
		DataFileID:"data_file_id",             
	}
	
// AllRootserviceEventHistory [...]		
type	AllRootserviceEventHistory	struct {		
GmtCreate	time.Time	`gorm:"primaryKey;column:gmt_create" json:"-"`			
Module	string	`gorm:"column:module" json:"module"`			
Event	string	`gorm:"column:event" json:"event"`			
Name1	string	`gorm:"column:name1" json:"name1"`			
Value1	string	`gorm:"column:value1" json:"value1"`			
Name2	string	`gorm:"column:name2" json:"name2"`			
Value2	string	`gorm:"column:value2" json:"value2"`			
Name3	string	`gorm:"column:name3" json:"name3"`			
Value3	string	`gorm:"column:value3" json:"value3"`			
Name4	string	`gorm:"column:name4" json:"name4"`			
Value4	string	`gorm:"column:value4" json:"value4"`			
Name5	string	`gorm:"column:name5" json:"name5"`			
Value5	string	`gorm:"column:value5" json:"value5"`			
Name6	string	`gorm:"column:name6" json:"name6"`			
Value6	string	`gorm:"column:value6" json:"value6"`			
ExtraInfo	string	`gorm:"column:extra_info" json:"extra_info"`			
RsSvrIP	string	`gorm:"column:rs_svr_ip" json:"rs_svr_ip"`			
RsSvrPort	int64	`gorm:"column:rs_svr_port" json:"rs_svr_port"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRootserviceEventHistory) TableName() string {
	return "__all_rootservice_event_history"
}
	

// AllRootserviceEventHistoryColumns get sql column name.获取数据库列名
var AllRootserviceEventHistoryColumns = struct { 
	GmtCreate string
	Module string
	Event string
	Name1 string
	Value1 string
	Name2 string
	Value2 string
	Name3 string
	Value3 string
	Name4 string
	Value4 string
	Name5 string
	Value5 string
	Name6 string
	Value6 string
	ExtraInfo string
	RsSvrIP string
	RsSvrPort string    
	}{ 
		GmtCreate:"gmt_create",  
		Module:"module",  
		Event:"event",  
		Name1:"name1",  
		Value1:"value1",  
		Name2:"name2",  
		Value2:"value2",  
		Name3:"name3",  
		Value3:"value3",  
		Name4:"name4",  
		Value4:"value4",  
		Name5:"name5",  
		Value5:"value5",  
		Name6:"name6",  
		Value6:"value6",  
		ExtraInfo:"extra_info",  
		RsSvrIP:"rs_svr_ip",  
		RsSvrPort:"rs_svr_port",             
	}
	
// AllRootserviceJob [...]		
type	AllRootserviceJob	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
JobType	string	`gorm:"column:job_type" json:"job_type"`			
JobStatus	string	`gorm:"column:job_status" json:"job_status"`			
ReturnCode	int64	`gorm:"column:return_code" json:"return_code"`			
Progress	int64	`gorm:"column:progress" json:"progress"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
RsSvrIP	string	`gorm:"column:rs_svr_ip" json:"rs_svr_ip"`			
RsSvrPort	int64	`gorm:"column:rs_svr_port" json:"rs_svr_port"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
ExtraInfo	string	`gorm:"column:extra_info" json:"extra_info"`			
ResourcePoolID	int64	`gorm:"column:resource_pool_id" json:"resource_pool_id"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
TablegroupName	string	`gorm:"column:tablegroup_name" json:"tablegroup_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRootserviceJob) TableName() string {
	return "__all_rootservice_job"
}
	

// AllRootserviceJobColumns get sql column name.获取数据库列名
var AllRootserviceJobColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	JobType string
	JobStatus string
	ReturnCode string
	Progress string
	TenantID string
	TenantName string
	DatabaseID string
	DatabaseName string
	TableID string
	TableName string
	PartitionID string
	SvrIP string
	SvrPort string
	UnitID string
	RsSvrIP string
	RsSvrPort string
	SQLText string
	ExtraInfo string
	ResourcePoolID string
	TablegroupID string
	TablegroupName string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		JobType:"job_type",  
		JobStatus:"job_status",  
		ReturnCode:"return_code",  
		Progress:"progress",  
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		DatabaseID:"database_id",  
		DatabaseName:"database_name",  
		TableID:"table_id",  
		TableName:"table_name",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		UnitID:"unit_id",  
		RsSvrIP:"rs_svr_ip",  
		RsSvrPort:"rs_svr_port",  
		SQLText:"sql_text",  
		ExtraInfo:"extra_info",  
		ResourcePoolID:"resource_pool_id",  
		TablegroupID:"tablegroup_id",  
		TablegroupName:"tablegroup_name",             
	}
	
// AllRoutine [...]		
type	AllRoutine	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoutineID	int64	`gorm:"primaryKey;column:routine_id" json:"-"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
RoutineName	string	`gorm:"column:routine_name" json:"routine_name"`			
Overload	int64	`gorm:"column:overload" json:"overload"`			
SubprogramID	int64	`gorm:"column:subprogram_id" json:"subprogram_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
RoutineType	int64	`gorm:"column:routine_type" json:"routine_type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
PrivUser	string	`gorm:"column:priv_user" json:"priv_user"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
RoutineBody	string	`gorm:"column:routine_body" json:"routine_body"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRoutine) TableName() string {
	return "__all_routine"
}
	

// AllRoutineColumns get sql column name.获取数据库列名
var AllRoutineColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	RoutineID string
	DatabaseID string
	PackageID string
	RoutineName string
	Overload string
	SubprogramID string
	SchemaVersion string
	RoutineType string
	Flag string
	OwnerID string
	PrivUser string
	CompFlag string
	ExecEnv string
	RoutineBody string
	Comment string
	RouteSQL string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		RoutineID:"routine_id",  
		DatabaseID:"database_id",  
		PackageID:"package_id",  
		RoutineName:"routine_name",  
		Overload:"overload",  
		SubprogramID:"subprogram_id",  
		SchemaVersion:"schema_version",  
		RoutineType:"routine_type",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		PrivUser:"priv_user",  
		CompFlag:"comp_flag",  
		ExecEnv:"exec_env",  
		RoutineBody:"routine_body",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllRoutineHistory [...]		
type	AllRoutineHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoutineID	int64	`gorm:"primaryKey;column:routine_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
RoutineName	string	`gorm:"column:routine_name" json:"routine_name"`			
Overload	int64	`gorm:"column:overload" json:"overload"`			
SubprogramID	int64	`gorm:"column:subprogram_id" json:"subprogram_id"`			
RoutineType	int64	`gorm:"column:routine_type" json:"routine_type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
PrivUser	string	`gorm:"column:priv_user" json:"priv_user"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
RoutineBody	string	`gorm:"column:routine_body" json:"routine_body"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRoutineHistory) TableName() string {
	return "__all_routine_history"
}
	

// AllRoutineHistoryColumns get sql column name.获取数据库列名
var AllRoutineHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	RoutineID string
	SchemaVersion string
	IsDeleted string
	DatabaseID string
	PackageID string
	RoutineName string
	Overload string
	SubprogramID string
	RoutineType string
	Flag string
	OwnerID string
	PrivUser string
	CompFlag string
	ExecEnv string
	RoutineBody string
	Comment string
	RouteSQL string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		RoutineID:"routine_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		PackageID:"package_id",  
		RoutineName:"routine_name",  
		Overload:"overload",  
		SubprogramID:"subprogram_id",  
		RoutineType:"routine_type",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		PrivUser:"priv_user",  
		CompFlag:"comp_flag",  
		ExecEnv:"exec_env",  
		RoutineBody:"routine_body",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllRoutineParam [...]		
type	AllRoutineParam	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoutineID	int64	`gorm:"primaryKey;column:routine_id" json:"-"`			
Sequence	int64	`gorm:"primaryKey;column:sequence" json:"-"`			
SubprogramID	int64	`gorm:"column:subprogram_id" json:"subprogram_id"`			
ParamPosition	int64	`gorm:"column:param_position" json:"param_position"`			
ParamLevel	int64	`gorm:"column:param_level" json:"param_level"`			
ParamName	string	`gorm:"column:param_name" json:"param_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ParamType	int64	`gorm:"column:param_type" json:"param_type"`			
ParamLength	int64	`gorm:"column:param_length" json:"param_length"`			
ParamPrecision	int64	`gorm:"column:param_precision" json:"param_precision"`			
ParamScale	int64	`gorm:"column:param_scale" json:"param_scale"`			
ParamZeroFill	int64	`gorm:"column:param_zero_fill" json:"param_zero_fill"`			
ParamCharset	int64	`gorm:"column:param_charset" json:"param_charset"`			
ParamCollType	int64	`gorm:"column:param_coll_type" json:"param_coll_type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
DefaultValue	string	`gorm:"column:default_value" json:"default_value"`			
TypeOwner	int64	`gorm:"column:type_owner" json:"type_owner"`			
TypeName	string	`gorm:"column:type_name" json:"type_name"`			
TypeSubname	string	`gorm:"column:type_subname" json:"type_subname"`			
ExtendedTypeInfo	[]byte	`gorm:"column:extended_type_info" json:"extended_type_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRoutineParam) TableName() string {
	return "__all_routine_param"
}
	

// AllRoutineParamColumns get sql column name.获取数据库列名
var AllRoutineParamColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	RoutineID string
	Sequence string
	SubprogramID string
	ParamPosition string
	ParamLevel string
	ParamName string
	SchemaVersion string
	ParamType string
	ParamLength string
	ParamPrecision string
	ParamScale string
	ParamZeroFill string
	ParamCharset string
	ParamCollType string
	Flag string
	DefaultValue string
	TypeOwner string
	TypeName string
	TypeSubname string
	ExtendedTypeInfo string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		RoutineID:"routine_id",  
		Sequence:"sequence",  
		SubprogramID:"subprogram_id",  
		ParamPosition:"param_position",  
		ParamLevel:"param_level",  
		ParamName:"param_name",  
		SchemaVersion:"schema_version",  
		ParamType:"param_type",  
		ParamLength:"param_length",  
		ParamPrecision:"param_precision",  
		ParamScale:"param_scale",  
		ParamZeroFill:"param_zero_fill",  
		ParamCharset:"param_charset",  
		ParamCollType:"param_coll_type",  
		Flag:"flag",  
		DefaultValue:"default_value",  
		TypeOwner:"type_owner",  
		TypeName:"type_name",  
		TypeSubname:"type_subname",  
		ExtendedTypeInfo:"extended_type_info",             
	}
	
// AllRoutineParamHistory [...]		
type	AllRoutineParamHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoutineID	int64	`gorm:"primaryKey;column:routine_id" json:"-"`			
Sequence	int64	`gorm:"primaryKey;column:sequence" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
SubprogramID	int64	`gorm:"column:subprogram_id" json:"subprogram_id"`			
ParamPosition	int64	`gorm:"column:param_position" json:"param_position"`			
ParamLevel	int64	`gorm:"column:param_level" json:"param_level"`			
ParamName	string	`gorm:"column:param_name" json:"param_name"`			
ParamType	int64	`gorm:"column:param_type" json:"param_type"`			
ParamLength	int64	`gorm:"column:param_length" json:"param_length"`			
ParamPrecision	int64	`gorm:"column:param_precision" json:"param_precision"`			
ParamScale	int64	`gorm:"column:param_scale" json:"param_scale"`			
ParamZeroFill	int64	`gorm:"column:param_zero_fill" json:"param_zero_fill"`			
ParamCharset	int64	`gorm:"column:param_charset" json:"param_charset"`			
ParamCollType	int64	`gorm:"column:param_coll_type" json:"param_coll_type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
DefaultValue	string	`gorm:"column:default_value" json:"default_value"`			
TypeOwner	int64	`gorm:"column:type_owner" json:"type_owner"`			
TypeName	string	`gorm:"column:type_name" json:"type_name"`			
TypeSubname	string	`gorm:"column:type_subname" json:"type_subname"`			
ExtendedTypeInfo	[]byte	`gorm:"column:extended_type_info" json:"extended_type_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllRoutineParamHistory) TableName() string {
	return "__all_routine_param_history"
}
	

// AllRoutineParamHistoryColumns get sql column name.获取数据库列名
var AllRoutineParamHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	RoutineID string
	Sequence string
	SchemaVersion string
	IsDeleted string
	SubprogramID string
	ParamPosition string
	ParamLevel string
	ParamName string
	ParamType string
	ParamLength string
	ParamPrecision string
	ParamScale string
	ParamZeroFill string
	ParamCharset string
	ParamCollType string
	Flag string
	DefaultValue string
	TypeOwner string
	TypeName string
	TypeSubname string
	ExtendedTypeInfo string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		RoutineID:"routine_id",  
		Sequence:"sequence",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		SubprogramID:"subprogram_id",  
		ParamPosition:"param_position",  
		ParamLevel:"param_level",  
		ParamName:"param_name",  
		ParamType:"param_type",  
		ParamLength:"param_length",  
		ParamPrecision:"param_precision",  
		ParamScale:"param_scale",  
		ParamZeroFill:"param_zero_fill",  
		ParamCharset:"param_charset",  
		ParamCollType:"param_coll_type",  
		Flag:"flag",  
		DefaultValue:"default_value",  
		TypeOwner:"type_owner",  
		TypeName:"type_name",  
		TypeSubname:"type_subname",  
		ExtendedTypeInfo:"extended_type_info",             
	}
	
// AllSeedParameter [...]		
type	AllSeedParameter	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
SvrType	string	`gorm:"primaryKey;column:svr_type" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
DataType	string	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
Section	string	`gorm:"column:section" json:"section"`			
Scope	string	`gorm:"column:scope" json:"scope"`			
Source	string	`gorm:"column:source" json:"source"`			
EditLevel	string	`gorm:"column:edit_level" json:"edit_level"`			
ConfigVersion	int64	`gorm:"column:config_version" json:"config_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSeedParameter) TableName() string {
	return "__all_seed_parameter"
}
	

// AllSeedParameterColumns get sql column name.获取数据库列名
var AllSeedParameterColumns = struct { 
	GmtCreate string
	GmtModified string
	Zone string
	SvrType string
	SvrIP string
	SvrPort string
	Name string
	DataType string
	Value string
	Info string
	Section string
	Scope string
	Source string
	EditLevel string
	ConfigVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Zone:"zone",  
		SvrType:"svr_type",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Name:"name",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",  
		Section:"section",  
		Scope:"scope",  
		Source:"source",  
		EditLevel:"edit_level",  
		ConfigVersion:"config_version",             
	}
	
// AllSequence [...]		
type	AllSequence	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SequenceKey	int64	`gorm:"primaryKey;column:sequence_key" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
SequenceName	string	`gorm:"column:sequence_name" json:"sequence_name"`			
SequenceValue	uint64	`gorm:"column:sequence_value" json:"sequence_value"`			
SyncValue	uint64	`gorm:"column:sync_value" json:"sync_value"`			
Migrated	int64	`gorm:"column:migrated" json:"migrated"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSequence) TableName() string {
	return "__all_sequence"
}
	

// AllSequenceColumns get sql column name.获取数据库列名
var AllSequenceColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	SequenceKey string
	ColumnID string
	SequenceName string
	SequenceValue string
	SyncValue string
	Migrated string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		SequenceKey:"sequence_key",  
		ColumnID:"column_id",  
		SequenceName:"sequence_name",  
		SequenceValue:"sequence_value",  
		SyncValue:"sync_value",  
		Migrated:"migrated",             
	}
	
// AllSequenceObject [...]		
type	AllSequenceObject	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SequenceID	int64	`gorm:"primaryKey;column:sequence_id" json:"-"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SequenceName	string	`gorm:"column:sequence_name" json:"sequence_name"`			
MinValue	float64	`gorm:"column:min_value" json:"min_value"`			
MaxValue	float64	`gorm:"column:max_value" json:"max_value"`			
IncrementBy	float64	`gorm:"column:increment_by" json:"increment_by"`			
StartWith	float64	`gorm:"column:start_with" json:"start_with"`			
CacheSize	float64	`gorm:"column:cache_size" json:"cache_size"`			
OrderFlag	int8	`gorm:"column:order_flag" json:"order_flag"`			
CycleFlag	int8	`gorm:"column:cycle_flag" json:"cycle_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSequenceObject) TableName() string {
	return "__all_sequence_object"
}
	

// AllSequenceObjectColumns get sql column name.获取数据库列名
var AllSequenceObjectColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	SequenceID string
	SchemaVersion string
	DatabaseID string
	SequenceName string
	MinValue string
	MaxValue string
	IncrementBy string
	StartWith string
	CacheSize string
	OrderFlag string
	CycleFlag string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		SequenceID:"sequence_id",  
		SchemaVersion:"schema_version",  
		DatabaseID:"database_id",  
		SequenceName:"sequence_name",  
		MinValue:"min_value",  
		MaxValue:"max_value",  
		IncrementBy:"increment_by",  
		StartWith:"start_with",  
		CacheSize:"cache_size",  
		OrderFlag:"order_flag",  
		CycleFlag:"cycle_flag",             
	}
	
// AllSequenceObjectHistory [...]		
type	AllSequenceObjectHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SequenceID	int64	`gorm:"primaryKey;column:sequence_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SequenceName	string	`gorm:"column:sequence_name" json:"sequence_name"`			
MinValue	float64	`gorm:"column:min_value" json:"min_value"`			
MaxValue	float64	`gorm:"column:max_value" json:"max_value"`			
IncrementBy	float64	`gorm:"column:increment_by" json:"increment_by"`			
StartWith	float64	`gorm:"column:start_with" json:"start_with"`			
CacheSize	float64	`gorm:"column:cache_size" json:"cache_size"`			
OrderFlag	int8	`gorm:"column:order_flag" json:"order_flag"`			
CycleFlag	int8	`gorm:"column:cycle_flag" json:"cycle_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSequenceObjectHistory) TableName() string {
	return "__all_sequence_object_history"
}
	

// AllSequenceObjectHistoryColumns get sql column name.获取数据库列名
var AllSequenceObjectHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	SequenceID string
	SchemaVersion string
	IsDeleted string
	DatabaseID string
	SequenceName string
	MinValue string
	MaxValue string
	IncrementBy string
	StartWith string
	CacheSize string
	OrderFlag string
	CycleFlag string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		SequenceID:"sequence_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		SequenceName:"sequence_name",  
		MinValue:"min_value",  
		MaxValue:"max_value",  
		IncrementBy:"increment_by",  
		StartWith:"start_with",  
		CacheSize:"cache_size",  
		OrderFlag:"order_flag",  
		CycleFlag:"cycle_flag",             
	}
	
// AllSequenceV2 [...]		
type	AllSequenceV2	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SequenceKey	int64	`gorm:"primaryKey;column:sequence_key" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SequenceName	string	`gorm:"column:sequence_name" json:"sequence_name"`			
SequenceValue	uint64	`gorm:"column:sequence_value" json:"sequence_value"`			
SyncValue	uint64	`gorm:"column:sync_value" json:"sync_value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSequenceV2) TableName() string {
	return "__all_sequence_v2"
}
	

// AllSequenceV2Columns get sql column name.获取数据库列名
var AllSequenceV2Columns = struct { 
	GmtCreate string
	GmtModified string
	SequenceKey string
	ColumnID string
	TenantID string
	SequenceName string
	SequenceValue string
	SyncValue string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SequenceKey:"sequence_key",  
		ColumnID:"column_id",  
		TenantID:"tenant_id",  
		SequenceName:"sequence_name",  
		SequenceValue:"sequence_value",  
		SyncValue:"sync_value",             
	}
	
// AllSequenceValue [...]		
type	AllSequenceValue	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SequenceID	int64	`gorm:"primaryKey;column:sequence_id" json:"-"`			
NextValue	float64	`gorm:"column:next_value" json:"next_value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSequenceValue) TableName() string {
	return "__all_sequence_value"
}
	

// AllSequenceValueColumns get sql column name.获取数据库列名
var AllSequenceValueColumns = struct { 
	GmtCreate string
	GmtModified string
	SequenceID string
	NextValue string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SequenceID:"sequence_id",  
		NextValue:"next_value",             
	}
	
// AllServer [...]		
type	AllServer	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
ID	int64	`gorm:"column:id" json:"id"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
InnerPort	int64	`gorm:"column:inner_port" json:"inner_port"`			
WithRootserver	int64	`gorm:"column:with_rootserver" json:"with_rootserver"`			
Status	string	`gorm:"column:status" json:"status"`			
BlockMigrateInTime	int64	`gorm:"column:block_migrate_in_time" json:"block_migrate_in_time"`			
BuildVersion	string	`gorm:"column:build_version" json:"build_version"`			
StopTime	int64	`gorm:"column:stop_time" json:"stop_time"`			
StartServiceTime	int64	`gorm:"column:start_service_time" json:"start_service_time"`			
FirstSessid	int64	`gorm:"column:first_sessid" json:"first_sessid"`			
WithPartition	int64	`gorm:"column:with_partition" json:"with_partition"`			
LastOfflineTime	int64	`gorm:"column:last_offline_time" json:"last_offline_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllServer) TableName() string {
	return "__all_server"
}
	

// AllServerColumns get sql column name.获取数据库列名
var AllServerColumns = struct { 
	GmtCreate string
	GmtModified string
	SvrIP string
	SvrPort string
	ID string
	Zone string
	InnerPort string
	WithRootserver string
	Status string
	BlockMigrateInTime string
	BuildVersion string
	StopTime string
	StartServiceTime string
	FirstSessid string
	WithPartition string
	LastOfflineTime string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ID:"id",  
		Zone:"zone",  
		InnerPort:"inner_port",  
		WithRootserver:"with_rootserver",  
		Status:"status",  
		BlockMigrateInTime:"block_migrate_in_time",  
		BuildVersion:"build_version",  
		StopTime:"stop_time",  
		StartServiceTime:"start_service_time",  
		FirstSessid:"first_sessid",  
		WithPartition:"with_partition",  
		LastOfflineTime:"last_offline_time",             
	}
	
// AllServerEventHistory [...]		
type	AllServerEventHistory	struct {		
GmtCreate	time.Time	`gorm:"primaryKey;column:gmt_create" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Module	string	`gorm:"column:module" json:"module"`			
Event	string	`gorm:"column:event" json:"event"`			
Name1	string	`gorm:"column:name1" json:"name1"`			
Value1	string	`gorm:"column:value1" json:"value1"`			
Name2	string	`gorm:"column:name2" json:"name2"`			
Value2	string	`gorm:"column:value2" json:"value2"`			
Name3	string	`gorm:"column:name3" json:"name3"`			
Value3	string	`gorm:"column:value3" json:"value3"`			
Name4	string	`gorm:"column:name4" json:"name4"`			
Value4	string	`gorm:"column:value4" json:"value4"`			
Name5	string	`gorm:"column:name5" json:"name5"`			
Value5	string	`gorm:"column:value5" json:"value5"`			
Name6	string	`gorm:"column:name6" json:"name6"`			
Value6	string	`gorm:"column:value6" json:"value6"`			
ExtraInfo	string	`gorm:"column:extra_info" json:"extra_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllServerEventHistory) TableName() string {
	return "__all_server_event_history"
}
	

// AllServerEventHistoryColumns get sql column name.获取数据库列名
var AllServerEventHistoryColumns = struct { 
	GmtCreate string
	SvrIP string
	SvrPort string
	Module string
	Event string
	Name1 string
	Value1 string
	Name2 string
	Value2 string
	Name3 string
	Value3 string
	Name4 string
	Value4 string
	Name5 string
	Value5 string
	Name6 string
	Value6 string
	ExtraInfo string    
	}{ 
		GmtCreate:"gmt_create",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Module:"module",  
		Event:"event",  
		Name1:"name1",  
		Value1:"value1",  
		Name2:"name2",  
		Value2:"value2",  
		Name3:"name3",  
		Value3:"value3",  
		Name4:"name4",  
		Value4:"value4",  
		Name5:"name5",  
		Value5:"value5",  
		Name6:"name6",  
		Value6:"value6",  
		ExtraInfo:"extra_info",             
	}
	
// AllServerRecoveryStatus [...]		
type	AllServerRecoveryStatus	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
RescueSvrIP	string	`gorm:"column:rescue_svr_ip" json:"rescue_svr_ip"`			
RescueSvrPort	int64	`gorm:"column:rescue_svr_port" json:"rescue_svr_port"`			
RescueProgress	int64	`gorm:"column:rescue_progress" json:"rescue_progress"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllServerRecoveryStatus) TableName() string {
	return "__all_server_recovery_status"
}
	

// AllServerRecoveryStatusColumns get sql column name.获取数据库列名
var AllServerRecoveryStatusColumns = struct { 
	GmtCreate string
	GmtModified string
	SvrIP string
	SvrPort string
	RescueSvrIP string
	RescueSvrPort string
	RescueProgress string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		RescueSvrIP:"rescue_svr_ip",  
		RescueSvrPort:"rescue_svr_port",  
		RescueProgress:"rescue_progress",             
	}
	
// AllSQLExecuteTask [...]		
type	AllSQLExecuteTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
ExecutionID	int64	`gorm:"primaryKey;column:execution_id" json:"-"`			
SQLJobID	int64	`gorm:"primaryKey;column:sql_job_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
SliceCount	int64	`gorm:"column:slice_count" json:"slice_count"`			
TaskStat	string	`gorm:"column:task_stat" json:"task_stat"`			
TaskResult	int64	`gorm:"column:task_result" json:"task_result"`			
TaskInfo	string	`gorm:"column:task_info" json:"task_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSQLExecuteTask) TableName() string {
	return "__all_sql_execute_task"
}
	

// AllSQLExecuteTaskColumns get sql column name.获取数据库列名
var AllSQLExecuteTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	JobID string
	ExecutionID string
	SQLJobID string
	TaskID string
	SvrIP string
	SvrPort string
	SliceCount string
	TaskStat string
	TaskResult string
	TaskInfo string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		JobID:"job_id",  
		ExecutionID:"execution_id",  
		SQLJobID:"sql_job_id",  
		TaskID:"task_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SliceCount:"slice_count",  
		TaskStat:"task_stat",  
		TaskResult:"task_result",  
		TaskInfo:"task_info",             
	}
	
// AllSstableChecksum [...]		
type	AllSstableChecksum	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DataTableID	int64	`gorm:"primaryKey;column:data_table_id" json:"-"`			
SstableID	int64	`gorm:"primaryKey;column:sstable_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SstableType	int64	`gorm:"primaryKey;column:sstable_type" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSstableChecksum) TableName() string {
	return "__all_sstable_checksum"
}
	

// AllSstableChecksumColumns get sql column name.获取数据库列名
var AllSstableChecksumColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DataTableID string
	SstableID string
	PartitionID string
	SstableType string
	SvrIP string
	SvrPort string
	RowChecksum string
	DataChecksum string
	RowCount string
	SnapshotVersion string
	ReplicaType string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DataTableID:"data_table_id",  
		SstableID:"sstable_id",  
		PartitionID:"partition_id",  
		SstableType:"sstable_type",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		RowChecksum:"row_checksum",  
		DataChecksum:"data_checksum",  
		RowCount:"row_count",  
		SnapshotVersion:"snapshot_version",  
		ReplicaType:"replica_type",             
	}
	
// AllSstableColumnChecksum [...]		
type	AllSstableColumnChecksum	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DataTableID	int64	`gorm:"primaryKey;column:data_table_id" json:"-"`			
IndexID	int64	`gorm:"primaryKey;column:index_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SstableType	int64	`gorm:"primaryKey;column:sstable_type" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
ColumnChecksum	int64	`gorm:"column:column_checksum" json:"column_checksum"`			
ChecksumMethod	int64	`gorm:"column:checksum_method" json:"checksum_method"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
MajorVersion	int64	`gorm:"column:major_version" json:"major_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSstableColumnChecksum) TableName() string {
	return "__all_sstable_column_checksum"
}
	

// AllSstableColumnChecksumColumns get sql column name.获取数据库列名
var AllSstableColumnChecksumColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DataTableID string
	IndexID string
	PartitionID string
	SstableType string
	ColumnID string
	SvrIP string
	SvrPort string
	ColumnChecksum string
	ChecksumMethod string
	SnapshotVersion string
	ReplicaType string
	MajorVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DataTableID:"data_table_id",  
		IndexID:"index_id",  
		PartitionID:"partition_id",  
		SstableType:"sstable_type",  
		ColumnID:"column_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ColumnChecksum:"column_checksum",  
		ChecksumMethod:"checksum_method",  
		SnapshotVersion:"snapshot_version",  
		ReplicaType:"replica_type",  
		MajorVersion:"major_version",             
	}
	
// AllSubPart [...]		
type	AllSubPart	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
SubPartID	int64	`gorm:"primaryKey;column:sub_part_id" json:"-"`			
SubPartName	string	`gorm:"column:sub_part_name" json:"sub_part_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
SubPartIDx	int64	`gorm:"column:sub_part_idx" json:"sub_part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgSubPartID	int64	`gorm:"column:mapping_pg_sub_part_id" json:"mapping_pg_sub_part_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSubPart) TableName() string {
	return "__all_sub_part"
}
	

// AllSubPartColumns get sql column name.获取数据库列名
var AllSubPartColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartID string
	SubPartID string
	SubPartName string
	SchemaVersion string
	HighBoundVal string
	BHighBoundVal string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Status string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	TablespaceID string
	SubPartIDx string
	SourcePartitionID string
	MappingPgSubPartID string
	DropSchemaVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartID:"part_id",  
		SubPartID:"sub_part_id",  
		SubPartName:"sub_part_name",  
		SchemaVersion:"schema_version",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Status:"status",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		TablespaceID:"tablespace_id",  
		SubPartIDx:"sub_part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgSubPartID:"mapping_pg_sub_part_id",  
		DropSchemaVersion:"drop_schema_version",             
	}
	
// AllSubPartHistory [...]		
type	AllSubPartHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
SubPartID	int64	`gorm:"primaryKey;column:sub_part_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
SubPartName	string	`gorm:"column:sub_part_name" json:"sub_part_name"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
SubPartIDx	int64	`gorm:"column:sub_part_idx" json:"sub_part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgSubPartID	int64	`gorm:"column:mapping_pg_sub_part_id" json:"mapping_pg_sub_part_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSubPartHistory) TableName() string {
	return "__all_sub_part_history"
}
	

// AllSubPartHistoryColumns get sql column name.获取数据库列名
var AllSubPartHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartID string
	SubPartID string
	SchemaVersion string
	IsDeleted string
	SubPartName string
	HighBoundVal string
	BHighBoundVal string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Status string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	TablespaceID string
	SubPartIDx string
	SourcePartitionID string
	MappingPgSubPartID string
	DropSchemaVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartID:"part_id",  
		SubPartID:"sub_part_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		SubPartName:"sub_part_name",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Status:"status",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		TablespaceID:"tablespace_id",  
		SubPartIDx:"sub_part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgSubPartID:"mapping_pg_sub_part_id",  
		DropSchemaVersion:"drop_schema_version",             
	}
	
// AllSynonym [...]		
type	AllSynonym	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SynonymID	int64	`gorm:"primaryKey;column:synonym_id" json:"-"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
SynonymName	string	`gorm:"column:synonym_name" json:"synonym_name"`			
ObjectName	string	`gorm:"column:object_name" json:"object_name"`			
ObjectDatabaseID	int64	`gorm:"column:object_database_id" json:"object_database_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSynonym) TableName() string {
	return "__all_synonym"
}
	

// AllSynonymColumns get sql column name.获取数据库列名
var AllSynonymColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	SynonymID string
	DatabaseID string
	SchemaVersion string
	SynonymName string
	ObjectName string
	ObjectDatabaseID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		SynonymID:"synonym_id",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		SynonymName:"synonym_name",  
		ObjectName:"object_name",  
		ObjectDatabaseID:"object_database_id",             
	}
	
// AllSynonymHistory [...]		
type	AllSynonymHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SynonymID	int64	`gorm:"primaryKey;column:synonym_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SynonymName	string	`gorm:"column:synonym_name" json:"synonym_name"`			
ObjectName	string	`gorm:"column:object_name" json:"object_name"`			
ObjectDatabaseID	int64	`gorm:"column:object_database_id" json:"object_database_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSynonymHistory) TableName() string {
	return "__all_synonym_history"
}
	

// AllSynonymHistoryColumns get sql column name.获取数据库列名
var AllSynonymHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	SynonymID string
	SchemaVersion string
	IsDeleted string
	DatabaseID string
	SynonymName string
	ObjectName string
	ObjectDatabaseID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		SynonymID:"synonym_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		SynonymName:"synonym_name",  
		ObjectName:"object_name",  
		ObjectDatabaseID:"object_database_id",             
	}
	
// AllSysParameter [...]		
type	AllSysParameter	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
SvrType	string	`gorm:"primaryKey;column:svr_type" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
DataType	string	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
ValueStrict	string	`gorm:"column:value_strict" json:"value_strict"`			
Info	string	`gorm:"column:info" json:"info"`			
NeedReboot	int64	`gorm:"column:need_reboot" json:"need_reboot"`			
Section	string	`gorm:"column:section" json:"section"`			
VisibleLevel	string	`gorm:"column:visible_level" json:"visible_level"`			
ConfigVersion	int64	`gorm:"column:config_version" json:"config_version"`			
Scope	string	`gorm:"column:scope" json:"scope"`			
Source	string	`gorm:"column:source" json:"source"`			
EditLevel	string	`gorm:"column:edit_level" json:"edit_level"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSysParameter) TableName() string {
	return "__all_sys_parameter"
}
	

// AllSysParameterColumns get sql column name.获取数据库列名
var AllSysParameterColumns = struct { 
	GmtCreate string
	GmtModified string
	Zone string
	SvrType string
	SvrIP string
	SvrPort string
	Name string
	DataType string
	Value string
	ValueStrict string
	Info string
	NeedReboot string
	Section string
	VisibleLevel string
	ConfigVersion string
	Scope string
	Source string
	EditLevel string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Zone:"zone",  
		SvrType:"svr_type",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Name:"name",  
		DataType:"data_type",  
		Value:"value",  
		ValueStrict:"value_strict",  
		Info:"info",  
		NeedReboot:"need_reboot",  
		Section:"section",  
		VisibleLevel:"visible_level",  
		ConfigVersion:"config_version",  
		Scope:"scope",  
		Source:"source",  
		EditLevel:"edit_level",             
	}
	
// AllSysStat [...]		
type	AllSysStat	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSysStat) TableName() string {
	return "__all_sys_stat"
}
	

// AllSysStatColumns get sql column name.获取数据库列名
var AllSysStatColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Zone string
	Name string
	DataType string
	Value string
	Info string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Zone:"zone",  
		Name:"name",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",             
	}
	
// AllSysVariable [...]		
type	AllSysVariable	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
Flags	int64	`gorm:"column:flags" json:"flags"`			
MinVal	string	`gorm:"column:min_val" json:"min_val"`			
MaxVal	string	`gorm:"column:max_val" json:"max_val"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSysVariable) TableName() string {
	return "__all_sys_variable"
}
	

// AllSysVariableColumns get sql column name.获取数据库列名
var AllSysVariableColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Zone string
	Name string
	DataType string
	Value string
	Info string
	Flags string
	MinVal string
	MaxVal string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Zone:"zone",  
		Name:"name",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",  
		Flags:"flags",  
		MinVal:"min_val",  
		MaxVal:"max_val",             
	}
	
// AllSysVariableHistory [...]		
type	AllSysVariableHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
Flags	int64	`gorm:"column:flags" json:"flags"`			
MinVal	string	`gorm:"column:min_val" json:"min_val"`			
MaxVal	string	`gorm:"column:max_val" json:"max_val"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllSysVariableHistory) TableName() string {
	return "__all_sys_variable_history"
}
	

// AllSysVariableHistoryColumns get sql column name.获取数据库列名
var AllSysVariableHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Zone string
	Name string
	SchemaVersion string
	IsDeleted string
	DataType string
	Value string
	Info string
	Flags string
	MinVal string
	MaxVal string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Zone:"zone",  
		Name:"name",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",  
		Flags:"flags",  
		MinVal:"min_val",  
		MaxVal:"max_val",             
	}
	
// AllTable [...]		
type	AllTable	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
LoadType	int64	`gorm:"column:load_type" json:"load_type"`			
DefType	int64	`gorm:"column:def_type" json:"def_type"`			
RowkeyColumnNum	int64	`gorm:"column:rowkey_column_num" json:"rowkey_column_num"`			
IndexColumnNum	int64	`gorm:"column:index_column_num" json:"index_column_num"`			
MaxUsedColumnID	int64	`gorm:"column:max_used_column_id" json:"max_used_column_id"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
AutoincColumnID	int64	`gorm:"column:autoinc_column_id" json:"autoinc_column_id"`			
AutoIncrement	uint64	`gorm:"column:auto_increment" json:"auto_increment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
RowkeySplitPos	int64	`gorm:"column:rowkey_split_pos" json:"rowkey_split_pos"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
ExpireCondition	string	`gorm:"column:expire_condition" json:"expire_condition"`			
IsUseBloomfilter	int64	`gorm:"column:is_use_bloomfilter" json:"is_use_bloomfilter"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
DataTableID	int64	`gorm:"column:data_table_id" json:"data_table_id"`			
IndexStatus	int64	`gorm:"column:index_status" json:"index_status"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
ProgressiveMergeNum	int64	`gorm:"column:progressive_merge_num" json:"progressive_merge_num"`			
IndexType	int64	`gorm:"column:index_type" json:"index_type"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExpr	string	`gorm:"column:part_func_expr" json:"part_func_expr"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExpr	string	`gorm:"column:sub_part_func_expr" json:"sub_part_func_expr"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
CreateMemVersion	int64	`gorm:"column:create_mem_version" json:"create_mem_version"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ViewDefinition	string	`gorm:"column:view_definition" json:"view_definition"`			
ViewCheckOption	int64	`gorm:"column:view_check_option" json:"view_check_option"`			
ViewIsUpdatable	int64	`gorm:"column:view_is_updatable" json:"view_is_updatable"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
IndexUsingType	int64	`gorm:"column:index_using_type" json:"index_using_type"`			
ParserName	string	`gorm:"column:parser_name" json:"parser_name"`			
IndexAttributesSet	int64	`gorm:"column:index_attributes_set" json:"index_attributes_set"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
TabletSize	int64	`gorm:"column:tablet_size" json:"tablet_size"`			
Pctfree	int64	`gorm:"column:pctfree" json:"pctfree"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
PartitionCntWithinPartitionTable	int64	`gorm:"column:partition_cnt_within_partition_table" json:"partition_cnt_within_partition_table"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
MaxUsedConstraintID	int64	`gorm:"column:max_used_constraint_id" json:"max_used_constraint_id"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
PkComment	string	`gorm:"column:pk_comment" json:"pk_comment"`			
SessActiveTime	int64	`gorm:"column:sess_active_time" json:"sess_active_time"`			
RowStoreType	string	`gorm:"column:row_store_type" json:"row_store_type"`			
StoreFormat	string	`gorm:"column:store_format" json:"store_format"`			
DuplicateScope	int64	`gorm:"column:duplicate_scope" json:"duplicate_scope"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
ProgressiveMergeRound	int64	`gorm:"column:progressive_merge_round" json:"progressive_merge_round"`			
StorageFormatVersion	int64	`gorm:"column:storage_format_version" json:"storage_format_version"`			
TableMode	int64	`gorm:"column:table_mode" json:"table_mode"`			
Encryption	string	`gorm:"column:encryption" json:"encryption"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
Dop	int64	`gorm:"column:dop" json:"dop"`			
CharacterSetClient	int64	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	int64	`gorm:"column:collation_connection" json:"collation_connection"`			
AutoPartSize	int64	`gorm:"column:auto_part_size" json:"auto_part_size"`			
AutoPart	int8	`gorm:"column:auto_part" json:"auto_part"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTable) TableName() string {
	return "__all_table"
}
	

// AllTableColumns get sql column name.获取数据库列名
var AllTableColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	TableName string
	DatabaseID string
	TableType string
	LoadType string
	DefType string
	RowkeyColumnNum string
	IndexColumnNum string
	MaxUsedColumnID string
	ReplicaNum string
	AutoincColumnID string
	AutoIncrement string
	ReadOnly string
	RowkeySplitPos string
	CompressFuncName string
	ExpireCondition string
	IsUseBloomfilter string
	Comment string
	BlockSize string
	CollationType string
	DataTableID string
	IndexStatus string
	TablegroupID string
	ProgressiveMergeNum string
	IndexType string
	PartLevel string
	PartFuncType string
	PartFuncExpr string
	PartNum string
	SubPartFuncType string
	SubPartFuncExpr string
	SubPartNum string
	CreateMemVersion string
	SchemaVersion string
	ViewDefinition string
	ViewCheckOption string
	ViewIsUpdatable string
	ZoneList string
	PrimaryZone string
	IndexUsingType string
	ParserName string
	IndexAttributesSet string
	Locality string
	TabletSize string
	Pctfree string
	PreviousLocality string
	MaxUsedPartID string
	PartitionCntWithinPartitionTable string
	PartitionStatus string
	PartitionSchemaVersion string
	MaxUsedConstraintID string
	SessionID string
	PkComment string
	SessActiveTime string
	RowStoreType string
	StoreFormat string
	DuplicateScope string
	Binding string
	ProgressiveMergeRound string
	StorageFormatVersion string
	TableMode string
	Encryption string
	TablespaceID string
	DropSchemaVersion string
	IsSubPartTemplate string
	Dop string
	CharacterSetClient string
	CollationConnection string
	AutoPartSize string
	AutoPart string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		TableName:"table_name",  
		DatabaseID:"database_id",  
		TableType:"table_type",  
		LoadType:"load_type",  
		DefType:"def_type",  
		RowkeyColumnNum:"rowkey_column_num",  
		IndexColumnNum:"index_column_num",  
		MaxUsedColumnID:"max_used_column_id",  
		ReplicaNum:"replica_num",  
		AutoincColumnID:"autoinc_column_id",  
		AutoIncrement:"auto_increment",  
		ReadOnly:"read_only",  
		RowkeySplitPos:"rowkey_split_pos",  
		CompressFuncName:"compress_func_name",  
		ExpireCondition:"expire_condition",  
		IsUseBloomfilter:"is_use_bloomfilter",  
		Comment:"comment",  
		BlockSize:"block_size",  
		CollationType:"collation_type",  
		DataTableID:"data_table_id",  
		IndexStatus:"index_status",  
		TablegroupID:"tablegroup_id",  
		ProgressiveMergeNum:"progressive_merge_num",  
		IndexType:"index_type",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExpr:"part_func_expr",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExpr:"sub_part_func_expr",  
		SubPartNum:"sub_part_num",  
		CreateMemVersion:"create_mem_version",  
		SchemaVersion:"schema_version",  
		ViewDefinition:"view_definition",  
		ViewCheckOption:"view_check_option",  
		ViewIsUpdatable:"view_is_updatable",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		IndexUsingType:"index_using_type",  
		ParserName:"parser_name",  
		IndexAttributesSet:"index_attributes_set",  
		Locality:"locality",  
		TabletSize:"tablet_size",  
		Pctfree:"pctfree",  
		PreviousLocality:"previous_locality",  
		MaxUsedPartID:"max_used_part_id",  
		PartitionCntWithinPartitionTable:"partition_cnt_within_partition_table",  
		PartitionStatus:"partition_status",  
		PartitionSchemaVersion:"partition_schema_version",  
		MaxUsedConstraintID:"max_used_constraint_id",  
		SessionID:"session_id",  
		PkComment:"pk_comment",  
		SessActiveTime:"sess_active_time",  
		RowStoreType:"row_store_type",  
		StoreFormat:"store_format",  
		DuplicateScope:"duplicate_scope",  
		Binding:"binding",  
		ProgressiveMergeRound:"progressive_merge_round",  
		StorageFormatVersion:"storage_format_version",  
		TableMode:"table_mode",  
		Encryption:"encryption",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",  
		Dop:"dop",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",  
		AutoPartSize:"auto_part_size",  
		AutoPart:"auto_part",             
	}
	
// AllTableHistory [...]		
type	AllTableHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
LoadType	int64	`gorm:"column:load_type" json:"load_type"`			
DefType	int64	`gorm:"column:def_type" json:"def_type"`			
RowkeyColumnNum	int64	`gorm:"column:rowkey_column_num" json:"rowkey_column_num"`			
IndexColumnNum	int64	`gorm:"column:index_column_num" json:"index_column_num"`			
MaxUsedColumnID	int64	`gorm:"column:max_used_column_id" json:"max_used_column_id"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
AutoincColumnID	int64	`gorm:"column:autoinc_column_id" json:"autoinc_column_id"`			
AutoIncrement	uint64	`gorm:"column:auto_increment" json:"auto_increment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
RowkeySplitPos	int64	`gorm:"column:rowkey_split_pos" json:"rowkey_split_pos"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
ExpireCondition	string	`gorm:"column:expire_condition" json:"expire_condition"`			
IsUseBloomfilter	int64	`gorm:"column:is_use_bloomfilter" json:"is_use_bloomfilter"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
DataTableID	int64	`gorm:"column:data_table_id" json:"data_table_id"`			
IndexStatus	int64	`gorm:"column:index_status" json:"index_status"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
ProgressiveMergeNum	int64	`gorm:"column:progressive_merge_num" json:"progressive_merge_num"`			
IndexType	int64	`gorm:"column:index_type" json:"index_type"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExpr	string	`gorm:"column:part_func_expr" json:"part_func_expr"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExpr	string	`gorm:"column:sub_part_func_expr" json:"sub_part_func_expr"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
CreateMemVersion	int64	`gorm:"column:create_mem_version" json:"create_mem_version"`			
ViewDefinition	string	`gorm:"column:view_definition" json:"view_definition"`			
ViewCheckOption	int64	`gorm:"column:view_check_option" json:"view_check_option"`			
ViewIsUpdatable	int64	`gorm:"column:view_is_updatable" json:"view_is_updatable"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
IndexUsingType	int64	`gorm:"column:index_using_type" json:"index_using_type"`			
ParserName	string	`gorm:"column:parser_name" json:"parser_name"`			
IndexAttributesSet	int64	`gorm:"column:index_attributes_set" json:"index_attributes_set"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
TabletSize	int64	`gorm:"column:tablet_size" json:"tablet_size"`			
Pctfree	int64	`gorm:"column:pctfree" json:"pctfree"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
PartitionCntWithinPartitionTable	int64	`gorm:"column:partition_cnt_within_partition_table" json:"partition_cnt_within_partition_table"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
MaxUsedConstraintID	int64	`gorm:"column:max_used_constraint_id" json:"max_used_constraint_id"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
PkComment	string	`gorm:"column:pk_comment" json:"pk_comment"`			
SessActiveTime	int64	`gorm:"column:sess_active_time" json:"sess_active_time"`			
RowStoreType	string	`gorm:"column:row_store_type" json:"row_store_type"`			
StoreFormat	string	`gorm:"column:store_format" json:"store_format"`			
DuplicateScope	int64	`gorm:"column:duplicate_scope" json:"duplicate_scope"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
ProgressiveMergeRound	int64	`gorm:"column:progressive_merge_round" json:"progressive_merge_round"`			
StorageFormatVersion	int64	`gorm:"column:storage_format_version" json:"storage_format_version"`			
TableMode	int64	`gorm:"column:table_mode" json:"table_mode"`			
Encryption	string	`gorm:"column:encryption" json:"encryption"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
Dop	int64	`gorm:"column:dop" json:"dop"`			
CharacterSetClient	int64	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	int64	`gorm:"column:collation_connection" json:"collation_connection"`			
AutoPartSize	int64	`gorm:"column:auto_part_size" json:"auto_part_size"`			
AutoPart	int8	`gorm:"column:auto_part" json:"auto_part"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTableHistory) TableName() string {
	return "__all_table_history"
}
	

// AllTableHistoryColumns get sql column name.获取数据库列名
var AllTableHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	SchemaVersion string
	IsDeleted string
	TableName string
	DatabaseID string
	TableType string
	LoadType string
	DefType string
	RowkeyColumnNum string
	IndexColumnNum string
	MaxUsedColumnID string
	ReplicaNum string
	AutoincColumnID string
	AutoIncrement string
	ReadOnly string
	RowkeySplitPos string
	CompressFuncName string
	ExpireCondition string
	IsUseBloomfilter string
	Comment string
	BlockSize string
	CollationType string
	DataTableID string
	IndexStatus string
	TablegroupID string
	ProgressiveMergeNum string
	IndexType string
	PartLevel string
	PartFuncType string
	PartFuncExpr string
	PartNum string
	SubPartFuncType string
	SubPartFuncExpr string
	SubPartNum string
	CreateMemVersion string
	ViewDefinition string
	ViewCheckOption string
	ViewIsUpdatable string
	ZoneList string
	PrimaryZone string
	IndexUsingType string
	ParserName string
	IndexAttributesSet string
	Locality string
	TabletSize string
	Pctfree string
	PreviousLocality string
	MaxUsedPartID string
	PartitionCntWithinPartitionTable string
	PartitionStatus string
	PartitionSchemaVersion string
	MaxUsedConstraintID string
	SessionID string
	PkComment string
	SessActiveTime string
	RowStoreType string
	StoreFormat string
	DuplicateScope string
	Binding string
	ProgressiveMergeRound string
	StorageFormatVersion string
	TableMode string
	Encryption string
	TablespaceID string
	DropSchemaVersion string
	IsSubPartTemplate string
	Dop string
	CharacterSetClient string
	CollationConnection string
	AutoPartSize string
	AutoPart string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		TableName:"table_name",  
		DatabaseID:"database_id",  
		TableType:"table_type",  
		LoadType:"load_type",  
		DefType:"def_type",  
		RowkeyColumnNum:"rowkey_column_num",  
		IndexColumnNum:"index_column_num",  
		MaxUsedColumnID:"max_used_column_id",  
		ReplicaNum:"replica_num",  
		AutoincColumnID:"autoinc_column_id",  
		AutoIncrement:"auto_increment",  
		ReadOnly:"read_only",  
		RowkeySplitPos:"rowkey_split_pos",  
		CompressFuncName:"compress_func_name",  
		ExpireCondition:"expire_condition",  
		IsUseBloomfilter:"is_use_bloomfilter",  
		Comment:"comment",  
		BlockSize:"block_size",  
		CollationType:"collation_type",  
		DataTableID:"data_table_id",  
		IndexStatus:"index_status",  
		TablegroupID:"tablegroup_id",  
		ProgressiveMergeNum:"progressive_merge_num",  
		IndexType:"index_type",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExpr:"part_func_expr",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExpr:"sub_part_func_expr",  
		SubPartNum:"sub_part_num",  
		CreateMemVersion:"create_mem_version",  
		ViewDefinition:"view_definition",  
		ViewCheckOption:"view_check_option",  
		ViewIsUpdatable:"view_is_updatable",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		IndexUsingType:"index_using_type",  
		ParserName:"parser_name",  
		IndexAttributesSet:"index_attributes_set",  
		Locality:"locality",  
		TabletSize:"tablet_size",  
		Pctfree:"pctfree",  
		PreviousLocality:"previous_locality",  
		MaxUsedPartID:"max_used_part_id",  
		PartitionCntWithinPartitionTable:"partition_cnt_within_partition_table",  
		PartitionStatus:"partition_status",  
		PartitionSchemaVersion:"partition_schema_version",  
		MaxUsedConstraintID:"max_used_constraint_id",  
		SessionID:"session_id",  
		PkComment:"pk_comment",  
		SessActiveTime:"sess_active_time",  
		RowStoreType:"row_store_type",  
		StoreFormat:"store_format",  
		DuplicateScope:"duplicate_scope",  
		Binding:"binding",  
		ProgressiveMergeRound:"progressive_merge_round",  
		StorageFormatVersion:"storage_format_version",  
		TableMode:"table_mode",  
		Encryption:"encryption",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",  
		Dop:"dop",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",  
		AutoPartSize:"auto_part_size",  
		AutoPart:"auto_part",             
	}
	
// AllTablePrivilege [...]		
type	AllTablePrivilege	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
TableName	string	`gorm:"primaryKey;column:table_name" json:"-"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTablePrivilege) TableName() string {
	return "__all_table_privilege"
}
	

// AllTablePrivilegeColumns get sql column name.获取数据库列名
var AllTablePrivilegeColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	UserID string
	DatabaseName string
	TableName string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		UserID:"user_id",  
		DatabaseName:"database_name",  
		TableName:"table_name",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",             
	}
	
// AllTablePrivilegeHistory [...]		
type	AllTablePrivilegeHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
TableName	string	`gorm:"primaryKey;column:table_name" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTablePrivilegeHistory) TableName() string {
	return "__all_table_privilege_history"
}
	

// AllTablePrivilegeHistoryColumns get sql column name.获取数据库列名
var AllTablePrivilegeHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	UserID string
	DatabaseName string
	TableName string
	SchemaVersion string
	IsDeleted string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		UserID:"user_id",  
		DatabaseName:"database_name",  
		TableName:"table_name",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",             
	}
	
// AllTableStat [...]		
type	AllTableStat	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
ObjectType	int64	`gorm:"column:object_type" json:"object_type"`			
LastAnalyzed	time.Time	`gorm:"column:last_analyzed" json:"last_analyzed"`			
SstableRowCnt	int64	`gorm:"column:sstable_row_cnt" json:"sstable_row_cnt"`			
SstableAvgRowLen	int64	`gorm:"column:sstable_avg_row_len" json:"sstable_avg_row_len"`			
MacroBlkCnt	int64	`gorm:"column:macro_blk_cnt" json:"macro_blk_cnt"`			
MicroBlkCnt	int64	`gorm:"column:micro_blk_cnt" json:"micro_blk_cnt"`			
MemtableRowCnt	int64	`gorm:"column:memtable_row_cnt" json:"memtable_row_cnt"`			
MemtableAvgRowLen	int64	`gorm:"column:memtable_avg_row_len" json:"memtable_avg_row_len"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTableStat) TableName() string {
	return "__all_table_stat"
}
	

// AllTableStatColumns get sql column name.获取数据库列名
var AllTableStatColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	ObjectType string
	LastAnalyzed string
	SstableRowCnt string
	SstableAvgRowLen string
	MacroBlkCnt string
	MicroBlkCnt string
	MemtableRowCnt string
	MemtableAvgRowLen string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		ObjectType:"object_type",  
		LastAnalyzed:"last_analyzed",  
		SstableRowCnt:"sstable_row_cnt",  
		SstableAvgRowLen:"sstable_avg_row_len",  
		MacroBlkCnt:"macro_blk_cnt",  
		MicroBlkCnt:"micro_blk_cnt",  
		MemtableRowCnt:"memtable_row_cnt",  
		MemtableAvgRowLen:"memtable_avg_row_len",             
	}
	
// AllTableV2 [...]		
type	AllTableV2	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
LoadType	int64	`gorm:"column:load_type" json:"load_type"`			
DefType	int64	`gorm:"column:def_type" json:"def_type"`			
RowkeyColumnNum	int64	`gorm:"column:rowkey_column_num" json:"rowkey_column_num"`			
IndexColumnNum	int64	`gorm:"column:index_column_num" json:"index_column_num"`			
MaxUsedColumnID	int64	`gorm:"column:max_used_column_id" json:"max_used_column_id"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
AutoincColumnID	int64	`gorm:"column:autoinc_column_id" json:"autoinc_column_id"`			
AutoIncrement	uint64	`gorm:"column:auto_increment" json:"auto_increment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
RowkeySplitPos	int64	`gorm:"column:rowkey_split_pos" json:"rowkey_split_pos"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
ExpireCondition	string	`gorm:"column:expire_condition" json:"expire_condition"`			
IsUseBloomfilter	int64	`gorm:"column:is_use_bloomfilter" json:"is_use_bloomfilter"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
DataTableID	int64	`gorm:"column:data_table_id" json:"data_table_id"`			
IndexStatus	int64	`gorm:"column:index_status" json:"index_status"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
ProgressiveMergeNum	int64	`gorm:"column:progressive_merge_num" json:"progressive_merge_num"`			
IndexType	int64	`gorm:"column:index_type" json:"index_type"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExpr	string	`gorm:"column:part_func_expr" json:"part_func_expr"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExpr	string	`gorm:"column:sub_part_func_expr" json:"sub_part_func_expr"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
CreateMemVersion	int64	`gorm:"column:create_mem_version" json:"create_mem_version"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ViewDefinition	string	`gorm:"column:view_definition" json:"view_definition"`			
ViewCheckOption	int64	`gorm:"column:view_check_option" json:"view_check_option"`			
ViewIsUpdatable	int64	`gorm:"column:view_is_updatable" json:"view_is_updatable"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
IndexUsingType	int64	`gorm:"column:index_using_type" json:"index_using_type"`			
ParserName	string	`gorm:"column:parser_name" json:"parser_name"`			
IndexAttributesSet	int64	`gorm:"column:index_attributes_set" json:"index_attributes_set"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
TabletSize	int64	`gorm:"column:tablet_size" json:"tablet_size"`			
Pctfree	int64	`gorm:"column:pctfree" json:"pctfree"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
PartitionCntWithinPartitionTable	int64	`gorm:"column:partition_cnt_within_partition_table" json:"partition_cnt_within_partition_table"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
MaxUsedConstraintID	int64	`gorm:"column:max_used_constraint_id" json:"max_used_constraint_id"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
PkComment	string	`gorm:"column:pk_comment" json:"pk_comment"`			
SessActiveTime	int64	`gorm:"column:sess_active_time" json:"sess_active_time"`			
RowStoreType	string	`gorm:"column:row_store_type" json:"row_store_type"`			
StoreFormat	string	`gorm:"column:store_format" json:"store_format"`			
DuplicateScope	int64	`gorm:"column:duplicate_scope" json:"duplicate_scope"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
ProgressiveMergeRound	int64	`gorm:"column:progressive_merge_round" json:"progressive_merge_round"`			
StorageFormatVersion	int64	`gorm:"column:storage_format_version" json:"storage_format_version"`			
TableMode	int64	`gorm:"column:table_mode" json:"table_mode"`			
Encryption	string	`gorm:"column:encryption" json:"encryption"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
Dop	int64	`gorm:"column:dop" json:"dop"`			
CharacterSetClient	int64	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	int64	`gorm:"column:collation_connection" json:"collation_connection"`			
AutoPartSize	int64	`gorm:"column:auto_part_size" json:"auto_part_size"`			
AutoPart	int8	`gorm:"column:auto_part" json:"auto_part"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTableV2) TableName() string {
	return "__all_table_v2"
}
	

// AllTableV2Columns get sql column name.获取数据库列名
var AllTableV2Columns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	TableName string
	DatabaseID string
	TableType string
	LoadType string
	DefType string
	RowkeyColumnNum string
	IndexColumnNum string
	MaxUsedColumnID string
	ReplicaNum string
	AutoincColumnID string
	AutoIncrement string
	ReadOnly string
	RowkeySplitPos string
	CompressFuncName string
	ExpireCondition string
	IsUseBloomfilter string
	Comment string
	BlockSize string
	CollationType string
	DataTableID string
	IndexStatus string
	TablegroupID string
	ProgressiveMergeNum string
	IndexType string
	PartLevel string
	PartFuncType string
	PartFuncExpr string
	PartNum string
	SubPartFuncType string
	SubPartFuncExpr string
	SubPartNum string
	CreateMemVersion string
	SchemaVersion string
	ViewDefinition string
	ViewCheckOption string
	ViewIsUpdatable string
	ZoneList string
	PrimaryZone string
	IndexUsingType string
	ParserName string
	IndexAttributesSet string
	Locality string
	TabletSize string
	Pctfree string
	PreviousLocality string
	MaxUsedPartID string
	PartitionCntWithinPartitionTable string
	PartitionStatus string
	PartitionSchemaVersion string
	MaxUsedConstraintID string
	SessionID string
	PkComment string
	SessActiveTime string
	RowStoreType string
	StoreFormat string
	DuplicateScope string
	Binding string
	ProgressiveMergeRound string
	StorageFormatVersion string
	TableMode string
	Encryption string
	TablespaceID string
	DropSchemaVersion string
	IsSubPartTemplate string
	Dop string
	CharacterSetClient string
	CollationConnection string
	AutoPartSize string
	AutoPart string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		TableName:"table_name",  
		DatabaseID:"database_id",  
		TableType:"table_type",  
		LoadType:"load_type",  
		DefType:"def_type",  
		RowkeyColumnNum:"rowkey_column_num",  
		IndexColumnNum:"index_column_num",  
		MaxUsedColumnID:"max_used_column_id",  
		ReplicaNum:"replica_num",  
		AutoincColumnID:"autoinc_column_id",  
		AutoIncrement:"auto_increment",  
		ReadOnly:"read_only",  
		RowkeySplitPos:"rowkey_split_pos",  
		CompressFuncName:"compress_func_name",  
		ExpireCondition:"expire_condition",  
		IsUseBloomfilter:"is_use_bloomfilter",  
		Comment:"comment",  
		BlockSize:"block_size",  
		CollationType:"collation_type",  
		DataTableID:"data_table_id",  
		IndexStatus:"index_status",  
		TablegroupID:"tablegroup_id",  
		ProgressiveMergeNum:"progressive_merge_num",  
		IndexType:"index_type",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExpr:"part_func_expr",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExpr:"sub_part_func_expr",  
		SubPartNum:"sub_part_num",  
		CreateMemVersion:"create_mem_version",  
		SchemaVersion:"schema_version",  
		ViewDefinition:"view_definition",  
		ViewCheckOption:"view_check_option",  
		ViewIsUpdatable:"view_is_updatable",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		IndexUsingType:"index_using_type",  
		ParserName:"parser_name",  
		IndexAttributesSet:"index_attributes_set",  
		Locality:"locality",  
		TabletSize:"tablet_size",  
		Pctfree:"pctfree",  
		PreviousLocality:"previous_locality",  
		MaxUsedPartID:"max_used_part_id",  
		PartitionCntWithinPartitionTable:"partition_cnt_within_partition_table",  
		PartitionStatus:"partition_status",  
		PartitionSchemaVersion:"partition_schema_version",  
		MaxUsedConstraintID:"max_used_constraint_id",  
		SessionID:"session_id",  
		PkComment:"pk_comment",  
		SessActiveTime:"sess_active_time",  
		RowStoreType:"row_store_type",  
		StoreFormat:"store_format",  
		DuplicateScope:"duplicate_scope",  
		Binding:"binding",  
		ProgressiveMergeRound:"progressive_merge_round",  
		StorageFormatVersion:"storage_format_version",  
		TableMode:"table_mode",  
		Encryption:"encryption",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",  
		Dop:"dop",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",  
		AutoPartSize:"auto_part_size",  
		AutoPart:"auto_part",             
	}
	
// AllTableV2History [...]		
type	AllTableV2History	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
LoadType	int64	`gorm:"column:load_type" json:"load_type"`			
DefType	int64	`gorm:"column:def_type" json:"def_type"`			
RowkeyColumnNum	int64	`gorm:"column:rowkey_column_num" json:"rowkey_column_num"`			
IndexColumnNum	int64	`gorm:"column:index_column_num" json:"index_column_num"`			
MaxUsedColumnID	int64	`gorm:"column:max_used_column_id" json:"max_used_column_id"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
AutoincColumnID	int64	`gorm:"column:autoinc_column_id" json:"autoinc_column_id"`			
AutoIncrement	uint64	`gorm:"column:auto_increment" json:"auto_increment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
RowkeySplitPos	int64	`gorm:"column:rowkey_split_pos" json:"rowkey_split_pos"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
ExpireCondition	string	`gorm:"column:expire_condition" json:"expire_condition"`			
IsUseBloomfilter	int64	`gorm:"column:is_use_bloomfilter" json:"is_use_bloomfilter"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
DataTableID	int64	`gorm:"column:data_table_id" json:"data_table_id"`			
IndexStatus	int64	`gorm:"column:index_status" json:"index_status"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
ProgressiveMergeNum	int64	`gorm:"column:progressive_merge_num" json:"progressive_merge_num"`			
IndexType	int64	`gorm:"column:index_type" json:"index_type"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExpr	string	`gorm:"column:part_func_expr" json:"part_func_expr"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExpr	string	`gorm:"column:sub_part_func_expr" json:"sub_part_func_expr"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
CreateMemVersion	int64	`gorm:"column:create_mem_version" json:"create_mem_version"`			
ViewDefinition	string	`gorm:"column:view_definition" json:"view_definition"`			
ViewCheckOption	int64	`gorm:"column:view_check_option" json:"view_check_option"`			
ViewIsUpdatable	int64	`gorm:"column:view_is_updatable" json:"view_is_updatable"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
IndexUsingType	int64	`gorm:"column:index_using_type" json:"index_using_type"`			
ParserName	string	`gorm:"column:parser_name" json:"parser_name"`			
IndexAttributesSet	int64	`gorm:"column:index_attributes_set" json:"index_attributes_set"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
TabletSize	int64	`gorm:"column:tablet_size" json:"tablet_size"`			
Pctfree	int64	`gorm:"column:pctfree" json:"pctfree"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
PartitionCntWithinPartitionTable	int64	`gorm:"column:partition_cnt_within_partition_table" json:"partition_cnt_within_partition_table"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
MaxUsedConstraintID	int64	`gorm:"column:max_used_constraint_id" json:"max_used_constraint_id"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
PkComment	string	`gorm:"column:pk_comment" json:"pk_comment"`			
SessActiveTime	int64	`gorm:"column:sess_active_time" json:"sess_active_time"`			
RowStoreType	string	`gorm:"column:row_store_type" json:"row_store_type"`			
StoreFormat	string	`gorm:"column:store_format" json:"store_format"`			
DuplicateScope	int64	`gorm:"column:duplicate_scope" json:"duplicate_scope"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
ProgressiveMergeRound	int64	`gorm:"column:progressive_merge_round" json:"progressive_merge_round"`			
StorageFormatVersion	int64	`gorm:"column:storage_format_version" json:"storage_format_version"`			
TableMode	int64	`gorm:"column:table_mode" json:"table_mode"`			
Encryption	string	`gorm:"column:encryption" json:"encryption"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
Dop	int64	`gorm:"column:dop" json:"dop"`			
CharacterSetClient	int64	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	int64	`gorm:"column:collation_connection" json:"collation_connection"`			
AutoPartSize	int64	`gorm:"column:auto_part_size" json:"auto_part_size"`			
AutoPart	int8	`gorm:"column:auto_part" json:"auto_part"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTableV2History) TableName() string {
	return "__all_table_v2_history"
}
	

// AllTableV2HistoryColumns get sql column name.获取数据库列名
var AllTableV2HistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	SchemaVersion string
	IsDeleted string
	TableName string
	DatabaseID string
	TableType string
	LoadType string
	DefType string
	RowkeyColumnNum string
	IndexColumnNum string
	MaxUsedColumnID string
	ReplicaNum string
	AutoincColumnID string
	AutoIncrement string
	ReadOnly string
	RowkeySplitPos string
	CompressFuncName string
	ExpireCondition string
	IsUseBloomfilter string
	Comment string
	BlockSize string
	CollationType string
	DataTableID string
	IndexStatus string
	TablegroupID string
	ProgressiveMergeNum string
	IndexType string
	PartLevel string
	PartFuncType string
	PartFuncExpr string
	PartNum string
	SubPartFuncType string
	SubPartFuncExpr string
	SubPartNum string
	CreateMemVersion string
	ViewDefinition string
	ViewCheckOption string
	ViewIsUpdatable string
	ZoneList string
	PrimaryZone string
	IndexUsingType string
	ParserName string
	IndexAttributesSet string
	Locality string
	TabletSize string
	Pctfree string
	PreviousLocality string
	MaxUsedPartID string
	PartitionCntWithinPartitionTable string
	PartitionStatus string
	PartitionSchemaVersion string
	MaxUsedConstraintID string
	SessionID string
	PkComment string
	SessActiveTime string
	RowStoreType string
	StoreFormat string
	DuplicateScope string
	Binding string
	ProgressiveMergeRound string
	StorageFormatVersion string
	TableMode string
	Encryption string
	TablespaceID string
	DropSchemaVersion string
	IsSubPartTemplate string
	Dop string
	CharacterSetClient string
	CollationConnection string
	AutoPartSize string
	AutoPart string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		TableName:"table_name",  
		DatabaseID:"database_id",  
		TableType:"table_type",  
		LoadType:"load_type",  
		DefType:"def_type",  
		RowkeyColumnNum:"rowkey_column_num",  
		IndexColumnNum:"index_column_num",  
		MaxUsedColumnID:"max_used_column_id",  
		ReplicaNum:"replica_num",  
		AutoincColumnID:"autoinc_column_id",  
		AutoIncrement:"auto_increment",  
		ReadOnly:"read_only",  
		RowkeySplitPos:"rowkey_split_pos",  
		CompressFuncName:"compress_func_name",  
		ExpireCondition:"expire_condition",  
		IsUseBloomfilter:"is_use_bloomfilter",  
		Comment:"comment",  
		BlockSize:"block_size",  
		CollationType:"collation_type",  
		DataTableID:"data_table_id",  
		IndexStatus:"index_status",  
		TablegroupID:"tablegroup_id",  
		ProgressiveMergeNum:"progressive_merge_num",  
		IndexType:"index_type",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExpr:"part_func_expr",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExpr:"sub_part_func_expr",  
		SubPartNum:"sub_part_num",  
		CreateMemVersion:"create_mem_version",  
		ViewDefinition:"view_definition",  
		ViewCheckOption:"view_check_option",  
		ViewIsUpdatable:"view_is_updatable",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		IndexUsingType:"index_using_type",  
		ParserName:"parser_name",  
		IndexAttributesSet:"index_attributes_set",  
		Locality:"locality",  
		TabletSize:"tablet_size",  
		Pctfree:"pctfree",  
		PreviousLocality:"previous_locality",  
		MaxUsedPartID:"max_used_part_id",  
		PartitionCntWithinPartitionTable:"partition_cnt_within_partition_table",  
		PartitionStatus:"partition_status",  
		PartitionSchemaVersion:"partition_schema_version",  
		MaxUsedConstraintID:"max_used_constraint_id",  
		SessionID:"session_id",  
		PkComment:"pk_comment",  
		SessActiveTime:"sess_active_time",  
		RowStoreType:"row_store_type",  
		StoreFormat:"store_format",  
		DuplicateScope:"duplicate_scope",  
		Binding:"binding",  
		ProgressiveMergeRound:"progressive_merge_round",  
		StorageFormatVersion:"storage_format_version",  
		TableMode:"table_mode",  
		Encryption:"encryption",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",  
		Dop:"dop",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",  
		AutoPartSize:"auto_part_size",  
		AutoPart:"auto_part",             
	}
	
// AllTablegroup [...]		
type	AllTablegroup	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TablegroupID	int64	`gorm:"primaryKey;column:tablegroup_id" json:"-"`			
TablegroupName	string	`gorm:"column:tablegroup_name" json:"tablegroup_name"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExprNum	int64	`gorm:"column:part_func_expr_num" json:"part_func_expr_num"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExprNum	int64	`gorm:"column:sub_part_func_expr_num" json:"sub_part_func_expr_num"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTablegroup) TableName() string {
	return "__all_tablegroup"
}
	

// AllTablegroupColumns get sql column name.获取数据库列名
var AllTablegroupColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TablegroupID string
	TablegroupName string
	Comment string
	PrimaryZone string
	Locality string
	PartLevel string
	PartFuncType string
	PartFuncExprNum string
	PartNum string
	SubPartFuncType string
	SubPartFuncExprNum string
	SubPartNum string
	MaxUsedPartID string
	SchemaVersion string
	PartitionStatus string
	PreviousLocality string
	PartitionSchemaVersion string
	Binding string
	DropSchemaVersion string
	IsSubPartTemplate string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TablegroupID:"tablegroup_id",  
		TablegroupName:"tablegroup_name",  
		Comment:"comment",  
		PrimaryZone:"primary_zone",  
		Locality:"locality",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExprNum:"part_func_expr_num",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExprNum:"sub_part_func_expr_num",  
		SubPartNum:"sub_part_num",  
		MaxUsedPartID:"max_used_part_id",  
		SchemaVersion:"schema_version",  
		PartitionStatus:"partition_status",  
		PreviousLocality:"previous_locality",  
		PartitionSchemaVersion:"partition_schema_version",  
		Binding:"binding",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",             
	}
	
// AllTablegroupHistory [...]		
type	AllTablegroupHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TablegroupID	int64	`gorm:"primaryKey;column:tablegroup_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TablegroupName	string	`gorm:"column:tablegroup_name" json:"tablegroup_name"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExprNum	int64	`gorm:"column:part_func_expr_num" json:"part_func_expr_num"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExprNum	int64	`gorm:"column:sub_part_func_expr_num" json:"sub_part_func_expr_num"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTablegroupHistory) TableName() string {
	return "__all_tablegroup_history"
}
	

// AllTablegroupHistoryColumns get sql column name.获取数据库列名
var AllTablegroupHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TablegroupID string
	SchemaVersion string
	IsDeleted string
	TablegroupName string
	Comment string
	PrimaryZone string
	Locality string
	PartLevel string
	PartFuncType string
	PartFuncExprNum string
	PartNum string
	SubPartFuncType string
	SubPartFuncExprNum string
	SubPartNum string
	MaxUsedPartID string
	PartitionStatus string
	PreviousLocality string
	PartitionSchemaVersion string
	Binding string
	DropSchemaVersion string
	IsSubPartTemplate string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TablegroupID:"tablegroup_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		TablegroupName:"tablegroup_name",  
		Comment:"comment",  
		PrimaryZone:"primary_zone",  
		Locality:"locality",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExprNum:"part_func_expr_num",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExprNum:"sub_part_func_expr_num",  
		SubPartNum:"sub_part_num",  
		MaxUsedPartID:"max_used_part_id",  
		PartitionStatus:"partition_status",  
		PreviousLocality:"previous_locality",  
		PartitionSchemaVersion:"partition_schema_version",  
		Binding:"binding",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",             
	}
	
// AllTempTable [...]		
type	AllTempTable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
CreateHost	string	`gorm:"column:create_host" json:"create_host"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTempTable) TableName() string {
	return "__all_temp_table"
}
	

// AllTempTableColumns get sql column name.获取数据库列名
var AllTempTableColumns = struct { 
	TenantID string
	TableID string
	CreateHost string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		CreateHost:"create_host",             
	}
	
// AllTenant [...]		
type	AllTenant	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
Locked	int64	`gorm:"column:locked" json:"locked"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
Info	string	`gorm:"column:info" json:"info"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
RewriteMergeVersion	int64	`gorm:"column:rewrite_merge_version" json:"rewrite_merge_version"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
LogonlyReplicaNum	int64	`gorm:"column:logonly_replica_num" json:"logonly_replica_num"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
StorageFormatVersion	int64	`gorm:"column:storage_format_version" json:"storage_format_version"`			
StorageFormatWorkVersion	int64	`gorm:"column:storage_format_work_version" json:"storage_format_work_version"`			
DefaultTablegroupID	int64	`gorm:"column:default_tablegroup_id" json:"default_tablegroup_id"`			
CompatibilityMode	int64	`gorm:"column:compatibility_mode" json:"compatibility_mode"`			
DropTenantTime	int64	`gorm:"column:drop_tenant_time" json:"drop_tenant_time"`			
Status	string	`gorm:"column:status" json:"status"`			
InRecyclebin	int64	`gorm:"column:in_recyclebin" json:"in_recyclebin"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenant) TableName() string {
	return "__all_tenant"
}
	

// AllTenantColumns get sql column name.获取数据库列名
var AllTenantColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TenantName string
	ReplicaNum string
	ZoneList string
	PrimaryZone string
	Locked string
	CollationType string
	Info string
	ReadOnly string
	RewriteMergeVersion string
	Locality string
	LogonlyReplicaNum string
	PreviousLocality string
	StorageFormatVersion string
	StorageFormatWorkVersion string
	DefaultTablegroupID string
	CompatibilityMode string
	DropTenantTime string
	Status string
	InRecyclebin string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		ReplicaNum:"replica_num",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		Locked:"locked",  
		CollationType:"collation_type",  
		Info:"info",  
		ReadOnly:"read_only",  
		RewriteMergeVersion:"rewrite_merge_version",  
		Locality:"locality",  
		LogonlyReplicaNum:"logonly_replica_num",  
		PreviousLocality:"previous_locality",  
		StorageFormatVersion:"storage_format_version",  
		StorageFormatWorkVersion:"storage_format_work_version",  
		DefaultTablegroupID:"default_tablegroup_id",  
		CompatibilityMode:"compatibility_mode",  
		DropTenantTime:"drop_tenant_time",  
		Status:"status",  
		InRecyclebin:"in_recyclebin",             
	}
	
// AllTenantBackupBackupLogArchiveStatus [...]		
type	AllTenantBackupBackupLogArchiveStatus	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
LogArchiveRound	int64	`gorm:"primaryKey;column:log_archive_round" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
MinFirstTime	time.Time	`gorm:"column:min_first_time" json:"min_first_time"`			
MaxNextTime	time.Time	`gorm:"column:max_next_time" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
DeletedInputBytes	int64	`gorm:"column:deleted_input_bytes" json:"deleted_input_bytes"`			
DeletedOutputBytes	int64	`gorm:"column:deleted_output_bytes" json:"deleted_output_bytes"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
Status	string	`gorm:"column:status" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantBackupBackupLogArchiveStatus) TableName() string {
	return "__all_tenant_backup_backup_log_archive_status"
}
	

// AllTenantBackupBackupLogArchiveStatusColumns get sql column name.获取数据库列名
var AllTenantBackupBackupLogArchiveStatusColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Incarnation string
	LogArchiveRound string
	CopyID string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	DeletedInputBytes string
	DeletedOutputBytes string
	PgCount string
	Status string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		LogArchiveRound:"log_archive_round",  
		CopyID:"copy_id",  
		MinFirstTime:"min_first_time",  
		MaxNextTime:"max_next_time",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		DeletedInputBytes:"deleted_input_bytes",  
		DeletedOutputBytes:"deleted_output_bytes",  
		PgCount:"pg_count",  
		Status:"status",             
	}
	
// AllTenantBackupBackupsetTask [...]		
type	AllTenantBackupBackupsetTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PrevFullBackupSetID	int64	`gorm:"column:prev_full_backup_set_id" json:"prev_full_backup_set_id"`			
PrevIncBackupSetID	int64	`gorm:"column:prev_inc_backup_set_id" json:"prev_inc_backup_set_id"`			
PrevBackupDataVersion	int64	`gorm:"column:prev_backup_data_version" json:"prev_backup_data_version"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
ClusterVersionDisplay	string	`gorm:"column:cluster_version_display" json:"cluster_version_display"`			
Status	string	`gorm:"column:status" json:"status"`			
SrcBackupDest	string	`gorm:"column:src_backup_dest" json:"src_backup_dest"`			
DstBackupDest	string	`gorm:"column:dst_backup_dest" json:"dst_backup_dest"`			
SrcDeviceType	string	`gorm:"column:src_device_type" json:"src_device_type"`			
DstDeviceType	string	`gorm:"column:dst_device_type" json:"dst_device_type"`			
BackupDataVersion	int64	`gorm:"column:backup_data_version" json:"backup_data_version"`			
BackupSchemaVersion	int64	`gorm:"column:backup_schema_version" json:"backup_schema_version"`			
TotalPgCount	int64	`gorm:"column:total_pg_count" json:"total_pg_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
Result	int64	`gorm:"column:result" json:"result"`			
EncryptionMode	string	`gorm:"column:encryption_mode" json:"encryption_mode"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
StartReplayLogTs	int64	`gorm:"column:start_replay_log_ts" json:"start_replay_log_ts"`			
Date	int64	`gorm:"column:date" json:"date"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantBackupBackupsetTask) TableName() string {
	return "__all_tenant_backup_backupset_task"
}
	

// AllTenantBackupBackupsetTaskColumns get sql column name.获取数据库列名
var AllTenantBackupBackupsetTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	JobID string
	Incarnation string
	BackupSetID string
	CopyID string
	BackupType string
	SnapshotVersion string
	PrevFullBackupSetID string
	PrevIncBackupSetID string
	PrevBackupDataVersion string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	Compatible string
	ClusterID string
	ClusterVersion string
	ClusterVersionDisplay string
	Status string
	SrcBackupDest string
	DstBackupDest string
	SrcDeviceType string
	DstDeviceType string
	BackupDataVersion string
	BackupSchemaVersion string
	TotalPgCount string
	FinishPgCount string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	Result string
	EncryptionMode string
	Passwd string
	StartReplayLogTs string
	Date string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		JobID:"job_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		CopyID:"copy_id",  
		BackupType:"backup_type",  
		SnapshotVersion:"snapshot_version",  
		PrevFullBackupSetID:"prev_full_backup_set_id",  
		PrevIncBackupSetID:"prev_inc_backup_set_id",  
		PrevBackupDataVersion:"prev_backup_data_version",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Compatible:"compatible",  
		ClusterID:"cluster_id",  
		ClusterVersion:"cluster_version",  
		ClusterVersionDisplay:"cluster_version_display",  
		Status:"status",  
		SrcBackupDest:"src_backup_dest",  
		DstBackupDest:"dst_backup_dest",  
		SrcDeviceType:"src_device_type",  
		DstDeviceType:"dst_device_type",  
		BackupDataVersion:"backup_data_version",  
		BackupSchemaVersion:"backup_schema_version",  
		TotalPgCount:"total_pg_count",  
		FinishPgCount:"finish_pg_count",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		Result:"result",  
		EncryptionMode:"encryption_mode",  
		Passwd:"passwd",  
		StartReplayLogTs:"start_replay_log_ts",  
		Date:"date",             
	}
	
// AllTenantBackupCleanInfo [...]		
type	AllTenantBackupCleanInfo	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"column:job_id" json:"job_id"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Incarnation	int64	`gorm:"column:incarnation" json:"incarnation"`			
Type	string	`gorm:"column:type" json:"type"`			
Status	string	`gorm:"column:status" json:"status"`			
Parameter	string	`gorm:"column:parameter" json:"parameter"`			
ErrorMsg	string	`gorm:"column:error_msg" json:"error_msg"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ClogGcSnapshot	int64	`gorm:"column:clog_gc_snapshot" json:"clog_gc_snapshot"`			
Result	int64	`gorm:"column:result" json:"result"`			
CopyID	int64	`gorm:"column:copy_id" json:"copy_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantBackupCleanInfo) TableName() string {
	return "__all_tenant_backup_clean_info"
}
	

// AllTenantBackupCleanInfoColumns get sql column name.获取数据库列名
var AllTenantBackupCleanInfoColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	JobID string
	StartTime string
	EndTime string
	Incarnation string
	Type string
	Status string
	Parameter string
	ErrorMsg string
	Comment string
	ClogGcSnapshot string
	Result string
	CopyID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		JobID:"job_id",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Incarnation:"incarnation",  
		Type:"type",  
		Status:"status",  
		Parameter:"parameter",  
		ErrorMsg:"error_msg",  
		Comment:"comment",  
		ClogGcSnapshot:"clog_gc_snapshot",  
		Result:"result",  
		CopyID:"copy_id",             
	}
	
// AllTenantBackupInfo [...]		
type	AllTenantBackupInfo	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
Value	string	`gorm:"column:value" json:"value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantBackupInfo) TableName() string {
	return "__all_tenant_backup_info"
}
	

// AllTenantBackupInfoColumns get sql column name.获取数据库列名
var AllTenantBackupInfoColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Name string
	Value string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Name:"name",  
		Value:"value",             
	}
	
// AllTenantBackupLogArchiveStatus [...]		
type	AllTenantBackupLogArchiveStatus	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
LogArchiveRound	int64	`gorm:"primaryKey;column:log_archive_round" json:"-"`			
MinFirstTime	time.Time	`gorm:"column:min_first_time" json:"min_first_time"`			
MaxNextTime	time.Time	`gorm:"column:max_next_time" json:"max_next_time"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
DeletedInputBytes	int64	`gorm:"column:deleted_input_bytes" json:"deleted_input_bytes"`			
DeletedOutputBytes	int64	`gorm:"column:deleted_output_bytes" json:"deleted_output_bytes"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
Status	string	`gorm:"column:status" json:"status"`			
IsMountFileCreated	int64	`gorm:"column:is_mount_file_created" json:"is_mount_file_created"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantBackupLogArchiveStatus) TableName() string {
	return "__all_tenant_backup_log_archive_status"
}
	

// AllTenantBackupLogArchiveStatusColumns get sql column name.获取数据库列名
var AllTenantBackupLogArchiveStatusColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Incarnation string
	LogArchiveRound string
	MinFirstTime string
	MaxNextTime string
	InputBytes string
	OutputBytes string
	DeletedInputBytes string
	DeletedOutputBytes string
	PgCount string
	Status string
	IsMountFileCreated string
	Compatible string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		LogArchiveRound:"log_archive_round",  
		MinFirstTime:"min_first_time",  
		MaxNextTime:"max_next_time",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		DeletedInputBytes:"deleted_input_bytes",  
		DeletedOutputBytes:"deleted_output_bytes",  
		PgCount:"pg_count",  
		Status:"status",  
		IsMountFileCreated:"is_mount_file_created",  
		Compatible:"compatible",             
	}
	
// AllTenantBackupTask [...]		
type	AllTenantBackupTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
DeviceType	string	`gorm:"column:device_type" json:"device_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PrevFullBackupSetID	int64	`gorm:"column:prev_full_backup_set_id" json:"prev_full_backup_set_id"`			
PrevIncBackupSetID	int64	`gorm:"column:prev_inc_backup_set_id" json:"prev_inc_backup_set_id"`			
PrevBackupDataVersion	int64	`gorm:"column:prev_backup_data_version" json:"prev_backup_data_version"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
Status	string	`gorm:"column:status" json:"status"`			
Result	int64	`gorm:"column:result" json:"result"`			
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
BackupDataVersion	int64	`gorm:"column:backup_data_version" json:"backup_data_version"`			
BackupSchemaVersion	int64	`gorm:"column:backup_schema_version" json:"backup_schema_version"`			
ClusterVersionDisplay	string	`gorm:"column:cluster_version_display" json:"cluster_version_display"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
EncryptionMode	string	`gorm:"column:encryption_mode" json:"encryption_mode"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
StartReplayLogTs	int64	`gorm:"column:start_replay_log_ts" json:"start_replay_log_ts"`			
Date	int64	`gorm:"column:date" json:"date"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantBackupTask) TableName() string {
	return "__all_tenant_backup_task"
}
	

// AllTenantBackupTaskColumns get sql column name.获取数据库列名
var AllTenantBackupTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	Incarnation string
	BackupSetID string
	BackupType string
	DeviceType string
	SnapshotVersion string
	PrevFullBackupSetID string
	PrevIncBackupSetID string
	PrevBackupDataVersion string
	PgCount string
	MacroBlockCount string
	FinishPgCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	Compatible string
	ClusterVersion string
	Status string
	Result string
	ClusterID string
	BackupDest string
	BackupDataVersion string
	BackupSchemaVersion string
	ClusterVersionDisplay string
	PartitionCount string
	FinishPartitionCount string
	EncryptionMode string
	Passwd string
	StartReplayLogTs string
	Date string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		BackupType:"backup_type",  
		DeviceType:"device_type",  
		SnapshotVersion:"snapshot_version",  
		PrevFullBackupSetID:"prev_full_backup_set_id",  
		PrevIncBackupSetID:"prev_inc_backup_set_id",  
		PrevBackupDataVersion:"prev_backup_data_version",  
		PgCount:"pg_count",  
		MacroBlockCount:"macro_block_count",  
		FinishPgCount:"finish_pg_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Compatible:"compatible",  
		ClusterVersion:"cluster_version",  
		Status:"status",  
		Result:"result",  
		ClusterID:"cluster_id",  
		BackupDest:"backup_dest",  
		BackupDataVersion:"backup_data_version",  
		BackupSchemaVersion:"backup_schema_version",  
		ClusterVersionDisplay:"cluster_version_display",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		EncryptionMode:"encryption_mode",  
		Passwd:"passwd",  
		StartReplayLogTs:"start_replay_log_ts",  
		Date:"date",             
	}
	
// AllTenantBackupValidationTask [...]		
type	AllTenantBackupValidationTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
Status	string	`gorm:"column:status" json:"status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
TotalPgCount	int64	`gorm:"column:total_pg_count" json:"total_pg_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
LogSize	int64	`gorm:"column:log_size" json:"log_size"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantBackupValidationTask) TableName() string {
	return "__all_tenant_backup_validation_task"
}
	

// AllTenantBackupValidationTaskColumns get sql column name.获取数据库列名
var AllTenantBackupValidationTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	JobID string
	TaskID string
	Incarnation string
	BackupSetID string
	Status string
	BackupDest string
	StartTime string
	EndTime string
	TotalPgCount string
	FinishPgCount string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	LogSize string
	Result string
	Comment string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		JobID:"job_id",  
		TaskID:"task_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		Status:"status",  
		BackupDest:"backup_dest",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		TotalPgCount:"total_pg_count",  
		FinishPgCount:"finish_pg_count",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		LogSize:"log_size",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllTenantConstraintColumn [...]		
type	AllTenantConstraintColumn	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ConstraintID	int64	`gorm:"primaryKey;column:constraint_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantConstraintColumn) TableName() string {
	return "__all_tenant_constraint_column"
}
	

// AllTenantConstraintColumnColumns get sql column name.获取数据库列名
var AllTenantConstraintColumnColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	ConstraintID string
	ColumnID string
	SchemaVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ConstraintID:"constraint_id",  
		ColumnID:"column_id",  
		SchemaVersion:"schema_version",             
	}
	
// AllTenantConstraintColumnHistory [...]		
type	AllTenantConstraintColumnHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ConstraintID	int64	`gorm:"primaryKey;column:constraint_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantConstraintColumnHistory) TableName() string {
	return "__all_tenant_constraint_column_history"
}
	

// AllTenantConstraintColumnHistoryColumns get sql column name.获取数据库列名
var AllTenantConstraintColumnHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	ConstraintID string
	ColumnID string
	SchemaVersion string
	IsDeleted string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ConstraintID:"constraint_id",  
		ColumnID:"column_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",             
	}
	
// AllTenantDependency [...]		
type	AllTenantDependency	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DepObjType	int64	`gorm:"primaryKey;column:dep_obj_type" json:"-"`			
DepObjID	int64	`gorm:"primaryKey;column:dep_obj_id" json:"-"`			
DepOrder	int64	`gorm:"primaryKey;column:dep_order" json:"-"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
DepTimestamp	int64	`gorm:"column:dep_timestamp" json:"dep_timestamp"`			
RefObjType	int64	`gorm:"column:ref_obj_type" json:"ref_obj_type"`			
RefObjID	int64	`gorm:"column:ref_obj_id" json:"ref_obj_id"`			
RefTimestamp	int64	`gorm:"column:ref_timestamp" json:"ref_timestamp"`			
DepObjOwnerID	int64	`gorm:"column:dep_obj_owner_id" json:"dep_obj_owner_id"`			
Property	int64	`gorm:"column:property" json:"property"`			
DepAttrs	[]byte	`gorm:"column:dep_attrs" json:"dep_attrs"`			
DepReason	[]byte	`gorm:"column:dep_reason" json:"dep_reason"`			
RefObjName	string	`gorm:"column:ref_obj_name" json:"ref_obj_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantDependency) TableName() string {
	return "__all_tenant_dependency"
}
	

// AllTenantDependencyColumns get sql column name.获取数据库列名
var AllTenantDependencyColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DepObjType string
	DepObjID string
	DepOrder string
	SchemaVersion string
	DepTimestamp string
	RefObjType string
	RefObjID string
	RefTimestamp string
	DepObjOwnerID string
	Property string
	DepAttrs string
	DepReason string
	RefObjName string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DepObjType:"dep_obj_type",  
		DepObjID:"dep_obj_id",  
		DepOrder:"dep_order",  
		SchemaVersion:"schema_version",  
		DepTimestamp:"dep_timestamp",  
		RefObjType:"ref_obj_type",  
		RefObjID:"ref_obj_id",  
		RefTimestamp:"ref_timestamp",  
		DepObjOwnerID:"dep_obj_owner_id",  
		Property:"property",  
		DepAttrs:"dep_attrs",  
		DepReason:"dep_reason",  
		RefObjName:"ref_obj_name",             
	}
	
// AllTenantError [...]		
type	AllTenantError	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjID	int64	`gorm:"primaryKey;column:obj_id" json:"-"`			
ObjSeq	int64	`gorm:"primaryKey;column:obj_seq" json:"-"`			
ObjType	int64	`gorm:"primaryKey;column:obj_type" json:"-"`			
Line	int64	`gorm:"column:line" json:"line"`			
Position	int64	`gorm:"column:position" json:"position"`			
TextLength	int64	`gorm:"column:text_length" json:"text_length"`			
Text	string	`gorm:"column:text" json:"text"`			
Property	int64	`gorm:"column:property" json:"property"`			
ErrorNumber	int64	`gorm:"column:error_number" json:"error_number"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantError) TableName() string {
	return "__all_tenant_error"
}
	

// AllTenantErrorColumns get sql column name.获取数据库列名
var AllTenantErrorColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ObjID string
	ObjSeq string
	ObjType string
	Line string
	Position string
	TextLength string
	Text string
	Property string
	ErrorNumber string
	SchemaVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ObjID:"obj_id",  
		ObjSeq:"obj_seq",  
		ObjType:"obj_type",  
		Line:"line",  
		Position:"position",  
		TextLength:"text_length",  
		Text:"text",  
		Property:"property",  
		ErrorNumber:"error_number",  
		SchemaVersion:"schema_version",             
	}
	
// AllTenantGcPartitionInfo [...]		
type	AllTenantGcPartitionInfo	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantGcPartitionInfo) TableName() string {
	return "__all_tenant_gc_partition_info"
}
	

// AllTenantGcPartitionInfoColumns get sql column name.获取数据库列名
var AllTenantGcPartitionInfoColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",             
	}
	
// AllTenantGlobalTransaction [...]		
type	AllTenantGlobalTransaction	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Gtrid	[]byte	`gorm:"primaryKey;column:gtrid" json:"-"`			
Bqual	[]byte	`gorm:"primaryKey;column:bqual" json:"-"`			
FormatID	int64	`gorm:"primaryKey;column:format_id" json:"-"`			
TransID	string	`gorm:"column:trans_id" json:"trans_id"`			
Coordinator	string	`gorm:"column:coordinator" json:"coordinator"`			
SchedulerIP	string	`gorm:"column:scheduler_ip" json:"scheduler_ip"`			
SchedulerPort	int64	`gorm:"column:scheduler_port" json:"scheduler_port"`			
IsReadonly	int8	`gorm:"column:is_readonly" json:"is_readonly"`			
State	int64	`gorm:"column:state" json:"state"`			
EndFlag	int64	`gorm:"column:end_flag" json:"end_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantGlobalTransaction) TableName() string {
	return "__all_tenant_global_transaction"
}
	

// AllTenantGlobalTransactionColumns get sql column name.获取数据库列名
var AllTenantGlobalTransactionColumns = struct { 
	GmtCreate string
	GmtModified string
	Gtrid string
	Bqual string
	FormatID string
	TransID string
	Coordinator string
	SchedulerIP string
	SchedulerPort string
	IsReadonly string
	State string
	EndFlag string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Gtrid:"gtrid",  
		Bqual:"bqual",  
		FormatID:"format_id",  
		TransID:"trans_id",  
		Coordinator:"coordinator",  
		SchedulerIP:"scheduler_ip",  
		SchedulerPort:"scheduler_port",  
		IsReadonly:"is_readonly",  
		State:"state",  
		EndFlag:"end_flag",             
	}
	
// AllTenantGts [...]		
type	AllTenantGts	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
GtsID	int64	`gorm:"column:gts_id" json:"gts_id"`			
OrigGtsID	int64	`gorm:"column:orig_gts_id" json:"orig_gts_id"`			
GtsInvalidTs	int64	`gorm:"column:gts_invalid_ts" json:"gts_invalid_ts"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantGts) TableName() string {
	return "__all_tenant_gts"
}
	

// AllTenantGtsColumns get sql column name.获取数据库列名
var AllTenantGtsColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	GtsID string
	OrigGtsID string
	GtsInvalidTs string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		GtsID:"gts_id",  
		OrigGtsID:"orig_gts_id",  
		GtsInvalidTs:"gts_invalid_ts",             
	}
	
// AllTenantHistory [...]		
type	AllTenantHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
Locked	int64	`gorm:"column:locked" json:"locked"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
Info	string	`gorm:"column:info" json:"info"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
RewriteMergeVersion	int64	`gorm:"column:rewrite_merge_version" json:"rewrite_merge_version"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
LogonlyReplicaNum	int64	`gorm:"column:logonly_replica_num" json:"logonly_replica_num"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
StorageFormatVersion	int64	`gorm:"column:storage_format_version" json:"storage_format_version"`			
StorageFormatWorkVersion	int64	`gorm:"column:storage_format_work_version" json:"storage_format_work_version"`			
DefaultTablegroupID	int64	`gorm:"column:default_tablegroup_id" json:"default_tablegroup_id"`			
CompatibilityMode	int64	`gorm:"column:compatibility_mode" json:"compatibility_mode"`			
DropTenantTime	int64	`gorm:"column:drop_tenant_time" json:"drop_tenant_time"`			
Status	string	`gorm:"column:status" json:"status"`			
InRecyclebin	int64	`gorm:"column:in_recyclebin" json:"in_recyclebin"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantHistory) TableName() string {
	return "__all_tenant_history"
}
	

// AllTenantHistoryColumns get sql column name.获取数据库列名
var AllTenantHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	SchemaVersion string
	IsDeleted string
	TenantName string
	ReplicaNum string
	ZoneList string
	PrimaryZone string
	Locked string
	CollationType string
	Info string
	ReadOnly string
	RewriteMergeVersion string
	Locality string
	LogonlyReplicaNum string
	PreviousLocality string
	StorageFormatVersion string
	StorageFormatWorkVersion string
	DefaultTablegroupID string
	CompatibilityMode string
	DropTenantTime string
	Status string
	InRecyclebin string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		TenantName:"tenant_name",  
		ReplicaNum:"replica_num",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		Locked:"locked",  
		CollationType:"collation_type",  
		Info:"info",  
		ReadOnly:"read_only",  
		RewriteMergeVersion:"rewrite_merge_version",  
		Locality:"locality",  
		LogonlyReplicaNum:"logonly_replica_num",  
		PreviousLocality:"previous_locality",  
		StorageFormatVersion:"storage_format_version",  
		StorageFormatWorkVersion:"storage_format_work_version",  
		DefaultTablegroupID:"default_tablegroup_id",  
		CompatibilityMode:"compatibility_mode",  
		DropTenantTime:"drop_tenant_time",  
		Status:"status",  
		InRecyclebin:"in_recyclebin",             
	}
	
// AllTenantKeystore [...]		
type	AllTenantKeystore	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
KeystoreID	int64	`gorm:"primaryKey;column:keystore_id" json:"-"`			
KeystoreName	string	`gorm:"column:keystore_name" json:"keystore_name"`			
Password	string	`gorm:"column:password" json:"password"`			
Status	int64	`gorm:"column:status" json:"status"`			
MasterKeyID	int64	`gorm:"column:master_key_id" json:"master_key_id"`			
MasterKey	string	`gorm:"column:master_key" json:"master_key"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantKeystore) TableName() string {
	return "__all_tenant_keystore"
}
	

// AllTenantKeystoreColumns get sql column name.获取数据库列名
var AllTenantKeystoreColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	KeystoreID string
	KeystoreName string
	Password string
	Status string
	MasterKeyID string
	MasterKey string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		KeystoreID:"keystore_id",  
		KeystoreName:"keystore_name",  
		Password:"password",  
		Status:"status",  
		MasterKeyID:"master_key_id",  
		MasterKey:"master_key",             
	}
	
// AllTenantKeystoreHistory [...]		
type	AllTenantKeystoreHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
KeystoreID	int64	`gorm:"primaryKey;column:keystore_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
KeystoreName	string	`gorm:"column:keystore_name" json:"keystore_name"`			
Password	string	`gorm:"column:password" json:"password"`			
Status	int64	`gorm:"column:status" json:"status"`			
MasterKeyID	int64	`gorm:"column:master_key_id" json:"master_key_id"`			
MasterKey	string	`gorm:"column:master_key" json:"master_key"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantKeystoreHistory) TableName() string {
	return "__all_tenant_keystore_history"
}
	

// AllTenantKeystoreHistoryColumns get sql column name.获取数据库列名
var AllTenantKeystoreHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	KeystoreID string
	SchemaVersion string
	IsDeleted string
	KeystoreName string
	Password string
	Status string
	MasterKeyID string
	MasterKey string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		KeystoreID:"keystore_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		KeystoreName:"keystore_name",  
		Password:"password",  
		Status:"status",  
		MasterKeyID:"master_key_id",  
		MasterKey:"master_key",             
	}
	
// AllTenantMetaTable [...]		
type	AllTenantMetaTable	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
IsOriginalLeader	int64	`gorm:"column:is_original_leader" json:"is_original_leader"`			
IsPreviousLeader	int64	`gorm:"column:is_previous_leader" json:"is_previous_leader"`			
CreateTime	int64	`gorm:"column:create_time" json:"create_time"`			
Rebuild	int64	`gorm:"column:rebuild" json:"rebuild"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
Status	string	`gorm:"column:status" json:"status"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
PartitionChecksum	int64	`gorm:"column:partition_checksum" json:"partition_checksum"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
FailList	string	`gorm:"column:fail_list" json:"fail_list"`			
RecoveryTimestamp	int64	`gorm:"column:recovery_timestamp" json:"recovery_timestamp"`			
MemstorePercent	int64	`gorm:"column:memstore_percent" json:"memstore_percent"`			
DataFileID	int64	`gorm:"column:data_file_id" json:"data_file_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantMetaTable) TableName() string {
	return "__all_tenant_meta_table"
}
	

// AllTenantMetaTableColumns get sql column name.获取数据库列名
var AllTenantMetaTableColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	SQLPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	RowCount string
	DataSize string
	DataVersion string
	DataChecksum string
	RowChecksum string
	ColumnChecksum string
	IsOriginalLeader string
	IsPreviousLeader string
	CreateTime string
	Rebuild string
	ReplicaType string
	RequiredSize string
	Status string
	IsRestore string
	PartitionChecksum string
	Quorum string
	FailList string
	RecoveryTimestamp string
	MemstorePercent string
	DataFileID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLPort:"sql_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		DataChecksum:"data_checksum",  
		RowChecksum:"row_checksum",  
		ColumnChecksum:"column_checksum",  
		IsOriginalLeader:"is_original_leader",  
		IsPreviousLeader:"is_previous_leader",  
		CreateTime:"create_time",  
		Rebuild:"rebuild",  
		ReplicaType:"replica_type",  
		RequiredSize:"required_size",  
		Status:"status",  
		IsRestore:"is_restore",  
		PartitionChecksum:"partition_checksum",  
		Quorum:"quorum",  
		FailList:"fail_list",  
		RecoveryTimestamp:"recovery_timestamp",  
		MemstorePercent:"memstore_percent",  
		DataFileID:"data_file_id",             
	}
	
// AllTenantObjauth [...]		
type	AllTenantObjauth	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjID	int64	`gorm:"primaryKey;column:obj_id" json:"-"`			
Objtype	int64	`gorm:"primaryKey;column:objtype" json:"-"`			
ColID	int64	`gorm:"primaryKey;column:col_id" json:"-"`			
GrantorID	int64	`gorm:"primaryKey;column:grantor_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
PrivID	int64	`gorm:"primaryKey;column:priv_id" json:"-"`			
PrivOption	int64	`gorm:"column:priv_option" json:"priv_option"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantObjauth) TableName() string {
	return "__all_tenant_objauth"
}
	

// AllTenantObjauthColumns get sql column name.获取数据库列名
var AllTenantObjauthColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ObjID string
	Objtype string
	ColID string
	GrantorID string
	GranteeID string
	PrivID string
	PrivOption string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ObjID:"obj_id",  
		Objtype:"objtype",  
		ColID:"col_id",  
		GrantorID:"grantor_id",  
		GranteeID:"grantee_id",  
		PrivID:"priv_id",  
		PrivOption:"priv_option",             
	}
	
// AllTenantObjauthHistory [...]		
type	AllTenantObjauthHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjID	int64	`gorm:"primaryKey;column:obj_id" json:"-"`			
Objtype	int64	`gorm:"primaryKey;column:objtype" json:"-"`			
ColID	int64	`gorm:"primaryKey;column:col_id" json:"-"`			
GrantorID	int64	`gorm:"primaryKey;column:grantor_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
PrivID	int64	`gorm:"primaryKey;column:priv_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PrivOption	int64	`gorm:"column:priv_option" json:"priv_option"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantObjauthHistory) TableName() string {
	return "__all_tenant_objauth_history"
}
	

// AllTenantObjauthHistoryColumns get sql column name.获取数据库列名
var AllTenantObjauthHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ObjID string
	Objtype string
	ColID string
	GrantorID string
	GranteeID string
	PrivID string
	SchemaVersion string
	IsDeleted string
	PrivOption string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ObjID:"obj_id",  
		Objtype:"objtype",  
		ColID:"col_id",  
		GrantorID:"grantor_id",  
		GranteeID:"grantee_id",  
		PrivID:"priv_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		PrivOption:"priv_option",             
	}
	
// AllTenantObjectType [...]		
type	AllTenantObjectType	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjectTypeID	int64	`gorm:"primaryKey;column:object_type_id" json:"-"`			
Type	int64	`gorm:"primaryKey;column:type" json:"-"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ObjectName	string	`gorm:"column:object_name" json:"object_name"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
Source	string	`gorm:"column:source" json:"source"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantObjectType) TableName() string {
	return "__all_tenant_object_type"
}
	

// AllTenantObjectTypeColumns get sql column name.获取数据库列名
var AllTenantObjectTypeColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ObjectTypeID string
	Type string
	SchemaVersion string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	DatabaseID string
	Flag string
	OwnerID string
	CompFlag string
	ObjectName string
	ExecEnv string
	Source string
	Comment string
	RouteSQL string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ObjectTypeID:"object_type_id",  
		Type:"type",  
		SchemaVersion:"schema_version",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		DatabaseID:"database_id",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		CompFlag:"comp_flag",  
		ObjectName:"object_name",  
		ExecEnv:"exec_env",  
		Source:"source",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllTenantObjectTypeHistory [...]		
type	AllTenantObjectTypeHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjectTypeID	int64	`gorm:"primaryKey;column:object_type_id" json:"-"`			
Type	int64	`gorm:"primaryKey;column:type" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ObjectName	string	`gorm:"column:object_name" json:"object_name"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
Source	string	`gorm:"column:source" json:"source"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantObjectTypeHistory) TableName() string {
	return "__all_tenant_object_type_history"
}
	

// AllTenantObjectTypeHistoryColumns get sql column name.获取数据库列名
var AllTenantObjectTypeHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ObjectTypeID string
	Type string
	SchemaVersion string
	IsDeleted string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	DatabaseID string
	Flag string
	OwnerID string
	CompFlag string
	ObjectName string
	ExecEnv string
	Source string
	Comment string
	RouteSQL string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ObjectTypeID:"object_type_id",  
		Type:"type",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		DatabaseID:"database_id",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		CompFlag:"comp_flag",  
		ObjectName:"object_name",  
		ExecEnv:"exec_env",  
		Source:"source",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllTenantPartitionMetaTable [...]		
type	AllTenantPartitionMetaTable	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Role	int64	`gorm:"column:role" json:"role"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
Status	string	`gorm:"column:status" json:"status"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantPartitionMetaTable) TableName() string {
	return "__all_tenant_partition_meta_table"
}
	

// AllTenantPartitionMetaTableColumns get sql column name.获取数据库列名
var AllTenantPartitionMetaTableColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	Role string
	RowCount string
	DataSize string
	DataVersion string
	RequiredSize string
	ReplicaType string
	Status string
	DataChecksum string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Role:"role",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		RequiredSize:"required_size",  
		ReplicaType:"replica_type",  
		Status:"status",  
		DataChecksum:"data_checksum",             
	}
	
// AllTenantPgBackupBackupsetTask [...]		
type	AllTenantPgBackupBackupsetTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
Status	string	`gorm:"column:status" json:"status"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantPgBackupBackupsetTask) TableName() string {
	return "__all_tenant_pg_backup_backupset_task"
}
	

// AllTenantPgBackupBackupsetTaskColumns get sql column name.获取数据库列名
var AllTenantPgBackupBackupsetTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	JobID string
	Incarnation string
	BackupSetID string
	CopyID string
	TableID string
	PartitionID string
	Status string
	TraceID string
	SvrIP string
	SvrPort string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	Result string
	Comment string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		JobID:"job_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		CopyID:"copy_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		Status:"status",  
		TraceID:"trace_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllTenantPgBackupTask [...]		
type	AllTenantPgBackupTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
RetryCount	int64	`gorm:"column:retry_count" json:"retry_count"`			
ReplicaRole	int64	`gorm:"column:replica_role" json:"replica_role"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Status	string	`gorm:"column:status" json:"status"`			
TaskID	int64	`gorm:"column:task_id" json:"task_id"`			
Result	int64	`gorm:"column:result" json:"result"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantPgBackupTask) TableName() string {
	return "__all_tenant_pg_backup_task"
}
	

// AllTenantPgBackupTaskColumns get sql column name.获取数据库列名
var AllTenantPgBackupTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TableID string
	PartitionID string
	Incarnation string
	BackupSetID string
	BackupType string
	SnapshotVersion string
	PartitionCount string
	MacroBlockCount string
	FinishPartitionCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	RetryCount string
	ReplicaRole string
	ReplicaType string
	SvrIP string
	SvrPort string
	Status string
	TaskID string
	Result string
	TraceID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		BackupType:"backup_type",  
		SnapshotVersion:"snapshot_version",  
		PartitionCount:"partition_count",  
		MacroBlockCount:"macro_block_count",  
		FinishPartitionCount:"finish_partition_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		RetryCount:"retry_count",  
		ReplicaRole:"replica_role",  
		ReplicaType:"replica_type",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Status:"status",  
		TaskID:"task_id",  
		Result:"result",  
		TraceID:"trace_id",             
	}
	
// AllTenantPgBackupValidationTask [...]		
type	AllTenantPgBackupValidationTask	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
ArchiveRound	int64	`gorm:"column:archive_round" json:"archive_round"`			
Status	string	`gorm:"column:status" json:"status"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
LogInfo	string	`gorm:"column:log_info" json:"log_info"`			
LogSize	int64	`gorm:"column:log_size" json:"log_size"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantPgBackupValidationTask) TableName() string {
	return "__all_tenant_pg_backup_validation_task"
}
	

// AllTenantPgBackupValidationTaskColumns get sql column name.获取数据库列名
var AllTenantPgBackupValidationTaskColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	JobID string
	TaskID string
	Incarnation string
	BackupSetID string
	TableID string
	PartitionID string
	ArchiveRound string
	Status string
	TraceID string
	SvrIP string
	SvrPort string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	LogInfo string
	LogSize string
	Result string
	Comment string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		JobID:"job_id",  
		TaskID:"task_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		ArchiveRound:"archive_round",  
		Status:"status",  
		TraceID:"trace_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		LogInfo:"log_info",  
		LogSize:"log_size",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllTenantPlanBaseline [...]		
type	AllTenantPlanBaseline	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
PlanBaselineID	int64	`gorm:"primaryKey;column:plan_baseline_id" json:"-"`			
DatabaseID	uint64	`gorm:"column:database_id" json:"database_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
SQLID	[]byte	`gorm:"column:sql_id" json:"sql_id"`			
PlanHashValue	uint64	`gorm:"column:plan_hash_value" json:"plan_hash_value"`			
ParamsInfo	[]byte	`gorm:"column:params_info" json:"params_info"`			
OutlineData	string	`gorm:"column:outline_data" json:"outline_data"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
Fixed	int8	`gorm:"column:fixed" json:"fixed"`			
Enabled	int8	`gorm:"column:enabled" json:"enabled"`			
HintsInfo	string	`gorm:"column:hints_info" json:"hints_info"`			
HintsAllWorked	int8	`gorm:"column:hints_all_worked" json:"hints_all_worked"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantPlanBaseline) TableName() string {
	return "__all_tenant_plan_baseline"
}
	

// AllTenantPlanBaselineColumns get sql column name.获取数据库列名
var AllTenantPlanBaselineColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	PlanBaselineID string
	DatabaseID string
	SchemaVersion string
	SQLID string
	PlanHashValue string
	ParamsInfo string
	OutlineData string
	SQLText string
	Fixed string
	Enabled string
	HintsInfo string
	HintsAllWorked string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		PlanBaselineID:"plan_baseline_id",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		SQLID:"sql_id",  
		PlanHashValue:"plan_hash_value",  
		ParamsInfo:"params_info",  
		OutlineData:"outline_data",  
		SQLText:"sql_text",  
		Fixed:"fixed",  
		Enabled:"enabled",  
		HintsInfo:"hints_info",  
		HintsAllWorked:"hints_all_worked",             
	}
	
// AllTenantPlanBaselineHistory [...]		
type	AllTenantPlanBaselineHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
PlanBaselineID	int64	`gorm:"primaryKey;column:plan_baseline_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	uint64	`gorm:"column:database_id" json:"database_id"`			
SQLID	[]byte	`gorm:"column:sql_id" json:"sql_id"`			
PlanHashValue	uint64	`gorm:"column:plan_hash_value" json:"plan_hash_value"`			
ParamsInfo	[]byte	`gorm:"column:params_info" json:"params_info"`			
OutlineData	string	`gorm:"column:outline_data" json:"outline_data"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
Fixed	int8	`gorm:"column:fixed" json:"fixed"`			
Enabled	int8	`gorm:"column:enabled" json:"enabled"`			
HintsInfo	string	`gorm:"column:hints_info" json:"hints_info"`			
HintsAllWorked	int8	`gorm:"column:hints_all_worked" json:"hints_all_worked"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantPlanBaselineHistory) TableName() string {
	return "__all_tenant_plan_baseline_history"
}
	

// AllTenantPlanBaselineHistoryColumns get sql column name.获取数据库列名
var AllTenantPlanBaselineHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	PlanBaselineID string
	SchemaVersion string
	IsDeleted string
	DatabaseID string
	SQLID string
	PlanHashValue string
	ParamsInfo string
	OutlineData string
	SQLText string
	Fixed string
	Enabled string
	HintsInfo string
	HintsAllWorked string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		PlanBaselineID:"plan_baseline_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		SQLID:"sql_id",  
		PlanHashValue:"plan_hash_value",  
		ParamsInfo:"params_info",  
		OutlineData:"outline_data",  
		SQLText:"sql_text",  
		Fixed:"fixed",  
		Enabled:"enabled",  
		HintsInfo:"hints_info",  
		HintsAllWorked:"hints_all_worked",             
	}
	
// AllTenantProfile [...]		
type	AllTenantProfile	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ProfileID	int64	`gorm:"primaryKey;column:profile_id" json:"-"`			
ProfileName	string	`gorm:"column:profile_name" json:"profile_name"`			
FailedLoginAttempts	int64	`gorm:"column:failed_login_attempts" json:"failed_login_attempts"`			
PasswordLockTime	int64	`gorm:"column:password_lock_time" json:"password_lock_time"`			
PasswordVerifyFunction	string	`gorm:"column:password_verify_function" json:"password_verify_function"`			
PasswordLifeTime	int64	`gorm:"column:password_life_time" json:"password_life_time"`			
PasswordGraceTime	int64	`gorm:"column:password_grace_time" json:"password_grace_time"`			
PasswordReuseTime	int64	`gorm:"column:password_reuse_time" json:"password_reuse_time"`			
PasswordReuseMax	int64	`gorm:"column:password_reuse_max" json:"password_reuse_max"`			
InactiveAccountTime	int64	`gorm:"column:inactive_account_time" json:"inactive_account_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantProfile) TableName() string {
	return "__all_tenant_profile"
}
	

// AllTenantProfileColumns get sql column name.获取数据库列名
var AllTenantProfileColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ProfileID string
	ProfileName string
	FailedLoginAttempts string
	PasswordLockTime string
	PasswordVerifyFunction string
	PasswordLifeTime string
	PasswordGraceTime string
	PasswordReuseTime string
	PasswordReuseMax string
	InactiveAccountTime string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ProfileID:"profile_id",  
		ProfileName:"profile_name",  
		FailedLoginAttempts:"failed_login_attempts",  
		PasswordLockTime:"password_lock_time",  
		PasswordVerifyFunction:"password_verify_function",  
		PasswordLifeTime:"password_life_time",  
		PasswordGraceTime:"password_grace_time",  
		PasswordReuseTime:"password_reuse_time",  
		PasswordReuseMax:"password_reuse_max",  
		InactiveAccountTime:"inactive_account_time",             
	}
	
// AllTenantProfileHistory [...]		
type	AllTenantProfileHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ProfileID	int64	`gorm:"primaryKey;column:profile_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ProfileName	string	`gorm:"column:profile_name" json:"profile_name"`			
FailedLoginAttempts	int64	`gorm:"column:failed_login_attempts" json:"failed_login_attempts"`			
PasswordLockTime	int64	`gorm:"column:password_lock_time" json:"password_lock_time"`			
PasswordVerifyFunction	string	`gorm:"column:password_verify_function" json:"password_verify_function"`			
PasswordLifeTime	int64	`gorm:"column:password_life_time" json:"password_life_time"`			
PasswordGraceTime	int64	`gorm:"column:password_grace_time" json:"password_grace_time"`			
PasswordReuseTime	int64	`gorm:"column:password_reuse_time" json:"password_reuse_time"`			
PasswordReuseMax	int64	`gorm:"column:password_reuse_max" json:"password_reuse_max"`			
InactiveAccountTime	int64	`gorm:"column:inactive_account_time" json:"inactive_account_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantProfileHistory) TableName() string {
	return "__all_tenant_profile_history"
}
	

// AllTenantProfileHistoryColumns get sql column name.获取数据库列名
var AllTenantProfileHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	ProfileID string
	SchemaVersion string
	IsDeleted string
	ProfileName string
	FailedLoginAttempts string
	PasswordLockTime string
	PasswordVerifyFunction string
	PasswordLifeTime string
	PasswordGraceTime string
	PasswordReuseTime string
	PasswordReuseMax string
	InactiveAccountTime string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		ProfileID:"profile_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		ProfileName:"profile_name",  
		FailedLoginAttempts:"failed_login_attempts",  
		PasswordLockTime:"password_lock_time",  
		PasswordVerifyFunction:"password_verify_function",  
		PasswordLifeTime:"password_life_time",  
		PasswordGraceTime:"password_grace_time",  
		PasswordReuseTime:"password_reuse_time",  
		PasswordReuseMax:"password_reuse_max",  
		InactiveAccountTime:"inactive_account_time",             
	}
	
// AllTenantResourceUsage [...]		
type	AllTenantResourceUsage	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
ReportTime	time.Time	`gorm:"column:report_time" json:"report_time"`			
CPUQuota	float64	`gorm:"column:cpu_quota" json:"cpu_quota"`			
CPUQuotaUsed	float64	`gorm:"column:cpu_quota_used" json:"cpu_quota_used"`			
MemQuota	float64	`gorm:"column:mem_quota" json:"mem_quota"`			
MemQuotaUsed	float64	`gorm:"column:mem_quota_used" json:"mem_quota_used"`			
DiskQuota	float64	`gorm:"column:disk_quota" json:"disk_quota"`			
DiskQuotaUsed	float64	`gorm:"column:disk_quota_used" json:"disk_quota_used"`			
IopsQuota	float64	`gorm:"column:iops_quota" json:"iops_quota"`			
IopsQuotaUsed	float64	`gorm:"column:iops_quota_used" json:"iops_quota_used"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantResourceUsage) TableName() string {
	return "__all_tenant_resource_usage"
}
	

// AllTenantResourceUsageColumns get sql column name.获取数据库列名
var AllTenantResourceUsageColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	ReportTime string
	CPUQuota string
	CPUQuotaUsed string
	MemQuota string
	MemQuotaUsed string
	DiskQuota string
	DiskQuotaUsed string
	IopsQuota string
	IopsQuotaUsed string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ReportTime:"report_time",  
		CPUQuota:"cpu_quota",  
		CPUQuotaUsed:"cpu_quota_used",  
		MemQuota:"mem_quota",  
		MemQuotaUsed:"mem_quota_used",  
		DiskQuota:"disk_quota",  
		DiskQuotaUsed:"disk_quota_used",  
		IopsQuota:"iops_quota",  
		IopsQuotaUsed:"iops_quota_used",             
	}
	
// AllTenantRestorePgInfo [...]		
type	AllTenantRestorePgInfo	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
RestoreInfo	string	`gorm:"column:restore_info" json:"restore_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantRestorePgInfo) TableName() string {
	return "__all_tenant_restore_pg_info"
}
	

// AllTenantRestorePgInfoColumns get sql column name.获取数据库列名
var AllTenantRestorePgInfoColumns = struct { 
	GmtCreate string
	GmtModified string
	TableID string
	PartitionID string
	MacroBlockCount string
	FinishMacroBlockCount string
	PartitionCount string
	FinishPartitionCount string
	RestoreInfo string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		MacroBlockCount:"macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		RestoreInfo:"restore_info",             
	}
	
// AllTenantRoleGranteeMap [...]		
type	AllTenantRoleGranteeMap	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
RoleID	int64	`gorm:"primaryKey;column:role_id" json:"-"`			
AdminOption	int64	`gorm:"column:admin_option" json:"admin_option"`			
DisableFlag	int64	`gorm:"column:disable_flag" json:"disable_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantRoleGranteeMap) TableName() string {
	return "__all_tenant_role_grantee_map"
}
	

// AllTenantRoleGranteeMapColumns get sql column name.获取数据库列名
var AllTenantRoleGranteeMapColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	GranteeID string
	RoleID string
	AdminOption string
	DisableFlag string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		GranteeID:"grantee_id",  
		RoleID:"role_id",  
		AdminOption:"admin_option",  
		DisableFlag:"disable_flag",             
	}
	
// AllTenantRoleGranteeMapHistory [...]		
type	AllTenantRoleGranteeMapHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
RoleID	int64	`gorm:"primaryKey;column:role_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
AdminOption	int64	`gorm:"column:admin_option" json:"admin_option"`			
DisableFlag	int64	`gorm:"column:disable_flag" json:"disable_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantRoleGranteeMapHistory) TableName() string {
	return "__all_tenant_role_grantee_map_history"
}
	

// AllTenantRoleGranteeMapHistoryColumns get sql column name.获取数据库列名
var AllTenantRoleGranteeMapHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	GranteeID string
	RoleID string
	SchemaVersion string
	IsDeleted string
	AdminOption string
	DisableFlag string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		GranteeID:"grantee_id",  
		RoleID:"role_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		AdminOption:"admin_option",  
		DisableFlag:"disable_flag",             
	}
	
// AllTenantSecurityAudit [...]		
type	AllTenantSecurityAudit	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
AuditID	int64	`gorm:"primaryKey;column:audit_id" json:"-"`			
AuditType	uint64	`gorm:"column:audit_type" json:"audit_type"`			
OwnerID	uint64	`gorm:"column:owner_id" json:"owner_id"`			
OperationType	uint64	`gorm:"column:operation_type" json:"operation_type"`			
InSuccess	uint64	`gorm:"column:in_success" json:"in_success"`			
InFailure	uint64	`gorm:"column:in_failure" json:"in_failure"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantSecurityAudit) TableName() string {
	return "__all_tenant_security_audit"
}
	

// AllTenantSecurityAuditColumns get sql column name.获取数据库列名
var AllTenantSecurityAuditColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	AuditID string
	AuditType string
	OwnerID string
	OperationType string
	InSuccess string
	InFailure string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		AuditID:"audit_id",  
		AuditType:"audit_type",  
		OwnerID:"owner_id",  
		OperationType:"operation_type",  
		InSuccess:"in_success",  
		InFailure:"in_failure",             
	}
	
// AllTenantSecurityAuditHistory [...]		
type	AllTenantSecurityAuditHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
AuditID	int64	`gorm:"primaryKey;column:audit_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
AuditType	uint64	`gorm:"column:audit_type" json:"audit_type"`			
OwnerID	uint64	`gorm:"column:owner_id" json:"owner_id"`			
OperationType	uint64	`gorm:"column:operation_type" json:"operation_type"`			
InSuccess	uint64	`gorm:"column:in_success" json:"in_success"`			
InFailure	uint64	`gorm:"column:in_failure" json:"in_failure"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantSecurityAuditHistory) TableName() string {
	return "__all_tenant_security_audit_history"
}
	

// AllTenantSecurityAuditHistoryColumns get sql column name.获取数据库列名
var AllTenantSecurityAuditHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	AuditID string
	SchemaVersion string
	IsDeleted string
	AuditType string
	OwnerID string
	OperationType string
	InSuccess string
	InFailure string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		AuditID:"audit_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		AuditType:"audit_type",  
		OwnerID:"owner_id",  
		OperationType:"operation_type",  
		InSuccess:"in_success",  
		InFailure:"in_failure",             
	}
	
// AllTenantSecurityAuditRecord [...]		
type	AllTenantSecurityAuditRecord	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
RecordTimestampUs	time.Time	`gorm:"primaryKey;column:record_timestamp_us" json:"-"`			
UserID	uint64	`gorm:"column:user_id" json:"user_id"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
EffectiveUserID	uint64	`gorm:"column:effective_user_id" json:"effective_user_id"`			
EffectiveUserName	string	`gorm:"column:effective_user_name" json:"effective_user_name"`			
ClientIP	string	`gorm:"column:client_ip" json:"client_ip"`			
UserClientIP	string	`gorm:"column:user_client_ip" json:"user_client_ip"`			
ProxySessionID	uint64	`gorm:"column:proxy_session_id" json:"proxy_session_id"`			
SessionID	uint64	`gorm:"column:session_id" json:"session_id"`			
EntryID	uint64	`gorm:"column:entry_id" json:"entry_id"`			
StatementID	uint64	`gorm:"column:statement_id" json:"statement_id"`			
TransID	string	`gorm:"column:trans_id" json:"trans_id"`			
CommitVersion	int64	`gorm:"column:commit_version" json:"commit_version"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
DbID	uint64	`gorm:"column:db_id" json:"db_id"`			
CurDbID	uint64	`gorm:"column:cur_db_id" json:"cur_db_id"`			
SQLTimestampUs	time.Time	`gorm:"column:sql_timestamp_us" json:"sql_timestamp_us"`			
AuditID	uint64	`gorm:"column:audit_id" json:"audit_id"`			
AuditType	uint64	`gorm:"column:audit_type" json:"audit_type"`			
OperationType	uint64	`gorm:"column:operation_type" json:"operation_type"`			
ActionID	uint64	`gorm:"column:action_id" json:"action_id"`			
ReturnCode	int64	`gorm:"column:return_code" json:"return_code"`			
ObjOwnerName	string	`gorm:"column:obj_owner_name" json:"obj_owner_name"`			
ObjName	string	`gorm:"column:obj_name" json:"obj_name"`			
NewObjOwnerName	string	`gorm:"column:new_obj_owner_name" json:"new_obj_owner_name"`			
NewObjName	string	`gorm:"column:new_obj_name" json:"new_obj_name"`			
AuthPrivileges	string	`gorm:"column:auth_privileges" json:"auth_privileges"`			
AuthGrantee	string	`gorm:"column:auth_grantee" json:"auth_grantee"`			
LogoffLogicalRead	uint64	`gorm:"column:logoff_logical_read" json:"logoff_logical_read"`			
LogoffPhysicalRead	uint64	`gorm:"column:logoff_physical_read" json:"logoff_physical_read"`			
LogoffLogicalWrite	uint64	`gorm:"column:logoff_logical_write" json:"logoff_logical_write"`			
LogoffLockCount	uint64	`gorm:"column:logoff_lock_count" json:"logoff_lock_count"`			
LogoffDeadLock	string	`gorm:"column:logoff_dead_lock" json:"logoff_dead_lock"`			
LogoffCPUTimeUs	uint64	`gorm:"column:logoff_cpu_time_us" json:"logoff_cpu_time_us"`			
LogoffExecTimeUs	uint64	`gorm:"column:logoff_exec_time_us" json:"logoff_exec_time_us"`			
LogoffAliveTimeUs	uint64	`gorm:"column:logoff_alive_time_us" json:"logoff_alive_time_us"`			
CommentText	string	`gorm:"column:comment_text" json:"comment_text"`			
SQLBind	string	`gorm:"column:sql_bind" json:"sql_bind"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantSecurityAuditRecord) TableName() string {
	return "__all_tenant_security_audit_record"
}
	

// AllTenantSecurityAuditRecordColumns get sql column name.获取数据库列名
var AllTenantSecurityAuditRecordColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	SvrIP string
	SvrPort string
	RecordTimestampUs string
	UserID string
	UserName string
	EffectiveUserID string
	EffectiveUserName string
	ClientIP string
	UserClientIP string
	ProxySessionID string
	SessionID string
	EntryID string
	StatementID string
	TransID string
	CommitVersion string
	TraceID string
	DbID string
	CurDbID string
	SQLTimestampUs string
	AuditID string
	AuditType string
	OperationType string
	ActionID string
	ReturnCode string
	ObjOwnerName string
	ObjName string
	NewObjOwnerName string
	NewObjName string
	AuthPrivileges string
	AuthGrantee string
	LogoffLogicalRead string
	LogoffPhysicalRead string
	LogoffLogicalWrite string
	LogoffLockCount string
	LogoffDeadLock string
	LogoffCPUTimeUs string
	LogoffExecTimeUs string
	LogoffAliveTimeUs string
	CommentText string
	SQLBind string
	SQLText string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		RecordTimestampUs:"record_timestamp_us",  
		UserID:"user_id",  
		UserName:"user_name",  
		EffectiveUserID:"effective_user_id",  
		EffectiveUserName:"effective_user_name",  
		ClientIP:"client_ip",  
		UserClientIP:"user_client_ip",  
		ProxySessionID:"proxy_session_id",  
		SessionID:"session_id",  
		EntryID:"entry_id",  
		StatementID:"statement_id",  
		TransID:"trans_id",  
		CommitVersion:"commit_version",  
		TraceID:"trace_id",  
		DbID:"db_id",  
		CurDbID:"cur_db_id",  
		SQLTimestampUs:"sql_timestamp_us",  
		AuditID:"audit_id",  
		AuditType:"audit_type",  
		OperationType:"operation_type",  
		ActionID:"action_id",  
		ReturnCode:"return_code",  
		ObjOwnerName:"obj_owner_name",  
		ObjName:"obj_name",  
		NewObjOwnerName:"new_obj_owner_name",  
		NewObjName:"new_obj_name",  
		AuthPrivileges:"auth_privileges",  
		AuthGrantee:"auth_grantee",  
		LogoffLogicalRead:"logoff_logical_read",  
		LogoffPhysicalRead:"logoff_physical_read",  
		LogoffLogicalWrite:"logoff_logical_write",  
		LogoffLockCount:"logoff_lock_count",  
		LogoffDeadLock:"logoff_dead_lock",  
		LogoffCPUTimeUs:"logoff_cpu_time_us",  
		LogoffExecTimeUs:"logoff_exec_time_us",  
		LogoffAliveTimeUs:"logoff_alive_time_us",  
		CommentText:"comment_text",  
		SQLBind:"sql_bind",  
		SQLText:"sql_text",             
	}
	
// AllTenantSstableColumnChecksum [...]		
type	AllTenantSstableColumnChecksum	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DataTableID	int64	`gorm:"primaryKey;column:data_table_id" json:"-"`			
IndexID	int64	`gorm:"primaryKey;column:index_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SstableType	int64	`gorm:"primaryKey;column:sstable_type" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
ColumnChecksum	int64	`gorm:"column:column_checksum" json:"column_checksum"`			
ChecksumMethod	int64	`gorm:"column:checksum_method" json:"checksum_method"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
MajorVersion	int64	`gorm:"column:major_version" json:"major_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantSstableColumnChecksum) TableName() string {
	return "__all_tenant_sstable_column_checksum"
}
	

// AllTenantSstableColumnChecksumColumns get sql column name.获取数据库列名
var AllTenantSstableColumnChecksumColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	DataTableID string
	IndexID string
	PartitionID string
	SstableType string
	ColumnID string
	SvrIP string
	SvrPort string
	ColumnChecksum string
	ChecksumMethod string
	SnapshotVersion string
	ReplicaType string
	MajorVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		DataTableID:"data_table_id",  
		IndexID:"index_id",  
		PartitionID:"partition_id",  
		SstableType:"sstable_type",  
		ColumnID:"column_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ColumnChecksum:"column_checksum",  
		ChecksumMethod:"checksum_method",  
		SnapshotVersion:"snapshot_version",  
		ReplicaType:"replica_type",  
		MajorVersion:"major_version",             
	}
	
// AllTenantSysauth [...]		
type	AllTenantSysauth	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
PrivID	int64	`gorm:"primaryKey;column:priv_id" json:"-"`			
PrivOption	int64	`gorm:"column:priv_option" json:"priv_option"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantSysauth) TableName() string {
	return "__all_tenant_sysauth"
}
	

// AllTenantSysauthColumns get sql column name.获取数据库列名
var AllTenantSysauthColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	GranteeID string
	PrivID string
	PrivOption string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		GranteeID:"grantee_id",  
		PrivID:"priv_id",  
		PrivOption:"priv_option",             
	}
	
// AllTenantSysauthHistory [...]		
type	AllTenantSysauthHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
PrivID	int64	`gorm:"primaryKey;column:priv_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PrivOption	int64	`gorm:"column:priv_option" json:"priv_option"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantSysauthHistory) TableName() string {
	return "__all_tenant_sysauth_history"
}
	

// AllTenantSysauthHistoryColumns get sql column name.获取数据库列名
var AllTenantSysauthHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	GranteeID string
	PrivID string
	SchemaVersion string
	IsDeleted string
	PrivOption string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		GranteeID:"grantee_id",  
		PrivID:"priv_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		PrivOption:"priv_option",             
	}
	
// AllTenantTablespace [...]		
type	AllTenantTablespace	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TablespaceID	int64	`gorm:"primaryKey;column:tablespace_id" json:"-"`			
TablespaceName	string	`gorm:"column:tablespace_name" json:"tablespace_name"`			
EncryptionName	string	`gorm:"column:encryption_name" json:"encryption_name"`			
EncryptKey	[]byte	`gorm:"column:encrypt_key" json:"encrypt_key"`			
MasterKeyID	uint64	`gorm:"column:master_key_id" json:"master_key_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantTablespace) TableName() string {
	return "__all_tenant_tablespace"
}
	

// AllTenantTablespaceColumns get sql column name.获取数据库列名
var AllTenantTablespaceColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TablespaceID string
	TablespaceName string
	EncryptionName string
	EncryptKey string
	MasterKeyID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TablespaceID:"tablespace_id",  
		TablespaceName:"tablespace_name",  
		EncryptionName:"encryption_name",  
		EncryptKey:"encrypt_key",  
		MasterKeyID:"master_key_id",             
	}
	
// AllTenantTablespaceHistory [...]		
type	AllTenantTablespaceHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TablespaceID	int64	`gorm:"primaryKey;column:tablespace_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TablespaceName	string	`gorm:"column:tablespace_name" json:"tablespace_name"`			
EncryptionName	string	`gorm:"column:encryption_name" json:"encryption_name"`			
EncryptKey	[]byte	`gorm:"column:encrypt_key" json:"encrypt_key"`			
MasterKeyID	uint64	`gorm:"column:master_key_id" json:"master_key_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantTablespaceHistory) TableName() string {
	return "__all_tenant_tablespace_history"
}
	

// AllTenantTablespaceHistoryColumns get sql column name.获取数据库列名
var AllTenantTablespaceHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TablespaceID string
	SchemaVersion string
	IsDeleted string
	TablespaceName string
	EncryptionName string
	EncryptKey string
	MasterKeyID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TablespaceID:"tablespace_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		TablespaceName:"tablespace_name",  
		EncryptionName:"encryption_name",  
		EncryptKey:"encrypt_key",  
		MasterKeyID:"master_key_id",             
	}
	
// AllTenantTimeZone [...]		
type	AllTenantTimeZone	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TimeZoneID	int64	`gorm:"primaryKey;column:time_zone_id" json:"-"`			
UseLeapSeconds	string	`gorm:"column:use_leap_seconds" json:"use_leap_seconds"`			
Version	int64	`gorm:"column:version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantTimeZone) TableName() string {
	return "__all_tenant_time_zone"
}
	

// AllTenantTimeZoneColumns get sql column name.获取数据库列名
var AllTenantTimeZoneColumns = struct { 
	TenantID string
	TimeZoneID string
	UseLeapSeconds string
	Version string    
	}{ 
		TenantID:"tenant_id",  
		TimeZoneID:"time_zone_id",  
		UseLeapSeconds:"use_leap_seconds",  
		Version:"version",             
	}
	
// AllTenantTimeZoneName [...]		
type	AllTenantTimeZoneName	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
TimeZoneID	int64	`gorm:"column:time_zone_id" json:"time_zone_id"`			
Version	int64	`gorm:"column:version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantTimeZoneName) TableName() string {
	return "__all_tenant_time_zone_name"
}
	

// AllTenantTimeZoneNameColumns get sql column name.获取数据库列名
var AllTenantTimeZoneNameColumns = struct { 
	TenantID string
	Name string
	TimeZoneID string
	Version string    
	}{ 
		TenantID:"tenant_id",  
		Name:"name",  
		TimeZoneID:"time_zone_id",  
		Version:"version",             
	}
	
// AllTenantTimeZoneTransition [...]		
type	AllTenantTimeZoneTransition	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TimeZoneID	int64	`gorm:"primaryKey;column:time_zone_id" json:"-"`			
TransitionTime	int64	`gorm:"primaryKey;column:transition_time" json:"-"`			
TransitionTypeID	int64	`gorm:"column:transition_type_id" json:"transition_type_id"`			
Version	int64	`gorm:"column:version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantTimeZoneTransition) TableName() string {
	return "__all_tenant_time_zone_transition"
}
	

// AllTenantTimeZoneTransitionColumns get sql column name.获取数据库列名
var AllTenantTimeZoneTransitionColumns = struct { 
	TenantID string
	TimeZoneID string
	TransitionTime string
	TransitionTypeID string
	Version string    
	}{ 
		TenantID:"tenant_id",  
		TimeZoneID:"time_zone_id",  
		TransitionTime:"transition_time",  
		TransitionTypeID:"transition_type_id",  
		Version:"version",             
	}
	
// AllTenantTimeZoneTransitionType [...]		
type	AllTenantTimeZoneTransitionType	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TimeZoneID	int64	`gorm:"primaryKey;column:time_zone_id" json:"-"`			
TransitionTypeID	int64	`gorm:"primaryKey;column:transition_type_id" json:"-"`			
Offset	int64	`gorm:"column:offset" json:"offset"`			
IsDst	int64	`gorm:"column:is_dst" json:"is_dst"`			
Abbreviation	string	`gorm:"column:abbreviation" json:"abbreviation"`			
Version	int64	`gorm:"column:version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantTimeZoneTransitionType) TableName() string {
	return "__all_tenant_time_zone_transition_type"
}
	

// AllTenantTimeZoneTransitionTypeColumns get sql column name.获取数据库列名
var AllTenantTimeZoneTransitionTypeColumns = struct { 
	TenantID string
	TimeZoneID string
	TransitionTypeID string
	Offset string
	IsDst string
	Abbreviation string
	Version string    
	}{ 
		TenantID:"tenant_id",  
		TimeZoneID:"time_zone_id",  
		TransitionTypeID:"transition_type_id",  
		Offset:"offset",  
		IsDst:"is_dst",  
		Abbreviation:"abbreviation",  
		Version:"version",             
	}
	
// AllTenantTrigger [...]		
type	AllTenantTrigger	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TriggerID	int64	`gorm:"primaryKey;column:trigger_id" json:"-"`			
TriggerName	string	`gorm:"column:trigger_name" json:"trigger_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
TriggerType	int64	`gorm:"column:trigger_type" json:"trigger_type"`			
TriggerEvents	int64	`gorm:"column:trigger_events" json:"trigger_events"`			
TimingPoints	int64	`gorm:"column:timing_points" json:"timing_points"`			
BaseObjectType	int64	`gorm:"column:base_object_type" json:"base_object_type"`			
BaseObjectID	int64	`gorm:"column:base_object_id" json:"base_object_id"`			
TriggerFlags	int64	`gorm:"column:trigger_flags" json:"trigger_flags"`			
UpdateColumns	string	`gorm:"column:update_columns" json:"update_columns"`			
RefOldName	string	`gorm:"column:ref_old_name" json:"ref_old_name"`			
RefNewName	string	`gorm:"column:ref_new_name" json:"ref_new_name"`			
RefParentName	string	`gorm:"column:ref_parent_name" json:"ref_parent_name"`			
WhenCondition	string	`gorm:"column:when_condition" json:"when_condition"`			
TriggerBody	string	`gorm:"column:trigger_body" json:"trigger_body"`			
PackageSpecSource	string	`gorm:"column:package_spec_source" json:"package_spec_source"`			
PackageBodySource	string	`gorm:"column:package_body_source" json:"package_body_source"`			
PackageFlag	int64	`gorm:"column:package_flag" json:"package_flag"`			
PackageCompFlag	int64	`gorm:"column:package_comp_flag" json:"package_comp_flag"`			
PackageExecEnv	string	`gorm:"column:package_exec_env" json:"package_exec_env"`			
SQLMode	int64	`gorm:"column:sql_mode" json:"sql_mode"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantTrigger) TableName() string {
	return "__all_tenant_trigger"
}
	

// AllTenantTriggerColumns get sql column name.获取数据库列名
var AllTenantTriggerColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TriggerID string
	TriggerName string
	DatabaseID string
	OwnerID string
	SchemaVersion string
	TriggerType string
	TriggerEvents string
	TimingPoints string
	BaseObjectType string
	BaseObjectID string
	TriggerFlags string
	UpdateColumns string
	RefOldName string
	RefNewName string
	RefParentName string
	WhenCondition string
	TriggerBody string
	PackageSpecSource string
	PackageBodySource string
	PackageFlag string
	PackageCompFlag string
	PackageExecEnv string
	SQLMode string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TriggerID:"trigger_id",  
		TriggerName:"trigger_name",  
		DatabaseID:"database_id",  
		OwnerID:"owner_id",  
		SchemaVersion:"schema_version",  
		TriggerType:"trigger_type",  
		TriggerEvents:"trigger_events",  
		TimingPoints:"timing_points",  
		BaseObjectType:"base_object_type",  
		BaseObjectID:"base_object_id",  
		TriggerFlags:"trigger_flags",  
		UpdateColumns:"update_columns",  
		RefOldName:"ref_old_name",  
		RefNewName:"ref_new_name",  
		RefParentName:"ref_parent_name",  
		WhenCondition:"when_condition",  
		TriggerBody:"trigger_body",  
		PackageSpecSource:"package_spec_source",  
		PackageBodySource:"package_body_source",  
		PackageFlag:"package_flag",  
		PackageCompFlag:"package_comp_flag",  
		PackageExecEnv:"package_exec_env",  
		SQLMode:"sql_mode",             
	}
	
// AllTenantTriggerHistory [...]		
type	AllTenantTriggerHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TriggerID	int64	`gorm:"primaryKey;column:trigger_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TriggerName	string	`gorm:"column:trigger_name" json:"trigger_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
TriggerType	int64	`gorm:"column:trigger_type" json:"trigger_type"`			
TriggerEvents	int64	`gorm:"column:trigger_events" json:"trigger_events"`			
TimingPoints	int64	`gorm:"column:timing_points" json:"timing_points"`			
BaseObjectType	int64	`gorm:"column:base_object_type" json:"base_object_type"`			
BaseObjectID	int64	`gorm:"column:base_object_id" json:"base_object_id"`			
TriggerFlags	int64	`gorm:"column:trigger_flags" json:"trigger_flags"`			
UpdateColumns	string	`gorm:"column:update_columns" json:"update_columns"`			
RefOldName	string	`gorm:"column:ref_old_name" json:"ref_old_name"`			
RefNewName	string	`gorm:"column:ref_new_name" json:"ref_new_name"`			
RefParentName	string	`gorm:"column:ref_parent_name" json:"ref_parent_name"`			
WhenCondition	string	`gorm:"column:when_condition" json:"when_condition"`			
TriggerBody	string	`gorm:"column:trigger_body" json:"trigger_body"`			
PackageSpecSource	string	`gorm:"column:package_spec_source" json:"package_spec_source"`			
PackageBodySource	string	`gorm:"column:package_body_source" json:"package_body_source"`			
PackageFlag	int64	`gorm:"column:package_flag" json:"package_flag"`			
PackageCompFlag	int64	`gorm:"column:package_comp_flag" json:"package_comp_flag"`			
PackageExecEnv	string	`gorm:"column:package_exec_env" json:"package_exec_env"`			
SQLMode	int64	`gorm:"column:sql_mode" json:"sql_mode"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantTriggerHistory) TableName() string {
	return "__all_tenant_trigger_history"
}
	

// AllTenantTriggerHistoryColumns get sql column name.获取数据库列名
var AllTenantTriggerHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TriggerID string
	SchemaVersion string
	IsDeleted string
	TriggerName string
	DatabaseID string
	OwnerID string
	TriggerType string
	TriggerEvents string
	TimingPoints string
	BaseObjectType string
	BaseObjectID string
	TriggerFlags string
	UpdateColumns string
	RefOldName string
	RefNewName string
	RefParentName string
	WhenCondition string
	TriggerBody string
	PackageSpecSource string
	PackageBodySource string
	PackageFlag string
	PackageCompFlag string
	PackageExecEnv string
	SQLMode string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TriggerID:"trigger_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		TriggerName:"trigger_name",  
		DatabaseID:"database_id",  
		OwnerID:"owner_id",  
		TriggerType:"trigger_type",  
		TriggerEvents:"trigger_events",  
		TimingPoints:"timing_points",  
		BaseObjectType:"base_object_type",  
		BaseObjectID:"base_object_id",  
		TriggerFlags:"trigger_flags",  
		UpdateColumns:"update_columns",  
		RefOldName:"ref_old_name",  
		RefNewName:"ref_new_name",  
		RefParentName:"ref_parent_name",  
		WhenCondition:"when_condition",  
		TriggerBody:"trigger_body",  
		PackageSpecSource:"package_spec_source",  
		PackageBodySource:"package_body_source",  
		PackageFlag:"package_flag",  
		PackageCompFlag:"package_comp_flag",  
		PackageExecEnv:"package_exec_env",  
		SQLMode:"sql_mode",             
	}
	
// AllTenantUserFailedLoginStat [...]		
type	AllTenantUserFailedLoginStat	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
FailedLoginAttempts	int64	`gorm:"column:failed_login_attempts" json:"failed_login_attempts"`			
LastFailedLoginSvrIP	string	`gorm:"column:last_failed_login_svr_ip" json:"last_failed_login_svr_ip"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTenantUserFailedLoginStat) TableName() string {
	return "__all_tenant_user_failed_login_stat"
}
	

// AllTenantUserFailedLoginStatColumns get sql column name.获取数据库列名
var AllTenantUserFailedLoginStatColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	UserID string
	UserName string
	FailedLoginAttempts string
	LastFailedLoginSvrIP string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		UserID:"user_id",  
		UserName:"user_name",  
		FailedLoginAttempts:"failed_login_attempts",  
		LastFailedLoginSvrIP:"last_failed_login_svr_ip",             
	}
	
// AllTimeZone [...]		
type	AllTimeZone	struct {		
TimeZoneID	int64	`gorm:"primaryKey;column:Time_zone_id" json:"-"`			
UseLeapSeconds	string	`gorm:"column:Use_leap_seconds" json:"use_leap_seconds"`			
Version	int64	`gorm:"column:Version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTimeZone) TableName() string {
	return "__all_time_zone"
}
	

// AllTimeZoneColumns get sql column name.获取数据库列名
var AllTimeZoneColumns = struct { 
	TimeZoneID string
	UseLeapSeconds string
	Version string    
	}{ 
		TimeZoneID:"Time_zone_id",  
		UseLeapSeconds:"Use_leap_seconds",  
		Version:"Version",             
	}
	
// AllTimeZoneName [...]		
type	AllTimeZoneName	struct {		
Name	string	`gorm:"primaryKey;column:Name" json:"-"`			
TimeZoneID	int64	`gorm:"column:Time_zone_id" json:"time_zone_id"`			
Version	int64	`gorm:"column:Version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTimeZoneName) TableName() string {
	return "__all_time_zone_name"
}
	

// AllTimeZoneNameColumns get sql column name.获取数据库列名
var AllTimeZoneNameColumns = struct { 
	Name string
	TimeZoneID string
	Version string    
	}{ 
		Name:"Name",  
		TimeZoneID:"Time_zone_id",  
		Version:"Version",             
	}
	
// AllTimeZoneTransition [...]		
type	AllTimeZoneTransition	struct {		
TimeZoneID	int64	`gorm:"primaryKey;column:Time_zone_id" json:"-"`			
TransitionTime	int64	`gorm:"primaryKey;column:Transition_time" json:"-"`			
TransitionTypeID	int64	`gorm:"column:Transition_type_id" json:"transition_type_id"`			
Version	int64	`gorm:"column:Version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTimeZoneTransition) TableName() string {
	return "__all_time_zone_transition"
}
	

// AllTimeZoneTransitionColumns get sql column name.获取数据库列名
var AllTimeZoneTransitionColumns = struct { 
	TimeZoneID string
	TransitionTime string
	TransitionTypeID string
	Version string    
	}{ 
		TimeZoneID:"Time_zone_id",  
		TransitionTime:"Transition_time",  
		TransitionTypeID:"Transition_type_id",  
		Version:"Version",             
	}
	
// AllTimeZoneTransitionType [...]		
type	AllTimeZoneTransitionType	struct {		
TimeZoneID	int64	`gorm:"primaryKey;column:Time_zone_id" json:"-"`			
TransitionTypeID	int64	`gorm:"primaryKey;column:Transition_type_id" json:"-"`			
Offset	int64	`gorm:"column:Offset" json:"offset"`			
IsDst	int64	`gorm:"column:Is_DST" json:"is_dst"`			
Abbreviation	string	`gorm:"column:Abbreviation" json:"abbreviation"`			
Version	int64	`gorm:"column:Version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTimeZoneTransitionType) TableName() string {
	return "__all_time_zone_transition_type"
}
	

// AllTimeZoneTransitionTypeColumns get sql column name.获取数据库列名
var AllTimeZoneTransitionTypeColumns = struct { 
	TimeZoneID string
	TransitionTypeID string
	Offset string
	IsDst string
	Abbreviation string
	Version string    
	}{ 
		TimeZoneID:"Time_zone_id",  
		TransitionTypeID:"Transition_type_id",  
		Offset:"Offset",  
		IsDst:"Is_DST",  
		Abbreviation:"Abbreviation",  
		Version:"Version",             
	}
	
// AllType [...]		
type	AllType	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TypeID	int64	`gorm:"primaryKey;column:type_id" json:"-"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
Typecode	int64	`gorm:"column:typecode" json:"typecode"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
Attributes	int64	`gorm:"column:attributes" json:"attributes"`			
Methods	int64	`gorm:"column:methods" json:"methods"`			
Hiddenmethods	int64	`gorm:"column:hiddenmethods" json:"hiddenmethods"`			
Supertypes	int64	`gorm:"column:supertypes" json:"supertypes"`			
Subtypes	int64	`gorm:"column:subtypes" json:"subtypes"`			
Externtype	int64	`gorm:"column:externtype" json:"externtype"`			
Externname	string	`gorm:"column:externname" json:"externname"`			
Helperclassname	string	`gorm:"column:helperclassname" json:"helperclassname"`			
LocalAttrs	int64	`gorm:"column:local_attrs" json:"local_attrs"`			
LocalMethods	int64	`gorm:"column:local_methods" json:"local_methods"`			
Supertypeid	int64	`gorm:"column:supertypeid" json:"supertypeid"`			
TypeName	string	`gorm:"column:type_name" json:"type_name"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllType) TableName() string {
	return "__all_type"
}
	

// AllTypeColumns get sql column name.获取数据库列名
var AllTypeColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TypeID string
	DatabaseID string
	SchemaVersion string
	Typecode string
	Properties string
	Attributes string
	Methods string
	Hiddenmethods string
	Supertypes string
	Subtypes string
	Externtype string
	Externname string
	Helperclassname string
	LocalAttrs string
	LocalMethods string
	Supertypeid string
	TypeName string
	PackageID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TypeID:"type_id",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		Typecode:"typecode",  
		Properties:"properties",  
		Attributes:"attributes",  
		Methods:"methods",  
		Hiddenmethods:"hiddenmethods",  
		Supertypes:"supertypes",  
		Subtypes:"subtypes",  
		Externtype:"externtype",  
		Externname:"externname",  
		Helperclassname:"helperclassname",  
		LocalAttrs:"local_attrs",  
		LocalMethods:"local_methods",  
		Supertypeid:"supertypeid",  
		TypeName:"type_name",  
		PackageID:"package_id",             
	}
	
// AllTypeAttr [...]		
type	AllTypeAttr	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TypeID	int64	`gorm:"primaryKey;column:type_id" json:"-"`			
Attribute	int64	`gorm:"primaryKey;column:attribute" json:"-"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
TypeAttrID	int64	`gorm:"column:type_attr_id" json:"type_attr_id"`			
Name	string	`gorm:"column:name" json:"name"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
Externname	string	`gorm:"column:externname" json:"externname"`			
Xflags	int64	`gorm:"column:xflags" json:"xflags"`			
Setter	int64	`gorm:"column:setter" json:"setter"`			
Getter	int64	`gorm:"column:getter" json:"getter"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTypeAttr) TableName() string {
	return "__all_type_attr"
}
	

// AllTypeAttrColumns get sql column name.获取数据库列名
var AllTypeAttrColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TypeID string
	Attribute string
	SchemaVersion string
	TypeAttrID string
	Name string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	Externname string
	Xflags string
	Setter string
	Getter string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TypeID:"type_id",  
		Attribute:"attribute",  
		SchemaVersion:"schema_version",  
		TypeAttrID:"type_attr_id",  
		Name:"name",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		Externname:"externname",  
		Xflags:"xflags",  
		Setter:"setter",  
		Getter:"getter",             
	}
	
// AllTypeAttrHistory [...]		
type	AllTypeAttrHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TypeID	int64	`gorm:"primaryKey;column:type_id" json:"-"`			
Attribute	int64	`gorm:"primaryKey;column:attribute" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TypeAttrID	int64	`gorm:"column:type_attr_id" json:"type_attr_id"`			
Name	string	`gorm:"column:name" json:"name"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
Externname	string	`gorm:"column:externname" json:"externname"`			
Xflags	int64	`gorm:"column:xflags" json:"xflags"`			
Setter	int64	`gorm:"column:setter" json:"setter"`			
Getter	int64	`gorm:"column:getter" json:"getter"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTypeAttrHistory) TableName() string {
	return "__all_type_attr_history"
}
	

// AllTypeAttrHistoryColumns get sql column name.获取数据库列名
var AllTypeAttrHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TypeID string
	Attribute string
	SchemaVersion string
	IsDeleted string
	TypeAttrID string
	Name string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	Externname string
	Xflags string
	Setter string
	Getter string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TypeID:"type_id",  
		Attribute:"attribute",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		TypeAttrID:"type_attr_id",  
		Name:"name",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		Externname:"externname",  
		Xflags:"xflags",  
		Setter:"setter",  
		Getter:"getter",             
	}
	
// AllTypeHistory [...]		
type	AllTypeHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TypeID	int64	`gorm:"primaryKey;column:type_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
Typecode	int64	`gorm:"column:typecode" json:"typecode"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
Attributes	int64	`gorm:"column:attributes" json:"attributes"`			
Methods	int64	`gorm:"column:methods" json:"methods"`			
Hiddenmethods	int64	`gorm:"column:hiddenmethods" json:"hiddenmethods"`			
Supertypes	int64	`gorm:"column:supertypes" json:"supertypes"`			
Subtypes	int64	`gorm:"column:subtypes" json:"subtypes"`			
Externtype	int64	`gorm:"column:externtype" json:"externtype"`			
Externname	string	`gorm:"column:externname" json:"externname"`			
Helperclassname	string	`gorm:"column:helperclassname" json:"helperclassname"`			
LocalAttrs	int64	`gorm:"column:local_attrs" json:"local_attrs"`			
LocalMethods	int64	`gorm:"column:local_methods" json:"local_methods"`			
Supertypeid	int64	`gorm:"column:supertypeid" json:"supertypeid"`			
TypeName	string	`gorm:"column:type_name" json:"type_name"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllTypeHistory) TableName() string {
	return "__all_type_history"
}
	

// AllTypeHistoryColumns get sql column name.获取数据库列名
var AllTypeHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	TypeID string
	SchemaVersion string
	IsDeleted string
	DatabaseID string
	Typecode string
	Properties string
	Attributes string
	Methods string
	Hiddenmethods string
	Supertypes string
	Subtypes string
	Externtype string
	Externname string
	Helperclassname string
	LocalAttrs string
	LocalMethods string
	Supertypeid string
	TypeName string
	PackageID string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		TypeID:"type_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		Typecode:"typecode",  
		Properties:"properties",  
		Attributes:"attributes",  
		Methods:"methods",  
		Hiddenmethods:"hiddenmethods",  
		Supertypes:"supertypes",  
		Subtypes:"subtypes",  
		Externtype:"externtype",  
		Externname:"externname",  
		Helperclassname:"helperclassname",  
		LocalAttrs:"local_attrs",  
		LocalMethods:"local_methods",  
		Supertypeid:"supertypeid",  
		TypeName:"type_name",  
		PackageID:"package_id",             
	}
	
// AllUnit [...]		
type	AllUnit	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
UnitID	int64	`gorm:"primaryKey;column:unit_id" json:"-"`			
ResourcePoolID	int64	`gorm:"column:resource_pool_id" json:"resource_pool_id"`			
GroupID	int64	`gorm:"column:group_id" json:"group_id"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
MigrateFromSvrIP	string	`gorm:"column:migrate_from_svr_ip" json:"migrate_from_svr_ip"`			
MigrateFromSvrPort	int64	`gorm:"column:migrate_from_svr_port" json:"migrate_from_svr_port"`			
ManualMigrate	int8	`gorm:"column:manual_migrate" json:"manual_migrate"`			
Status	string	`gorm:"column:status" json:"status"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllUnit) TableName() string {
	return "__all_unit"
}
	

// AllUnitColumns get sql column name.获取数据库列名
var AllUnitColumns = struct { 
	GmtCreate string
	GmtModified string
	UnitID string
	ResourcePoolID string
	GroupID string
	Zone string
	SvrIP string
	SvrPort string
	MigrateFromSvrIP string
	MigrateFromSvrPort string
	ManualMigrate string
	Status string
	ReplicaType string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		UnitID:"unit_id",  
		ResourcePoolID:"resource_pool_id",  
		GroupID:"group_id",  
		Zone:"zone",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		MigrateFromSvrIP:"migrate_from_svr_ip",  
		MigrateFromSvrPort:"migrate_from_svr_port",  
		ManualMigrate:"manual_migrate",  
		Status:"status",  
		ReplicaType:"replica_type",             
	}
	
// AllUnitConfig [...]		
type	AllUnitConfig	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
UnitConfigID	int64	`gorm:"primaryKey;column:unit_config_id" json:"-"`			
Name	string	`gorm:"column:name" json:"name"`			
MaxCPU	float64	`gorm:"column:max_cpu" json:"max_cpu"`			
MinCPU	float64	`gorm:"column:min_cpu" json:"min_cpu"`			
MaxMemory	int64	`gorm:"column:max_memory" json:"max_memory"`			
MinMemory	int64	`gorm:"column:min_memory" json:"min_memory"`			
MaxIops	int64	`gorm:"column:max_iops" json:"max_iops"`			
MinIops	int64	`gorm:"column:min_iops" json:"min_iops"`			
MaxDiskSize	int64	`gorm:"column:max_disk_size" json:"max_disk_size"`			
MaxSessionNum	int64	`gorm:"column:max_session_num" json:"max_session_num"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllUnitConfig) TableName() string {
	return "__all_unit_config"
}
	

// AllUnitConfigColumns get sql column name.获取数据库列名
var AllUnitConfigColumns = struct { 
	GmtCreate string
	GmtModified string
	UnitConfigID string
	Name string
	MaxCPU string
	MinCPU string
	MaxMemory string
	MinMemory string
	MaxIops string
	MinIops string
	MaxDiskSize string
	MaxSessionNum string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		UnitConfigID:"unit_config_id",  
		Name:"name",  
		MaxCPU:"max_cpu",  
		MinCPU:"min_cpu",  
		MaxMemory:"max_memory",  
		MinMemory:"min_memory",  
		MaxIops:"max_iops",  
		MinIops:"min_iops",  
		MaxDiskSize:"max_disk_size",  
		MaxSessionNum:"max_session_num",             
	}
	
// AllUnitLoadHistory [...]		
type	AllUnitLoadHistory	struct {		
GmtCreate	time.Time	`gorm:"primaryKey;column:gmt_create" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
Load	float64	`gorm:"column:load" json:"load"`			
DiskUsageRate	float64	`gorm:"column:disk_usage_rate" json:"disk_usage_rate"`			
MemoryUsageRate	float64	`gorm:"column:memory_usage_rate" json:"memory_usage_rate"`			
CPUUsageRate	float64	`gorm:"column:cpu_usage_rate" json:"cpu_usage_rate"`			
IopsUsageRate	float64	`gorm:"column:iops_usage_rate" json:"iops_usage_rate"`			
DiskWeight	float64	`gorm:"column:disk_weight" json:"disk_weight"`			
MemoryWeight	float64	`gorm:"column:memory_weight" json:"memory_weight"`			
CPUWeight	float64	`gorm:"column:cpu_weight" json:"cpu_weight"`			
IopsWeight	float64	`gorm:"column:iops_weight" json:"iops_weight"`			
RsSvrIP	string	`gorm:"column:rs_svr_ip" json:"rs_svr_ip"`			
RsSvrPort	int64	`gorm:"column:rs_svr_port" json:"rs_svr_port"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllUnitLoadHistory) TableName() string {
	return "__all_unit_load_history"
}
	

// AllUnitLoadHistoryColumns get sql column name.获取数据库列名
var AllUnitLoadHistoryColumns = struct { 
	GmtCreate string
	TenantID string
	Zone string
	SvrIP string
	SvrPort string
	UnitID string
	Load string
	DiskUsageRate string
	MemoryUsageRate string
	CPUUsageRate string
	IopsUsageRate string
	DiskWeight string
	MemoryWeight string
	CPUWeight string
	IopsWeight string
	RsSvrIP string
	RsSvrPort string    
	}{ 
		GmtCreate:"gmt_create",  
		TenantID:"tenant_id",  
		Zone:"zone",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		UnitID:"unit_id",  
		Load:"load",  
		DiskUsageRate:"disk_usage_rate",  
		MemoryUsageRate:"memory_usage_rate",  
		CPUUsageRate:"cpu_usage_rate",  
		IopsUsageRate:"iops_usage_rate",  
		DiskWeight:"disk_weight",  
		MemoryWeight:"memory_weight",  
		CPUWeight:"cpu_weight",  
		IopsWeight:"iops_weight",  
		RsSvrIP:"rs_svr_ip",  
		RsSvrPort:"rs_svr_port",             
	}
	
// AllUser [...]		
type	AllUser	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
Host	string	`gorm:"column:host" json:"host"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
Info	string	`gorm:"column:info" json:"info"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
PrivShowDb	int64	`gorm:"column:priv_show_db" json:"priv_show_db"`			
PrivCreateUser	int64	`gorm:"column:priv_create_user" json:"priv_create_user"`			
PrivSuper	int64	`gorm:"column:priv_super" json:"priv_super"`			
IsLocked	int64	`gorm:"column:is_locked" json:"is_locked"`			
PrivProcess	int64	`gorm:"column:priv_process" json:"priv_process"`			
PrivCreateSynonym	int64	`gorm:"column:priv_create_synonym" json:"priv_create_synonym"`			
SslType	int64	`gorm:"column:ssl_type" json:"ssl_type"`			
SslCipher	string	`gorm:"column:ssl_cipher" json:"ssl_cipher"`			
X509Issuer	string	`gorm:"column:x509_issuer" json:"x509_issuer"`			
X509Subject	string	`gorm:"column:x509_subject" json:"x509_subject"`			
Type	int64	`gorm:"column:type" json:"type"`			
ProfileID	int64	`gorm:"column:profile_id" json:"profile_id"`			
PasswordLastChanged	time.Time	`gorm:"column:password_last_changed" json:"password_last_changed"`			
PrivFile	int64	`gorm:"column:priv_file" json:"priv_file"`			
PrivAlterTenant	int64	`gorm:"column:priv_alter_tenant" json:"priv_alter_tenant"`			
PrivAlterSystem	int64	`gorm:"column:priv_alter_system" json:"priv_alter_system"`			
PrivCreateResourcePool	int64	`gorm:"column:priv_create_resource_pool" json:"priv_create_resource_pool"`			
PrivCreateResourceUnit	int64	`gorm:"column:priv_create_resource_unit" json:"priv_create_resource_unit"`			
MaxConnections	int64	`gorm:"column:max_connections" json:"max_connections"`			
MaxUserConnections	int64	`gorm:"column:max_user_connections" json:"max_user_connections"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllUser) TableName() string {
	return "__all_user"
}
	

// AllUserColumns get sql column name.获取数据库列名
var AllUserColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	UserID string
	UserName string
	Host string
	Passwd string
	Info string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string
	PrivShowDb string
	PrivCreateUser string
	PrivSuper string
	IsLocked string
	PrivProcess string
	PrivCreateSynonym string
	SslType string
	SslCipher string
	X509Issuer string
	X509Subject string
	Type string
	ProfileID string
	PasswordLastChanged string
	PrivFile string
	PrivAlterTenant string
	PrivAlterSystem string
	PrivCreateResourcePool string
	PrivCreateResourceUnit string
	MaxConnections string
	MaxUserConnections string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		UserID:"user_id",  
		UserName:"user_name",  
		Host:"host",  
		Passwd:"passwd",  
		Info:"info",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",  
		PrivShowDb:"priv_show_db",  
		PrivCreateUser:"priv_create_user",  
		PrivSuper:"priv_super",  
		IsLocked:"is_locked",  
		PrivProcess:"priv_process",  
		PrivCreateSynonym:"priv_create_synonym",  
		SslType:"ssl_type",  
		SslCipher:"ssl_cipher",  
		X509Issuer:"x509_issuer",  
		X509Subject:"x509_subject",  
		Type:"type",  
		ProfileID:"profile_id",  
		PasswordLastChanged:"password_last_changed",  
		PrivFile:"priv_file",  
		PrivAlterTenant:"priv_alter_tenant",  
		PrivAlterSystem:"priv_alter_system",  
		PrivCreateResourcePool:"priv_create_resource_pool",  
		PrivCreateResourceUnit:"priv_create_resource_unit",  
		MaxConnections:"max_connections",  
		MaxUserConnections:"max_user_connections",             
	}
	
// AllUserHistory [...]		
type	AllUserHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
Host	string	`gorm:"column:host" json:"host"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
Info	string	`gorm:"column:info" json:"info"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
PrivShowDb	int64	`gorm:"column:priv_show_db" json:"priv_show_db"`			
PrivCreateUser	int64	`gorm:"column:priv_create_user" json:"priv_create_user"`			
PrivSuper	int64	`gorm:"column:priv_super" json:"priv_super"`			
IsLocked	int64	`gorm:"column:is_locked" json:"is_locked"`			
PrivProcess	int64	`gorm:"column:priv_process" json:"priv_process"`			
PrivCreateSynonym	int64	`gorm:"column:priv_create_synonym" json:"priv_create_synonym"`			
SslType	int64	`gorm:"column:ssl_type" json:"ssl_type"`			
SslCipher	string	`gorm:"column:ssl_cipher" json:"ssl_cipher"`			
X509Issuer	string	`gorm:"column:x509_issuer" json:"x509_issuer"`			
X509Subject	string	`gorm:"column:x509_subject" json:"x509_subject"`			
Type	int64	`gorm:"column:type" json:"type"`			
ProfileID	int64	`gorm:"column:profile_id" json:"profile_id"`			
PasswordLastChanged	time.Time	`gorm:"column:password_last_changed" json:"password_last_changed"`			
PrivFile	int64	`gorm:"column:priv_file" json:"priv_file"`			
PrivAlterTenant	int64	`gorm:"column:priv_alter_tenant" json:"priv_alter_tenant"`			
PrivAlterSystem	int64	`gorm:"column:priv_alter_system" json:"priv_alter_system"`			
PrivCreateResourcePool	int64	`gorm:"column:priv_create_resource_pool" json:"priv_create_resource_pool"`			
PrivCreateResourceUnit	int64	`gorm:"column:priv_create_resource_unit" json:"priv_create_resource_unit"`			
MaxConnections	int64	`gorm:"column:max_connections" json:"max_connections"`			
MaxUserConnections	int64	`gorm:"column:max_user_connections" json:"max_user_connections"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllUserHistory) TableName() string {
	return "__all_user_history"
}
	

// AllUserHistoryColumns get sql column name.获取数据库列名
var AllUserHistoryColumns = struct { 
	GmtCreate string
	GmtModified string
	TenantID string
	UserID string
	SchemaVersion string
	IsDeleted string
	UserName string
	Host string
	Passwd string
	Info string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string
	PrivShowDb string
	PrivCreateUser string
	PrivSuper string
	IsLocked string
	PrivProcess string
	PrivCreateSynonym string
	SslType string
	SslCipher string
	X509Issuer string
	X509Subject string
	Type string
	ProfileID string
	PasswordLastChanged string
	PrivFile string
	PrivAlterTenant string
	PrivAlterSystem string
	PrivCreateResourcePool string
	PrivCreateResourceUnit string
	MaxConnections string
	MaxUserConnections string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TenantID:"tenant_id",  
		UserID:"user_id",  
		SchemaVersion:"schema_version",  
		IsDeleted:"is_deleted",  
		UserName:"user_name",  
		Host:"host",  
		Passwd:"passwd",  
		Info:"info",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",  
		PrivShowDb:"priv_show_db",  
		PrivCreateUser:"priv_create_user",  
		PrivSuper:"priv_super",  
		IsLocked:"is_locked",  
		PrivProcess:"priv_process",  
		PrivCreateSynonym:"priv_create_synonym",  
		SslType:"ssl_type",  
		SslCipher:"ssl_cipher",  
		X509Issuer:"x509_issuer",  
		X509Subject:"x509_subject",  
		Type:"type",  
		ProfileID:"profile_id",  
		PasswordLastChanged:"password_last_changed",  
		PrivFile:"priv_file",  
		PrivAlterTenant:"priv_alter_tenant",  
		PrivAlterSystem:"priv_alter_system",  
		PrivCreateResourcePool:"priv_create_resource_pool",  
		PrivCreateResourceUnit:"priv_create_resource_unit",  
		MaxConnections:"max_connections",  
		MaxUserConnections:"max_user_connections",             
	}
	
// AllVirtualBackupBackupsetTask [...]		
type	AllVirtualBackupBackupsetTask	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PrevFullBackupSetID	int64	`gorm:"column:prev_full_backup_set_id" json:"prev_full_backup_set_id"`			
PrevIncBackupSetID	int64	`gorm:"column:prev_inc_backup_set_id" json:"prev_inc_backup_set_id"`			
PrevBackupDataVersion	int64	`gorm:"column:prev_backup_data_version" json:"prev_backup_data_version"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
ClusterVersionDisplay	string	`gorm:"column:cluster_version_display" json:"cluster_version_display"`			
Status	string	`gorm:"column:status" json:"status"`			
SrcBackupDest	string	`gorm:"column:src_backup_dest" json:"src_backup_dest"`			
DstBackupDest	string	`gorm:"column:dst_backup_dest" json:"dst_backup_dest"`			
SrcDeviceType	string	`gorm:"column:src_device_type" json:"src_device_type"`			
DstDeviceType	string	`gorm:"column:dst_device_type" json:"dst_device_type"`			
BackupDataVersion	int64	`gorm:"column:backup_data_version" json:"backup_data_version"`			
BackupSchemaVersion	int64	`gorm:"column:backup_schema_version" json:"backup_schema_version"`			
TotalPgCount	int64	`gorm:"column:total_pg_count" json:"total_pg_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
Result	int64	`gorm:"column:result" json:"result"`			
EncryptionMode	string	`gorm:"column:encryption_mode" json:"encryption_mode"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
StartReplayLogTs	int64	`gorm:"column:start_replay_log_ts" json:"start_replay_log_ts"`			
Date	int64	`gorm:"column:date" json:"date"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualBackupBackupsetTask) TableName() string {
	return "__all_virtual_backup_backupset_task"
}
	

// AllVirtualBackupBackupsetTaskColumns get sql column name.获取数据库列名
var AllVirtualBackupBackupsetTaskColumns = struct { 
	TenantID string
	JobID string
	Incarnation string
	BackupSetID string
	CopyID string
	GmtCreate string
	GmtModified string
	BackupType string
	SnapshotVersion string
	PrevFullBackupSetID string
	PrevIncBackupSetID string
	PrevBackupDataVersion string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	Compatible string
	ClusterID string
	ClusterVersion string
	ClusterVersionDisplay string
	Status string
	SrcBackupDest string
	DstBackupDest string
	SrcDeviceType string
	DstDeviceType string
	BackupDataVersion string
	BackupSchemaVersion string
	TotalPgCount string
	FinishPgCount string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	Result string
	EncryptionMode string
	Passwd string
	StartReplayLogTs string
	Date string    
	}{ 
		TenantID:"tenant_id",  
		JobID:"job_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		CopyID:"copy_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		BackupType:"backup_type",  
		SnapshotVersion:"snapshot_version",  
		PrevFullBackupSetID:"prev_full_backup_set_id",  
		PrevIncBackupSetID:"prev_inc_backup_set_id",  
		PrevBackupDataVersion:"prev_backup_data_version",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Compatible:"compatible",  
		ClusterID:"cluster_id",  
		ClusterVersion:"cluster_version",  
		ClusterVersionDisplay:"cluster_version_display",  
		Status:"status",  
		SrcBackupDest:"src_backup_dest",  
		DstBackupDest:"dst_backup_dest",  
		SrcDeviceType:"src_device_type",  
		DstDeviceType:"dst_device_type",  
		BackupDataVersion:"backup_data_version",  
		BackupSchemaVersion:"backup_schema_version",  
		TotalPgCount:"total_pg_count",  
		FinishPgCount:"finish_pg_count",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		Result:"result",  
		EncryptionMode:"encryption_mode",  
		Passwd:"passwd",  
		StartReplayLogTs:"start_replay_log_ts",  
		Date:"date",             
	}
	
// AllVirtualBackupCleanInfo [...]		
type	AllVirtualBackupCleanInfo	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"column:job_id" json:"job_id"`			
StartTime	int64	`gorm:"column:start_time" json:"start_time"`			
EndTime	int64	`gorm:"column:end_time" json:"end_time"`			
Incarnation	int64	`gorm:"column:incarnation" json:"incarnation"`			
Type	string	`gorm:"column:type" json:"type"`			
Status	string	`gorm:"column:status" json:"status"`			
Parameter	int64	`gorm:"column:parameter" json:"parameter"`			
ErrorMsg	string	`gorm:"column:error_msg" json:"error_msg"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ClogGcSnapshot	int64	`gorm:"column:clog_gc_snapshot" json:"clog_gc_snapshot"`			
Result	int64	`gorm:"column:result" json:"result"`			
CopyID	int64	`gorm:"column:copy_id" json:"copy_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualBackupCleanInfo) TableName() string {
	return "__all_virtual_backup_clean_info"
}
	

// AllVirtualBackupCleanInfoColumns get sql column name.获取数据库列名
var AllVirtualBackupCleanInfoColumns = struct { 
	TenantID string
	JobID string
	StartTime string
	EndTime string
	Incarnation string
	Type string
	Status string
	Parameter string
	ErrorMsg string
	Comment string
	ClogGcSnapshot string
	Result string
	CopyID string    
	}{ 
		TenantID:"tenant_id",  
		JobID:"job_id",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Incarnation:"incarnation",  
		Type:"type",  
		Status:"status",  
		Parameter:"parameter",  
		ErrorMsg:"error_msg",  
		Comment:"comment",  
		ClogGcSnapshot:"clog_gc_snapshot",  
		Result:"result",  
		CopyID:"copy_id",             
	}
	
// AllVirtualBackupInfo [...]		
type	AllVirtualBackupInfo	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Value	string	`gorm:"column:value" json:"value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualBackupInfo) TableName() string {
	return "__all_virtual_backup_info"
}
	

// AllVirtualBackupInfoColumns get sql column name.获取数据库列名
var AllVirtualBackupInfoColumns = struct { 
	TenantID string
	Name string
	GmtCreate string
	GmtModified string
	Value string    
	}{ 
		TenantID:"tenant_id",  
		Name:"name",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Value:"value",             
	}
	
// AllVirtualBackupTask [...]		
type	AllVirtualBackupTask	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
DeviceType	string	`gorm:"column:device_type" json:"device_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PrevFullBackupSetID	int64	`gorm:"column:prev_full_backup_set_id" json:"prev_full_backup_set_id"`			
PrevIncBackupSetID	int64	`gorm:"column:prev_inc_backup_set_id" json:"prev_inc_backup_set_id"`			
PrevBackupDataVersion	int64	`gorm:"column:prev_backup_data_version" json:"prev_backup_data_version"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
Status	string	`gorm:"column:status" json:"status"`			
Result	int64	`gorm:"column:result" json:"result"`			
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
BackupDataVersion	int64	`gorm:"column:backup_data_version" json:"backup_data_version"`			
BackupSchemaVersion	int64	`gorm:"column:backup_schema_version" json:"backup_schema_version"`			
ClusterVersionDisplay	string	`gorm:"column:cluster_version_display" json:"cluster_version_display"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
EncryptionMode	string	`gorm:"column:encryption_mode" json:"encryption_mode"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
StartReplayLogTs	int64	`gorm:"column:start_replay_log_ts" json:"start_replay_log_ts"`			
Date	int64	`gorm:"column:date" json:"date"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualBackupTask) TableName() string {
	return "__all_virtual_backup_task"
}
	

// AllVirtualBackupTaskColumns get sql column name.获取数据库列名
var AllVirtualBackupTaskColumns = struct { 
	TenantID string
	Incarnation string
	BackupSetID string
	GmtCreate string
	GmtModified string
	BackupType string
	DeviceType string
	SnapshotVersion string
	PrevFullBackupSetID string
	PrevIncBackupSetID string
	PrevBackupDataVersion string
	PgCount string
	MacroBlockCount string
	FinishPgCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	Compatible string
	ClusterVersion string
	Status string
	Result string
	ClusterID string
	BackupDest string
	BackupDataVersion string
	BackupSchemaVersion string
	ClusterVersionDisplay string
	PartitionCount string
	FinishPartitionCount string
	EncryptionMode string
	Passwd string
	StartReplayLogTs string
	Date string    
	}{ 
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		BackupType:"backup_type",  
		DeviceType:"device_type",  
		SnapshotVersion:"snapshot_version",  
		PrevFullBackupSetID:"prev_full_backup_set_id",  
		PrevIncBackupSetID:"prev_inc_backup_set_id",  
		PrevBackupDataVersion:"prev_backup_data_version",  
		PgCount:"pg_count",  
		MacroBlockCount:"macro_block_count",  
		FinishPgCount:"finish_pg_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Compatible:"compatible",  
		ClusterVersion:"cluster_version",  
		Status:"status",  
		Result:"result",  
		ClusterID:"cluster_id",  
		BackupDest:"backup_dest",  
		BackupDataVersion:"backup_data_version",  
		BackupSchemaVersion:"backup_schema_version",  
		ClusterVersionDisplay:"cluster_version_display",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		EncryptionMode:"encryption_mode",  
		Passwd:"passwd",  
		StartReplayLogTs:"start_replay_log_ts",  
		Date:"date",             
	}
	
// AllVirtualBackupValidationTask [...]		
type	AllVirtualBackupValidationTask	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Status	string	`gorm:"column:status" json:"status"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
TotalPgCount	int64	`gorm:"column:total_pg_count" json:"total_pg_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
LogSize	int64	`gorm:"column:log_size" json:"log_size"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualBackupValidationTask) TableName() string {
	return "__all_virtual_backup_validation_task"
}
	

// AllVirtualBackupValidationTaskColumns get sql column name.获取数据库列名
var AllVirtualBackupValidationTaskColumns = struct { 
	TenantID string
	JobID string
	TaskID string
	Incarnation string
	BackupSetID string
	GmtCreate string
	GmtModified string
	Status string
	BackupDest string
	StartTime string
	EndTime string
	TotalPgCount string
	FinishPgCount string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	LogSize string
	Result string
	Comment string    
	}{ 
		TenantID:"tenant_id",  
		JobID:"job_id",  
		TaskID:"task_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Status:"status",  
		BackupDest:"backup_dest",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		TotalPgCount:"total_pg_count",  
		FinishPgCount:"finish_pg_count",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		LogSize:"log_size",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllVirtualBackupsetHistoryMgr [...]		
type	AllVirtualBackupsetHistoryMgr	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
DeviceType	string	`gorm:"column:device_type" json:"device_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PrevFullBackupSetID	int64	`gorm:"column:prev_full_backup_set_id" json:"prev_full_backup_set_id"`			
PrevIncBackupSetID	int64	`gorm:"column:prev_inc_backup_set_id" json:"prev_inc_backup_set_id"`			
PrevBackupDataVersion	int64	`gorm:"column:prev_backup_data_version" json:"prev_backup_data_version"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishPgCount	int64	`gorm:"column:finish_pg_count" json:"finish_pg_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
Status	string	`gorm:"column:status" json:"status"`			
Result	int64	`gorm:"column:result" json:"result"`			
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
BackupDataVersion	int64	`gorm:"column:backup_data_version" json:"backup_data_version"`			
BackupSchemaVersion	int64	`gorm:"column:backup_schema_version" json:"backup_schema_version"`			
ClusterVersionDisplay	string	`gorm:"column:cluster_version_display" json:"cluster_version_display"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
IsMarkDeleted	int8	`gorm:"column:is_mark_deleted" json:"is_mark_deleted"`			
EncryptionMode	string	`gorm:"column:encryption_mode" json:"encryption_mode"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
BackupRecoveryWindow	int64	`gorm:"column:backup_recovery_window" json:"backup_recovery_window"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualBackupsetHistoryMgr) TableName() string {
	return "__all_virtual_backupset_history_mgr"
}
	

// AllVirtualBackupsetHistoryMgrColumns get sql column name.获取数据库列名
var AllVirtualBackupsetHistoryMgrColumns = struct { 
	TenantID string
	Incarnation string
	BackupSetID string
	BackupType string
	DeviceType string
	SnapshotVersion string
	PrevFullBackupSetID string
	PrevIncBackupSetID string
	PrevBackupDataVersion string
	PgCount string
	MacroBlockCount string
	FinishPgCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	Compatible string
	ClusterVersion string
	Status string
	Result string
	ClusterID string
	BackupDest string
	BackupDataVersion string
	BackupSchemaVersion string
	ClusterVersionDisplay string
	PartitionCount string
	FinishPartitionCount string
	IsMarkDeleted string
	EncryptionMode string
	Passwd string
	BackupRecoveryWindow string    
	}{ 
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		BackupType:"backup_type",  
		DeviceType:"device_type",  
		SnapshotVersion:"snapshot_version",  
		PrevFullBackupSetID:"prev_full_backup_set_id",  
		PrevIncBackupSetID:"prev_inc_backup_set_id",  
		PrevBackupDataVersion:"prev_backup_data_version",  
		PgCount:"pg_count",  
		MacroBlockCount:"macro_block_count",  
		FinishPgCount:"finish_pg_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		Compatible:"compatible",  
		ClusterVersion:"cluster_version",  
		Status:"status",  
		Result:"result",  
		ClusterID:"cluster_id",  
		BackupDest:"backup_dest",  
		BackupDataVersion:"backup_data_version",  
		BackupSchemaVersion:"backup_schema_version",  
		ClusterVersionDisplay:"cluster_version_display",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		IsMarkDeleted:"is_mark_deleted",  
		EncryptionMode:"encryption_mode",  
		Passwd:"passwd",  
		BackupRecoveryWindow:"backup_recovery_window",             
	}
	
// AllVirtualBadBlockTable [...]		
type	AllVirtualBadBlockTable	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
DiskID	int64	`gorm:"column:disk_id" json:"disk_id"`			
StoreFilePath	string	`gorm:"column:store_file_path" json:"store_file_path"`			
MacroBlockIndex	int64	`gorm:"column:macro_block_index" json:"macro_block_index"`			
ErrorType	int64	`gorm:"column:error_type" json:"error_type"`			
ErrorMsg	string	`gorm:"column:error_msg" json:"error_msg"`			
CheckTime	time.Time	`gorm:"column:check_time" json:"check_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualBadBlockTable) TableName() string {
	return "__all_virtual_bad_block_table"
}
	

// AllVirtualBadBlockTableColumns get sql column name.获取数据库列名
var AllVirtualBadBlockTableColumns = struct { 
	SvrIP string
	SvrPort string
	DiskID string
	StoreFilePath string
	MacroBlockIndex string
	ErrorType string
	ErrorMsg string
	CheckTime string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		DiskID:"disk_id",  
		StoreFilePath:"store_file_path",  
		MacroBlockIndex:"macro_block_index",  
		ErrorType:"error_type",  
		ErrorMsg:"error_msg",  
		CheckTime:"check_time",             
	}
	
// AllVirtualClogStat [...]		
type	AllVirtualClogStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Role	string	`gorm:"column:role" json:"role"`			
Status	string	`gorm:"column:status" json:"status"`			
Leader	string	`gorm:"column:leader" json:"leader"`			
LastIndexLogID	uint64	`gorm:"column:last_index_log_id" json:"last_index_log_id"`			
LastIndexLogTimestamp	time.Time	`gorm:"column:last_index_log_timestamp" json:"last_index_log_timestamp"`			
LastLogID	uint64	`gorm:"column:last_log_id" json:"last_log_id"`			
ActiveFreezeVersion	string	`gorm:"column:active_freeze_version" json:"active_freeze_version"`			
CurrMemberList	string	`gorm:"column:curr_member_list" json:"curr_member_list"`			
MemberShipLogID	uint64	`gorm:"column:member_ship_log_id" json:"member_ship_log_id"`			
IsOffline	int8	`gorm:"column:is_offline" json:"is_offline"`			
IsInSync	int8	`gorm:"column:is_in_sync" json:"is_in_sync"`			
StartID	uint64	`gorm:"column:start_id" json:"start_id"`			
Parent	string	`gorm:"column:parent" json:"parent"`			
ChildrenList	string	`gorm:"column:children_list" json:"children_list"`			
AccuLogCount	uint64	`gorm:"column:accu_log_count" json:"accu_log_count"`			
AccuLogDelay	uint64	`gorm:"column:accu_log_delay" json:"accu_log_delay"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
AllowGc	int8	`gorm:"column:allow_gc" json:"allow_gc"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
IsNeedRebuild	int8	`gorm:"column:is_need_rebuild" json:"is_need_rebuild"`			
NextReplayTsDelta	uint64	`gorm:"column:next_replay_ts_delta" json:"next_replay_ts_delta"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualClogStat) TableName() string {
	return "__all_virtual_clog_stat"
}
	

// AllVirtualClogStatColumns get sql column name.获取数据库列名
var AllVirtualClogStatColumns = struct { 
	SvrIP string
	SvrPort string
	TableID string
	PartitionIDx string
	PartitionCnt string
	Role string
	Status string
	Leader string
	LastIndexLogID string
	LastIndexLogTimestamp string
	LastLogID string
	ActiveFreezeVersion string
	CurrMemberList string
	MemberShipLogID string
	IsOffline string
	IsInSync string
	StartID string
	Parent string
	ChildrenList string
	AccuLogCount string
	AccuLogDelay string
	ReplicaType string
	AllowGc string
	Quorum string
	IsNeedRebuild string
	NextReplayTsDelta string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		Role:"role",  
		Status:"status",  
		Leader:"leader",  
		LastIndexLogID:"last_index_log_id",  
		LastIndexLogTimestamp:"last_index_log_timestamp",  
		LastLogID:"last_log_id",  
		ActiveFreezeVersion:"active_freeze_version",  
		CurrMemberList:"curr_member_list",  
		MemberShipLogID:"member_ship_log_id",  
		IsOffline:"is_offline",  
		IsInSync:"is_in_sync",  
		StartID:"start_id",  
		Parent:"parent",  
		ChildrenList:"children_list",  
		AccuLogCount:"accu_log_count",  
		AccuLogDelay:"accu_log_delay",  
		ReplicaType:"replica_type",  
		AllowGc:"allow_gc",  
		Quorum:"quorum",  
		IsNeedRebuild:"is_need_rebuild",  
		NextReplayTsDelta:"next_replay_ts_delta",             
	}
	
// AllVirtualCluster [...]		
type	AllVirtualCluster	struct {		
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
ClusterName	string	`gorm:"column:cluster_name" json:"cluster_name"`			
Created	time.Time	`gorm:"column:created" json:"created"`			
ClusterRole	string	`gorm:"column:cluster_role" json:"cluster_role"`			
ClusterStatus	string	`gorm:"column:cluster_status" json:"cluster_status"`			
Switchover#	int64	`gorm:"column:switchover#" json:"switchover#"`			
SwitchoverStatus	string	`gorm:"column:switchover_status" json:"switchover_status"`			
SwitchoverInfo	string	`gorm:"column:switchover_info" json:"switchover_info"`			
CurrentScn	int64	`gorm:"column:current_scn" json:"current_scn"`			
StandbyBecamePrimaryScn	int64	`gorm:"column:standby_became_primary_scn" json:"standby_became_primary_scn"`			
PrimaryClusterID	int64	`gorm:"column:primary_cluster_id" json:"primary_cluster_id"`			
ProtectionMode	string	`gorm:"column:protection_mode" json:"protection_mode"`			
ProtectionLevel	string	`gorm:"column:protection_level" json:"protection_level"`			
RedoTransportOptions	string	`gorm:"column:redo_transport_options" json:"redo_transport_options"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualCluster) TableName() string {
	return "__all_virtual_cluster"
}
	

// AllVirtualClusterColumns get sql column name.获取数据库列名
var AllVirtualClusterColumns = struct { 
	ClusterID string
	ClusterName string
	Created string
	ClusterRole string
	ClusterStatus string
	Switchover# string
	SwitchoverStatus string
	SwitchoverInfo string
	CurrentScn string
	StandbyBecamePrimaryScn string
	PrimaryClusterID string
	ProtectionMode string
	ProtectionLevel string
	RedoTransportOptions string    
	}{ 
		ClusterID:"cluster_id",  
		ClusterName:"cluster_name",  
		Created:"created",  
		ClusterRole:"cluster_role",  
		ClusterStatus:"cluster_status",  
		Switchover#:"switchover#",  
		SwitchoverStatus:"switchover_status",  
		SwitchoverInfo:"switchover_info",  
		CurrentScn:"current_scn",  
		StandbyBecamePrimaryScn:"standby_became_primary_scn",  
		PrimaryClusterID:"primary_cluster_id",  
		ProtectionMode:"protection_mode",  
		ProtectionLevel:"protection_level",  
		RedoTransportOptions:"redo_transport_options",             
	}
	
// AllVirtualClusterStats [...]		
type	AllVirtualClusterStats	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RefreshedSchemaVersion	int64	`gorm:"column:refreshed_schema_version" json:"refreshed_schema_version"`			
DdlLag	int64	`gorm:"column:ddl_lag" json:"ddl_lag"`			
MinSysTableScn	int64	`gorm:"column:min_sys_table_scn" json:"min_sys_table_scn"`			
MinUserTableScn	int64	`gorm:"column:min_user_table_scn" json:"min_user_table_scn"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualClusterStats) TableName() string {
	return "__all_virtual_cluster_stats"
}
	

// AllVirtualClusterStatsColumns get sql column name.获取数据库列名
var AllVirtualClusterStatsColumns = struct { 
	TenantID string
	RefreshedSchemaVersion string
	DdlLag string
	MinSysTableScn string
	MinUserTableScn string    
	}{ 
		TenantID:"tenant_id",  
		RefreshedSchemaVersion:"refreshed_schema_version",  
		DdlLag:"ddl_lag",  
		MinSysTableScn:"min_sys_table_scn",  
		MinUserTableScn:"min_user_table_scn",             
	}
	
// AllVirtualCollType [...]		
type	AllVirtualCollType	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
CollTypeID	int64	`gorm:"primaryKey;column:coll_type_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ElemTypeID	int64	`gorm:"column:elem_type_id" json:"elem_type_id"`			
ElemSchemaVersion	int64	`gorm:"column:elem_schema_version" json:"elem_schema_version"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
UpperBound	int64	`gorm:"column:upper_bound" json:"upper_bound"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
CollName	string	`gorm:"column:coll_name" json:"coll_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualCollType) TableName() string {
	return "__all_virtual_coll_type"
}
	

// AllVirtualCollTypeColumns get sql column name.获取数据库列名
var AllVirtualCollTypeColumns = struct { 
	TenantID string
	CollTypeID string
	GmtCreate string
	GmtModified string
	SchemaVersion string
	ElemTypeID string
	ElemSchemaVersion string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	UpperBound string
	PackageID string
	CollName string    
	}{ 
		TenantID:"tenant_id",  
		CollTypeID:"coll_type_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SchemaVersion:"schema_version",  
		ElemTypeID:"elem_type_id",  
		ElemSchemaVersion:"elem_schema_version",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		UpperBound:"upper_bound",  
		PackageID:"package_id",  
		CollName:"coll_name",             
	}
	
// AllVirtualCollTypeHistory [...]		
type	AllVirtualCollTypeHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
CollTypeID	int64	`gorm:"primaryKey;column:coll_type_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ElemTypeID	int64	`gorm:"column:elem_type_id" json:"elem_type_id"`			
ElemSchemaVersion	int64	`gorm:"column:elem_schema_version" json:"elem_schema_version"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
UpperBound	int64	`gorm:"column:upper_bound" json:"upper_bound"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
CollName	string	`gorm:"column:coll_name" json:"coll_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualCollTypeHistory) TableName() string {
	return "__all_virtual_coll_type_history"
}
	

// AllVirtualCollTypeHistoryColumns get sql column name.获取数据库列名
var AllVirtualCollTypeHistoryColumns = struct { 
	TenantID string
	CollTypeID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	ElemTypeID string
	ElemSchemaVersion string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	UpperBound string
	PackageID string
	CollName string    
	}{ 
		TenantID:"tenant_id",  
		CollTypeID:"coll_type_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		ElemTypeID:"elem_type_id",  
		ElemSchemaVersion:"elem_schema_version",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		UpperBound:"upper_bound",  
		PackageID:"package_id",  
		CollName:"coll_name",             
	}
	
// AllVirtualColumn [...]		
type	AllVirtualColumn	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ColumnName	string	`gorm:"column:column_name" json:"column_name"`			
RowkeyPosition	int64	`gorm:"column:rowkey_position" json:"rowkey_position"`			
IndexPosition	int64	`gorm:"column:index_position" json:"index_position"`			
OrderInRowkey	int64	`gorm:"column:order_in_rowkey" json:"order_in_rowkey"`			
PartitionKeyPosition	int64	`gorm:"column:partition_key_position" json:"partition_key_position"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
DataLength	int64	`gorm:"column:data_length" json:"data_length"`			
DataPrecision	int64	`gorm:"column:data_precision" json:"data_precision"`			
DataScale	int64	`gorm:"column:data_scale" json:"data_scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
Nullable	int64	`gorm:"column:nullable" json:"nullable"`			
OnUpdateCurrentTimestamp	int64	`gorm:"column:on_update_current_timestamp" json:"on_update_current_timestamp"`			
Autoincrement	int64	`gorm:"column:autoincrement" json:"autoincrement"`			
IsHidden	int64	`gorm:"column:is_hidden" json:"is_hidden"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
OrigDefaultValue	string	`gorm:"column:orig_default_value" json:"orig_default_value"`			
CurDefaultValue	string	`gorm:"column:cur_default_value" json:"cur_default_value"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ColumnFlags	int64	`gorm:"column:column_flags" json:"column_flags"`			
PrevColumnID	int64	`gorm:"column:prev_column_id" json:"prev_column_id"`			
ExtendedTypeInfo	[]byte	`gorm:"column:extended_type_info" json:"extended_type_info"`			
OrigDefaultValueV2	[]byte	`gorm:"column:orig_default_value_v2" json:"orig_default_value_v2"`			
CurDefaultValueV2	[]byte	`gorm:"column:cur_default_value_v2" json:"cur_default_value_v2"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualColumn) TableName() string {
	return "__all_virtual_column"
}
	

// AllVirtualColumnColumns get sql column name.获取数据库列名
var AllVirtualColumnColumns = struct { 
	TenantID string
	TableID string
	ColumnID string
	GmtCreate string
	GmtModified string
	ColumnName string
	RowkeyPosition string
	IndexPosition string
	OrderInRowkey string
	PartitionKeyPosition string
	DataType string
	DataLength string
	DataPrecision string
	DataScale string
	ZeroFill string
	Nullable string
	OnUpdateCurrentTimestamp string
	Autoincrement string
	IsHidden string
	CollationType string
	OrigDefaultValue string
	CurDefaultValue string
	Comment string
	SchemaVersion string
	ColumnFlags string
	PrevColumnID string
	ExtendedTypeInfo string
	OrigDefaultValueV2 string
	CurDefaultValueV2 string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ColumnID:"column_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ColumnName:"column_name",  
		RowkeyPosition:"rowkey_position",  
		IndexPosition:"index_position",  
		OrderInRowkey:"order_in_rowkey",  
		PartitionKeyPosition:"partition_key_position",  
		DataType:"data_type",  
		DataLength:"data_length",  
		DataPrecision:"data_precision",  
		DataScale:"data_scale",  
		ZeroFill:"zero_fill",  
		Nullable:"nullable",  
		OnUpdateCurrentTimestamp:"on_update_current_timestamp",  
		Autoincrement:"autoincrement",  
		IsHidden:"is_hidden",  
		CollationType:"collation_type",  
		OrigDefaultValue:"orig_default_value",  
		CurDefaultValue:"cur_default_value",  
		Comment:"comment",  
		SchemaVersion:"schema_version",  
		ColumnFlags:"column_flags",  
		PrevColumnID:"prev_column_id",  
		ExtendedTypeInfo:"extended_type_info",  
		OrigDefaultValueV2:"orig_default_value_v2",  
		CurDefaultValueV2:"cur_default_value_v2",             
	}
	
// AllVirtualColumnHistory [...]		
type	AllVirtualColumnHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ColumnName	string	`gorm:"column:column_name" json:"column_name"`			
RowkeyPosition	int64	`gorm:"column:rowkey_position" json:"rowkey_position"`			
IndexPosition	int64	`gorm:"column:index_position" json:"index_position"`			
OrderInRowkey	int64	`gorm:"column:order_in_rowkey" json:"order_in_rowkey"`			
PartitionKeyPosition	int64	`gorm:"column:partition_key_position" json:"partition_key_position"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
DataLength	int64	`gorm:"column:data_length" json:"data_length"`			
DataPrecision	int64	`gorm:"column:data_precision" json:"data_precision"`			
DataScale	int64	`gorm:"column:data_scale" json:"data_scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
Nullable	int64	`gorm:"column:nullable" json:"nullable"`			
OnUpdateCurrentTimestamp	int64	`gorm:"column:on_update_current_timestamp" json:"on_update_current_timestamp"`			
Autoincrement	int64	`gorm:"column:autoincrement" json:"autoincrement"`			
IsHidden	int64	`gorm:"column:is_hidden" json:"is_hidden"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
OrigDefaultValue	string	`gorm:"column:orig_default_value" json:"orig_default_value"`			
CurDefaultValue	string	`gorm:"column:cur_default_value" json:"cur_default_value"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ColumnFlags	int64	`gorm:"column:column_flags" json:"column_flags"`			
PrevColumnID	int64	`gorm:"column:prev_column_id" json:"prev_column_id"`			
ExtendedTypeInfo	[]byte	`gorm:"column:extended_type_info" json:"extended_type_info"`			
OrigDefaultValueV2	[]byte	`gorm:"column:orig_default_value_v2" json:"orig_default_value_v2"`			
CurDefaultValueV2	[]byte	`gorm:"column:cur_default_value_v2" json:"cur_default_value_v2"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualColumnHistory) TableName() string {
	return "__all_virtual_column_history"
}
	

// AllVirtualColumnHistoryColumns get sql column name.获取数据库列名
var AllVirtualColumnHistoryColumns = struct { 
	TenantID string
	TableID string
	ColumnID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	ColumnName string
	RowkeyPosition string
	IndexPosition string
	OrderInRowkey string
	PartitionKeyPosition string
	DataType string
	DataLength string
	DataPrecision string
	DataScale string
	ZeroFill string
	Nullable string
	OnUpdateCurrentTimestamp string
	Autoincrement string
	IsHidden string
	CollationType string
	OrigDefaultValue string
	CurDefaultValue string
	Comment string
	ColumnFlags string
	PrevColumnID string
	ExtendedTypeInfo string
	OrigDefaultValueV2 string
	CurDefaultValueV2 string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ColumnID:"column_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		ColumnName:"column_name",  
		RowkeyPosition:"rowkey_position",  
		IndexPosition:"index_position",  
		OrderInRowkey:"order_in_rowkey",  
		PartitionKeyPosition:"partition_key_position",  
		DataType:"data_type",  
		DataLength:"data_length",  
		DataPrecision:"data_precision",  
		DataScale:"data_scale",  
		ZeroFill:"zero_fill",  
		Nullable:"nullable",  
		OnUpdateCurrentTimestamp:"on_update_current_timestamp",  
		Autoincrement:"autoincrement",  
		IsHidden:"is_hidden",  
		CollationType:"collation_type",  
		OrigDefaultValue:"orig_default_value",  
		CurDefaultValue:"cur_default_value",  
		Comment:"comment",  
		ColumnFlags:"column_flags",  
		PrevColumnID:"prev_column_id",  
		ExtendedTypeInfo:"extended_type_info",  
		OrigDefaultValueV2:"orig_default_value_v2",  
		CurDefaultValueV2:"cur_default_value_v2",             
	}
	
// AllVirtualColumnStat [...]		
type	AllVirtualColumnStat	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ObjectType	int64	`gorm:"column:object_type" json:"object_type"`			
LastAnalyzed	time.Time	`gorm:"column:last_analyzed" json:"last_analyzed"`			
DistinctCnt	int64	`gorm:"column:distinct_cnt" json:"distinct_cnt"`			
NullCnt	int64	`gorm:"column:null_cnt" json:"null_cnt"`			
MaxValue	string	`gorm:"column:max_value" json:"max_value"`			
BMaxValue	string	`gorm:"column:b_max_value" json:"b_max_value"`			
MinValue	string	`gorm:"column:min_value" json:"min_value"`			
BMinValue	string	`gorm:"column:b_min_value" json:"b_min_value"`			
AvgLen	int64	`gorm:"column:avg_len" json:"avg_len"`			
DistinctCntSynopsis	string	`gorm:"column:distinct_cnt_synopsis" json:"distinct_cnt_synopsis"`			
DistinctCntSynopsisSize	int64	`gorm:"column:distinct_cnt_synopsis_size" json:"distinct_cnt_synopsis_size"`			
SampleSize	float64	`gorm:"column:sample_size" json:"sample_size"`			
Density	float64	`gorm:"column:density" json:"density"`			
BucketCnt	int64	`gorm:"column:bucket_cnt" json:"bucket_cnt"`			
HistogramType	int64	`gorm:"column:histogram_type" json:"histogram_type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualColumnStat) TableName() string {
	return "__all_virtual_column_stat"
}
	

// AllVirtualColumnStatColumns get sql column name.获取数据库列名
var AllVirtualColumnStatColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	ColumnID string
	GmtCreate string
	GmtModified string
	ObjectType string
	LastAnalyzed string
	DistinctCnt string
	NullCnt string
	MaxValue string
	BMaxValue string
	MinValue string
	BMinValue string
	AvgLen string
	DistinctCntSynopsis string
	DistinctCntSynopsisSize string
	SampleSize string
	Density string
	BucketCnt string
	HistogramType string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		ColumnID:"column_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ObjectType:"object_type",  
		LastAnalyzed:"last_analyzed",  
		DistinctCnt:"distinct_cnt",  
		NullCnt:"null_cnt",  
		MaxValue:"max_value",  
		BMaxValue:"b_max_value",  
		MinValue:"min_value",  
		BMinValue:"b_min_value",  
		AvgLen:"avg_len",  
		DistinctCntSynopsis:"distinct_cnt_synopsis",  
		DistinctCntSynopsisSize:"distinct_cnt_synopsis_size",  
		SampleSize:"sample_size",  
		Density:"density",  
		BucketCnt:"bucket_cnt",  
		HistogramType:"histogram_type",             
	}
	
// AllVirtualColumnStatistic [...]		
type	AllVirtualColumnStatistic	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
NumDistinct	int64	`gorm:"column:num_distinct" json:"num_distinct"`			
NumNull	int64	`gorm:"column:num_null" json:"num_null"`			
MinValue	string	`gorm:"column:min_value" json:"min_value"`			
MaxValue	string	`gorm:"column:max_value" json:"max_value"`			
LlcBitmap	string	`gorm:"column:llc_bitmap" json:"llc_bitmap"`			
LlcBitmapSize	int64	`gorm:"column:llc_bitmap_size" json:"llc_bitmap_size"`			
Version	int64	`gorm:"column:version" json:"version"`			
LastRebuildVersion	int64	`gorm:"column:last_rebuild_version" json:"last_rebuild_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualColumnStatistic) TableName() string {
	return "__all_virtual_column_statistic"
}
	

// AllVirtualColumnStatisticColumns get sql column name.获取数据库列名
var AllVirtualColumnStatisticColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	ColumnID string
	GmtCreate string
	GmtModified string
	NumDistinct string
	NumNull string
	MinValue string
	MaxValue string
	LlcBitmap string
	LlcBitmapSize string
	Version string
	LastRebuildVersion string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		ColumnID:"column_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		NumDistinct:"num_distinct",  
		NumNull:"num_null",  
		MinValue:"min_value",  
		MaxValue:"max_value",  
		LlcBitmap:"llc_bitmap",  
		LlcBitmapSize:"llc_bitmap_size",  
		Version:"version",  
		LastRebuildVersion:"last_rebuild_version",             
	}
	
// AllVirtualConcurrencyObjectPool [...]		
type	AllVirtualConcurrencyObjectPool	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
FreeListName	string	`gorm:"column:free_list_name" json:"free_list_name"`			
Allocated	int64	`gorm:"column:allocated" json:"allocated"`			
InUse	int64	`gorm:"column:in_use" json:"in_use"`			
Count	int64	`gorm:"column:count" json:"count"`			
TypeSize	int64	`gorm:"column:type_size" json:"type_size"`			
ChunkCount	int64	`gorm:"column:chunk_count" json:"chunk_count"`			
ChunkByteSize	int64	`gorm:"column:chunk_byte_size" json:"chunk_byte_size"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualConcurrencyObjectPool) TableName() string {
	return "__all_virtual_concurrency_object_pool"
}
	

// AllVirtualConcurrencyObjectPoolColumns get sql column name.获取数据库列名
var AllVirtualConcurrencyObjectPoolColumns = struct { 
	SvrIP string
	SvrPort string
	FreeListName string
	Allocated string
	InUse string
	Count string
	TypeSize string
	ChunkCount string
	ChunkByteSize string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		FreeListName:"free_list_name",  
		Allocated:"allocated",  
		InUse:"in_use",  
		Count:"count",  
		TypeSize:"type_size",  
		ChunkCount:"chunk_count",  
		ChunkByteSize:"chunk_byte_size",             
	}
	
// AllVirtualConstraint [...]		
type	AllVirtualConstraint	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ConstraintID	int64	`gorm:"primaryKey;column:constraint_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ConstraintName	string	`gorm:"column:constraint_name" json:"constraint_name"`			
CheckExpr	string	`gorm:"column:check_expr" json:"check_expr"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ConstraintType	int64	`gorm:"column:constraint_type" json:"constraint_type"`			
RelyFlag	int8	`gorm:"column:rely_flag" json:"rely_flag"`			
EnableFlag	int8	`gorm:"column:enable_flag" json:"enable_flag"`			
ValidateFlag	int8	`gorm:"column:validate_flag" json:"validate_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualConstraint) TableName() string {
	return "__all_virtual_constraint"
}
	

// AllVirtualConstraintColumns get sql column name.获取数据库列名
var AllVirtualConstraintColumns = struct { 
	TenantID string
	TableID string
	ConstraintID string
	GmtCreate string
	GmtModified string
	ConstraintName string
	CheckExpr string
	SchemaVersion string
	ConstraintType string
	RelyFlag string
	EnableFlag string
	ValidateFlag string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ConstraintID:"constraint_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ConstraintName:"constraint_name",  
		CheckExpr:"check_expr",  
		SchemaVersion:"schema_version",  
		ConstraintType:"constraint_type",  
		RelyFlag:"rely_flag",  
		EnableFlag:"enable_flag",  
		ValidateFlag:"validate_flag",             
	}
	
// AllVirtualConstraintColumn [...]		
type	AllVirtualConstraintColumn	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ConstraintID	int64	`gorm:"primaryKey;column:constraint_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualConstraintColumn) TableName() string {
	return "__all_virtual_constraint_column"
}
	

// AllVirtualConstraintColumnColumns get sql column name.获取数据库列名
var AllVirtualConstraintColumnColumns = struct { 
	TenantID string
	TableID string
	ConstraintID string
	ColumnID string
	GmtCreate string
	GmtModified string
	SchemaVersion string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ConstraintID:"constraint_id",  
		ColumnID:"column_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SchemaVersion:"schema_version",             
	}
	
// AllVirtualConstraintColumnHistory [...]		
type	AllVirtualConstraintColumnHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ConstraintID	int64	`gorm:"primaryKey;column:constraint_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualConstraintColumnHistory) TableName() string {
	return "__all_virtual_constraint_column_history"
}
	

// AllVirtualConstraintColumnHistoryColumns get sql column name.获取数据库列名
var AllVirtualConstraintColumnHistoryColumns = struct { 
	TenantID string
	TableID string
	ConstraintID string
	ColumnID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ConstraintID:"constraint_id",  
		ColumnID:"column_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",             
	}
	
// AllVirtualConstraintHistory [...]		
type	AllVirtualConstraintHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ConstraintID	int64	`gorm:"primaryKey;column:constraint_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ConstraintName	string	`gorm:"column:constraint_name" json:"constraint_name"`			
CheckExpr	string	`gorm:"column:check_expr" json:"check_expr"`			
ConstraintType	int64	`gorm:"column:constraint_type" json:"constraint_type"`			
RelyFlag	int8	`gorm:"column:rely_flag" json:"rely_flag"`			
EnableFlag	int8	`gorm:"column:enable_flag" json:"enable_flag"`			
ValidateFlag	int8	`gorm:"column:validate_flag" json:"validate_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualConstraintHistory) TableName() string {
	return "__all_virtual_constraint_history"
}
	

// AllVirtualConstraintHistoryColumns get sql column name.获取数据库列名
var AllVirtualConstraintHistoryColumns = struct { 
	TenantID string
	TableID string
	ConstraintID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	ConstraintName string
	CheckExpr string
	ConstraintType string
	RelyFlag string
	EnableFlag string
	ValidateFlag string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ConstraintID:"constraint_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		ConstraintName:"constraint_name",  
		CheckExpr:"check_expr",  
		ConstraintType:"constraint_type",  
		RelyFlag:"rely_flag",  
		EnableFlag:"enable_flag",  
		ValidateFlag:"validate_flag",             
	}
	
// AllVirtualCoreAllTable [...]		
type	AllVirtualCoreAllTable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
LoadType	int64	`gorm:"column:load_type" json:"load_type"`			
DefType	int64	`gorm:"column:def_type" json:"def_type"`			
RowkeyColumnNum	int64	`gorm:"column:rowkey_column_num" json:"rowkey_column_num"`			
IndexColumnNum	int64	`gorm:"column:index_column_num" json:"index_column_num"`			
MaxUsedColumnID	int64	`gorm:"column:max_used_column_id" json:"max_used_column_id"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
AutoincColumnID	int64	`gorm:"column:autoinc_column_id" json:"autoinc_column_id"`			
AutoIncrement	uint64	`gorm:"column:auto_increment" json:"auto_increment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
RowkeySplitPos	int64	`gorm:"column:rowkey_split_pos" json:"rowkey_split_pos"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
ExpireCondition	string	`gorm:"column:expire_condition" json:"expire_condition"`			
IsUseBloomfilter	int64	`gorm:"column:is_use_bloomfilter" json:"is_use_bloomfilter"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
DataTableID	int64	`gorm:"column:data_table_id" json:"data_table_id"`			
IndexStatus	int64	`gorm:"column:index_status" json:"index_status"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
ProgressiveMergeNum	int64	`gorm:"column:progressive_merge_num" json:"progressive_merge_num"`			
IndexType	int64	`gorm:"column:index_type" json:"index_type"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExpr	string	`gorm:"column:part_func_expr" json:"part_func_expr"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExpr	string	`gorm:"column:sub_part_func_expr" json:"sub_part_func_expr"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
CreateMemVersion	int64	`gorm:"column:create_mem_version" json:"create_mem_version"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ViewDefinition	string	`gorm:"column:view_definition" json:"view_definition"`			
ViewCheckOption	int64	`gorm:"column:view_check_option" json:"view_check_option"`			
ViewIsUpdatable	int64	`gorm:"column:view_is_updatable" json:"view_is_updatable"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
IndexUsingType	int64	`gorm:"column:index_using_type" json:"index_using_type"`			
ParserName	string	`gorm:"column:parser_name" json:"parser_name"`			
IndexAttributesSet	int64	`gorm:"column:index_attributes_set" json:"index_attributes_set"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
TabletSize	int64	`gorm:"column:tablet_size" json:"tablet_size"`			
Pctfree	int64	`gorm:"column:pctfree" json:"pctfree"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
PartitionCntWithinPartitionTable	int64	`gorm:"column:partition_cnt_within_partition_table" json:"partition_cnt_within_partition_table"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
MaxUsedConstraintID	int64	`gorm:"column:max_used_constraint_id" json:"max_used_constraint_id"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
PkComment	string	`gorm:"column:pk_comment" json:"pk_comment"`			
SessActiveTime	int64	`gorm:"column:sess_active_time" json:"sess_active_time"`			
RowStoreType	string	`gorm:"column:row_store_type" json:"row_store_type"`			
StoreFormat	string	`gorm:"column:store_format" json:"store_format"`			
DuplicateScope	int64	`gorm:"column:duplicate_scope" json:"duplicate_scope"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
ProgressiveMergeRound	int64	`gorm:"column:progressive_merge_round" json:"progressive_merge_round"`			
StorageFormatVersion	int64	`gorm:"column:storage_format_version" json:"storage_format_version"`			
TableMode	int64	`gorm:"column:table_mode" json:"table_mode"`			
Encryption	string	`gorm:"column:encryption" json:"encryption"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
Dop	int64	`gorm:"column:dop" json:"dop"`			
CharacterSetClient	int64	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	int64	`gorm:"column:collation_connection" json:"collation_connection"`			
AutoPartSize	int64	`gorm:"column:auto_part_size" json:"auto_part_size"`			
AutoPart	int8	`gorm:"column:auto_part" json:"auto_part"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualCoreAllTable) TableName() string {
	return "__all_virtual_core_all_table"
}
	

// AllVirtualCoreAllTableColumns get sql column name.获取数据库列名
var AllVirtualCoreAllTableColumns = struct { 
	TenantID string
	TableID string
	TableName string
	DatabaseID string
	TableType string
	LoadType string
	DefType string
	RowkeyColumnNum string
	IndexColumnNum string
	MaxUsedColumnID string
	ReplicaNum string
	AutoincColumnID string
	AutoIncrement string
	ReadOnly string
	RowkeySplitPos string
	CompressFuncName string
	ExpireCondition string
	IsUseBloomfilter string
	Comment string
	BlockSize string
	CollationType string
	DataTableID string
	IndexStatus string
	TablegroupID string
	ProgressiveMergeNum string
	IndexType string
	PartLevel string
	PartFuncType string
	PartFuncExpr string
	PartNum string
	SubPartFuncType string
	SubPartFuncExpr string
	SubPartNum string
	CreateMemVersion string
	SchemaVersion string
	ViewDefinition string
	ViewCheckOption string
	ViewIsUpdatable string
	ZoneList string
	PrimaryZone string
	IndexUsingType string
	ParserName string
	IndexAttributesSet string
	Locality string
	TabletSize string
	Pctfree string
	PreviousLocality string
	MaxUsedPartID string
	PartitionCntWithinPartitionTable string
	PartitionStatus string
	PartitionSchemaVersion string
	MaxUsedConstraintID string
	SessionID string
	PkComment string
	SessActiveTime string
	RowStoreType string
	StoreFormat string
	DuplicateScope string
	Binding string
	ProgressiveMergeRound string
	StorageFormatVersion string
	TableMode string
	Encryption string
	TablespaceID string
	DropSchemaVersion string
	IsSubPartTemplate string
	Dop string
	CharacterSetClient string
	CollationConnection string
	AutoPartSize string
	AutoPart string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		TableName:"table_name",  
		DatabaseID:"database_id",  
		TableType:"table_type",  
		LoadType:"load_type",  
		DefType:"def_type",  
		RowkeyColumnNum:"rowkey_column_num",  
		IndexColumnNum:"index_column_num",  
		MaxUsedColumnID:"max_used_column_id",  
		ReplicaNum:"replica_num",  
		AutoincColumnID:"autoinc_column_id",  
		AutoIncrement:"auto_increment",  
		ReadOnly:"read_only",  
		RowkeySplitPos:"rowkey_split_pos",  
		CompressFuncName:"compress_func_name",  
		ExpireCondition:"expire_condition",  
		IsUseBloomfilter:"is_use_bloomfilter",  
		Comment:"comment",  
		BlockSize:"block_size",  
		CollationType:"collation_type",  
		DataTableID:"data_table_id",  
		IndexStatus:"index_status",  
		TablegroupID:"tablegroup_id",  
		ProgressiveMergeNum:"progressive_merge_num",  
		IndexType:"index_type",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExpr:"part_func_expr",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExpr:"sub_part_func_expr",  
		SubPartNum:"sub_part_num",  
		CreateMemVersion:"create_mem_version",  
		SchemaVersion:"schema_version",  
		ViewDefinition:"view_definition",  
		ViewCheckOption:"view_check_option",  
		ViewIsUpdatable:"view_is_updatable",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		IndexUsingType:"index_using_type",  
		ParserName:"parser_name",  
		IndexAttributesSet:"index_attributes_set",  
		Locality:"locality",  
		TabletSize:"tablet_size",  
		Pctfree:"pctfree",  
		PreviousLocality:"previous_locality",  
		MaxUsedPartID:"max_used_part_id",  
		PartitionCntWithinPartitionTable:"partition_cnt_within_partition_table",  
		PartitionStatus:"partition_status",  
		PartitionSchemaVersion:"partition_schema_version",  
		MaxUsedConstraintID:"max_used_constraint_id",  
		SessionID:"session_id",  
		PkComment:"pk_comment",  
		SessActiveTime:"sess_active_time",  
		RowStoreType:"row_store_type",  
		StoreFormat:"store_format",  
		DuplicateScope:"duplicate_scope",  
		Binding:"binding",  
		ProgressiveMergeRound:"progressive_merge_round",  
		StorageFormatVersion:"storage_format_version",  
		TableMode:"table_mode",  
		Encryption:"encryption",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",  
		Dop:"dop",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",  
		AutoPartSize:"auto_part_size",  
		AutoPart:"auto_part",             
	}
	
// AllVirtualCoreColumnTable [...]		
type	AllVirtualCoreColumnTable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
ColumnName	string	`gorm:"column:column_name" json:"column_name"`			
RowkeyPosition	int64	`gorm:"column:rowkey_position" json:"rowkey_position"`			
IndexPosition	int64	`gorm:"column:index_position" json:"index_position"`			
OrderInRowkey	int64	`gorm:"column:order_in_rowkey" json:"order_in_rowkey"`			
PartitionKeyPosition	int64	`gorm:"column:partition_key_position" json:"partition_key_position"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
DataLength	int64	`gorm:"column:data_length" json:"data_length"`			
DataPrecision	int64	`gorm:"column:data_precision" json:"data_precision"`			
DataScale	int64	`gorm:"column:data_scale" json:"data_scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
Nullable	int64	`gorm:"column:nullable" json:"nullable"`			
OnUpdateCurrentTimestamp	int64	`gorm:"column:on_update_current_timestamp" json:"on_update_current_timestamp"`			
Autoincrement	int64	`gorm:"column:autoincrement" json:"autoincrement"`			
IsHidden	int64	`gorm:"column:is_hidden" json:"is_hidden"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
OrigDefaultValue	string	`gorm:"column:orig_default_value" json:"orig_default_value"`			
CurDefaultValue	string	`gorm:"column:cur_default_value" json:"cur_default_value"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ColumnFlags	int64	`gorm:"column:column_flags" json:"column_flags"`			
PrevColumnID	int64	`gorm:"column:prev_column_id" json:"prev_column_id"`			
ExtendedTypeInfo	[]byte	`gorm:"column:extended_type_info" json:"extended_type_info"`			
OrigDefaultValueV2	[]byte	`gorm:"column:orig_default_value_v2" json:"orig_default_value_v2"`			
CurDefaultValueV2	[]byte	`gorm:"column:cur_default_value_v2" json:"cur_default_value_v2"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualCoreColumnTable) TableName() string {
	return "__all_virtual_core_column_table"
}
	

// AllVirtualCoreColumnTableColumns get sql column name.获取数据库列名
var AllVirtualCoreColumnTableColumns = struct { 
	TenantID string
	TableID string
	ColumnID string
	ColumnName string
	RowkeyPosition string
	IndexPosition string
	OrderInRowkey string
	PartitionKeyPosition string
	DataType string
	DataLength string
	DataPrecision string
	DataScale string
	ZeroFill string
	Nullable string
	OnUpdateCurrentTimestamp string
	Autoincrement string
	IsHidden string
	CollationType string
	OrigDefaultValue string
	CurDefaultValue string
	Comment string
	SchemaVersion string
	ColumnFlags string
	PrevColumnID string
	ExtendedTypeInfo string
	OrigDefaultValueV2 string
	CurDefaultValueV2 string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		ColumnID:"column_id",  
		ColumnName:"column_name",  
		RowkeyPosition:"rowkey_position",  
		IndexPosition:"index_position",  
		OrderInRowkey:"order_in_rowkey",  
		PartitionKeyPosition:"partition_key_position",  
		DataType:"data_type",  
		DataLength:"data_length",  
		DataPrecision:"data_precision",  
		DataScale:"data_scale",  
		ZeroFill:"zero_fill",  
		Nullable:"nullable",  
		OnUpdateCurrentTimestamp:"on_update_current_timestamp",  
		Autoincrement:"autoincrement",  
		IsHidden:"is_hidden",  
		CollationType:"collation_type",  
		OrigDefaultValue:"orig_default_value",  
		CurDefaultValue:"cur_default_value",  
		Comment:"comment",  
		SchemaVersion:"schema_version",  
		ColumnFlags:"column_flags",  
		PrevColumnID:"prev_column_id",  
		ExtendedTypeInfo:"extended_type_info",  
		OrigDefaultValueV2:"orig_default_value_v2",  
		CurDefaultValueV2:"cur_default_value_v2",             
	}
	
// AllVirtualCoreMetaTable [...]		
type	AllVirtualCoreMetaTable	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
IsOriginalLeader	int64	`gorm:"column:is_original_leader" json:"is_original_leader"`			
IsPreviousLeader	int64	`gorm:"column:is_previous_leader" json:"is_previous_leader"`			
CreateTime	int64	`gorm:"column:create_time" json:"create_time"`			
Rebuild	int64	`gorm:"column:rebuild" json:"rebuild"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
Status	string	`gorm:"column:status" json:"status"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
PartitionChecksum	int64	`gorm:"column:partition_checksum" json:"partition_checksum"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
FailList	string	`gorm:"column:fail_list" json:"fail_list"`			
RecoveryTimestamp	int64	`gorm:"column:recovery_timestamp" json:"recovery_timestamp"`			
MemstorePercent	int64	`gorm:"column:memstore_percent" json:"memstore_percent"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualCoreMetaTable) TableName() string {
	return "__all_virtual_core_meta_table"
}
	

// AllVirtualCoreMetaTableColumns get sql column name.获取数据库列名
var AllVirtualCoreMetaTableColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	SQLPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	RowCount string
	DataSize string
	DataVersion string
	DataChecksum string
	RowChecksum string
	ColumnChecksum string
	IsOriginalLeader string
	IsPreviousLeader string
	CreateTime string
	Rebuild string
	ReplicaType string
	RequiredSize string
	Status string
	IsRestore string
	PartitionChecksum string
	Quorum string
	FailList string
	RecoveryTimestamp string
	MemstorePercent string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLPort:"sql_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		DataChecksum:"data_checksum",  
		RowChecksum:"row_checksum",  
		ColumnChecksum:"column_checksum",  
		IsOriginalLeader:"is_original_leader",  
		IsPreviousLeader:"is_previous_leader",  
		CreateTime:"create_time",  
		Rebuild:"rebuild",  
		ReplicaType:"replica_type",  
		RequiredSize:"required_size",  
		Status:"status",  
		IsRestore:"is_restore",  
		PartitionChecksum:"partition_checksum",  
		Quorum:"quorum",  
		FailList:"fail_list",  
		RecoveryTimestamp:"recovery_timestamp",  
		MemstorePercent:"memstore_percent",             
	}
	
// AllVirtualCoreRootTable [...]		
type	AllVirtualCoreRootTable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
IsOriginalLeader	int64	`gorm:"column:is_original_leader" json:"is_original_leader"`			
IsPreviousLeader	int64	`gorm:"column:is_previous_leader" json:"is_previous_leader"`			
CreateTime	int64	`gorm:"column:create_time" json:"create_time"`			
Rebuild	int64	`gorm:"column:rebuild" json:"rebuild"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
Status	string	`gorm:"column:status" json:"status"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
PartitionChecksum	int64	`gorm:"column:partition_checksum" json:"partition_checksum"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
FailList	string	`gorm:"column:fail_list" json:"fail_list"`			
RecoveryTimestamp	int64	`gorm:"column:recovery_timestamp" json:"recovery_timestamp"`			
MemstorePercent	int64	`gorm:"column:memstore_percent" json:"memstore_percent"`			
DataFileID	int64	`gorm:"column:data_file_id" json:"data_file_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualCoreRootTable) TableName() string {
	return "__all_virtual_core_root_table"
}
	

// AllVirtualCoreRootTableColumns get sql column name.获取数据库列名
var AllVirtualCoreRootTableColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	SQLPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	RowCount string
	DataSize string
	DataVersion string
	DataChecksum string
	RowChecksum string
	ColumnChecksum string
	IsOriginalLeader string
	IsPreviousLeader string
	CreateTime string
	Rebuild string
	ReplicaType string
	RequiredSize string
	Status string
	IsRestore string
	PartitionChecksum string
	Quorum string
	FailList string
	RecoveryTimestamp string
	MemstorePercent string
	DataFileID string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLPort:"sql_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		DataChecksum:"data_checksum",  
		RowChecksum:"row_checksum",  
		ColumnChecksum:"column_checksum",  
		IsOriginalLeader:"is_original_leader",  
		IsPreviousLeader:"is_previous_leader",  
		CreateTime:"create_time",  
		Rebuild:"rebuild",  
		ReplicaType:"replica_type",  
		RequiredSize:"required_size",  
		Status:"status",  
		IsRestore:"is_restore",  
		PartitionChecksum:"partition_checksum",  
		Quorum:"quorum",  
		FailList:"fail_list",  
		RecoveryTimestamp:"recovery_timestamp",  
		MemstorePercent:"memstore_percent",  
		DataFileID:"data_file_id",             
	}
	
// AllVirtualDagWarningHistory [...]		
type	AllVirtualDagWarningHistory	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TaskID	string	`gorm:"primaryKey;column:task_id" json:"-"`			
Module	string	`gorm:"column:module" json:"module"`			
Type	string	`gorm:"column:type" json:"type"`			
Ret	string	`gorm:"column:ret" json:"ret"`			
Status	string	`gorm:"column:status" json:"status"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
WarningInfo	string	`gorm:"column:warning_info" json:"warning_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDagWarningHistory) TableName() string {
	return "__all_virtual_dag_warning_history"
}
	

// AllVirtualDagWarningHistoryColumns get sql column name.获取数据库列名
var AllVirtualDagWarningHistoryColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TaskID string
	Module string
	Type string
	Ret string
	Status string
	GmtCreate string
	GmtModified string
	WarningInfo string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TaskID:"task_id",  
		Module:"module",  
		Type:"type",  
		Ret:"ret",  
		Status:"status",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		WarningInfo:"warning_info",             
	}
	
// AllVirtualDataType [...]		
type	AllVirtualDataType	struct {		
DataType	int64	`gorm:"primaryKey;column:data_type" json:"-"`			
DataTypeStr	string	`gorm:"column:data_type_str" json:"data_type_str"`			
DataTypeClass	int64	`gorm:"column:data_type_class" json:"data_type_class"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDataType) TableName() string {
	return "__all_virtual_data_type"
}
	

// AllVirtualDataTypeColumns get sql column name.获取数据库列名
var AllVirtualDataTypeColumns = struct { 
	DataType string
	DataTypeStr string
	DataTypeClass string    
	}{ 
		DataType:"data_type",  
		DataTypeStr:"data_type_str",  
		DataTypeClass:"data_type_class",             
	}
	
// AllVirtualDataTypeClass [...]		
type	AllVirtualDataTypeClass	struct {		
DataTypeClass	int64	`gorm:"primaryKey;column:data_type_class" json:"-"`			
DataTypeClassStr	string	`gorm:"column:data_type_class_str" json:"data_type_class_str"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDataTypeClass) TableName() string {
	return "__all_virtual_data_type_class"
}
	

// AllVirtualDataTypeClassColumns get sql column name.获取数据库列名
var AllVirtualDataTypeClassColumns = struct { 
	DataTypeClass string
	DataTypeClassStr string    
	}{ 
		DataTypeClass:"data_type_class",  
		DataTypeClassStr:"data_type_class_str",             
	}
	
// AllVirtualDatabase [...]		
type	AllVirtualDatabase	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DatabaseID	int64	`gorm:"primaryKey;column:database_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
DefaultTablegroupID	int64	`gorm:"column:default_tablegroup_id" json:"default_tablegroup_id"`			
InRecyclebin	int64	`gorm:"column:in_recyclebin" json:"in_recyclebin"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDatabase) TableName() string {
	return "__all_virtual_database"
}
	

// AllVirtualDatabaseColumns get sql column name.获取数据库列名
var AllVirtualDatabaseColumns = struct { 
	TenantID string
	DatabaseID string
	GmtCreate string
	GmtModified string
	DatabaseName string
	ReplicaNum string
	ZoneList string
	PrimaryZone string
	CollationType string
	Comment string
	ReadOnly string
	DefaultTablegroupID string
	InRecyclebin string
	DropSchemaVersion string    
	}{ 
		TenantID:"tenant_id",  
		DatabaseID:"database_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DatabaseName:"database_name",  
		ReplicaNum:"replica_num",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		CollationType:"collation_type",  
		Comment:"comment",  
		ReadOnly:"read_only",  
		DefaultTablegroupID:"default_tablegroup_id",  
		InRecyclebin:"in_recyclebin",  
		DropSchemaVersion:"drop_schema_version",             
	}
	
// AllVirtualDatabaseHistory [...]		
type	AllVirtualDatabaseHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DatabaseID	int64	`gorm:"primaryKey;column:database_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
DefaultTablegroupID	int64	`gorm:"column:default_tablegroup_id" json:"default_tablegroup_id"`			
InRecyclebin	int64	`gorm:"column:in_recyclebin" json:"in_recyclebin"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDatabaseHistory) TableName() string {
	return "__all_virtual_database_history"
}
	

// AllVirtualDatabaseHistoryColumns get sql column name.获取数据库列名
var AllVirtualDatabaseHistoryColumns = struct { 
	TenantID string
	DatabaseID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DatabaseName string
	ReplicaNum string
	ZoneList string
	PrimaryZone string
	CollationType string
	Comment string
	ReadOnly string
	DefaultTablegroupID string
	InRecyclebin string
	DropSchemaVersion string    
	}{ 
		TenantID:"tenant_id",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DatabaseName:"database_name",  
		ReplicaNum:"replica_num",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		CollationType:"collation_type",  
		Comment:"comment",  
		ReadOnly:"read_only",  
		DefaultTablegroupID:"default_tablegroup_id",  
		InRecyclebin:"in_recyclebin",  
		DropSchemaVersion:"drop_schema_version",             
	}
	
// AllVirtualDatabasePrivilege [...]		
type	AllVirtualDatabasePrivilege	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDatabasePrivilege) TableName() string {
	return "__all_virtual_database_privilege"
}
	

// AllVirtualDatabasePrivilegeColumns get sql column name.获取数据库列名
var AllVirtualDatabasePrivilegeColumns = struct { 
	TenantID string
	UserID string
	DatabaseName string
	GmtCreate string
	GmtModified string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string    
	}{ 
		TenantID:"tenant_id",  
		UserID:"user_id",  
		DatabaseName:"database_name",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",             
	}
	
// AllVirtualDatabasePrivilegeHistory [...]		
type	AllVirtualDatabasePrivilegeHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDatabasePrivilegeHistory) TableName() string {
	return "__all_virtual_database_privilege_history"
}
	

// AllVirtualDatabasePrivilegeHistoryColumns get sql column name.获取数据库列名
var AllVirtualDatabasePrivilegeHistoryColumns = struct { 
	TenantID string
	UserID string
	DatabaseName string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string    
	}{ 
		TenantID:"tenant_id",  
		UserID:"user_id",  
		DatabaseName:"database_name",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",             
	}
	
// AllVirtualDblink [...]		
type	AllVirtualDblink	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DblinkID	int64	`gorm:"primaryKey;column:dblink_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DblinkName	string	`gorm:"column:dblink_name" json:"dblink_name"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
HostIP	string	`gorm:"column:host_ip" json:"host_ip"`			
HostPort	int64	`gorm:"column:host_port" json:"host_port"`			
ClusterName	string	`gorm:"column:cluster_name" json:"cluster_name"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
Password	string	`gorm:"column:password" json:"password"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDblink) TableName() string {
	return "__all_virtual_dblink"
}
	

// AllVirtualDblinkColumns get sql column name.获取数据库列名
var AllVirtualDblinkColumns = struct { 
	TenantID string
	DblinkID string
	GmtCreate string
	GmtModified string
	DblinkName string
	OwnerID string
	HostIP string
	HostPort string
	ClusterName string
	TenantName string
	UserName string
	Password string    
	}{ 
		TenantID:"tenant_id",  
		DblinkID:"dblink_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DblinkName:"dblink_name",  
		OwnerID:"owner_id",  
		HostIP:"host_ip",  
		HostPort:"host_port",  
		ClusterName:"cluster_name",  
		TenantName:"tenant_name",  
		UserName:"user_name",  
		Password:"password",             
	}
	
// AllVirtualDblinkHistory [...]		
type	AllVirtualDblinkHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DblinkID	int64	`gorm:"primaryKey;column:dblink_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DblinkName	string	`gorm:"column:dblink_name" json:"dblink_name"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
HostIP	string	`gorm:"column:host_ip" json:"host_ip"`			
HostPort	int64	`gorm:"column:host_port" json:"host_port"`			
ClusterName	string	`gorm:"column:cluster_name" json:"cluster_name"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
Password	string	`gorm:"column:password" json:"password"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDblinkHistory) TableName() string {
	return "__all_virtual_dblink_history"
}
	

// AllVirtualDblinkHistoryColumns get sql column name.获取数据库列名
var AllVirtualDblinkHistoryColumns = struct { 
	TenantID string
	DblinkID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DblinkName string
	OwnerID string
	HostIP string
	HostPort string
	ClusterName string
	TenantName string
	UserName string
	Password string    
	}{ 
		TenantID:"tenant_id",  
		DblinkID:"dblink_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DblinkName:"dblink_name",  
		OwnerID:"owner_id",  
		HostIP:"host_ip",  
		HostPort:"host_port",  
		ClusterName:"cluster_name",  
		TenantName:"tenant_name",  
		UserName:"user_name",  
		Password:"password",             
	}
	
// AllVirtualDdlOperation [...]		
type	AllVirtualDdlOperation	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
UserID	int64	`gorm:"column:user_id" json:"user_id"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
OperationType	int64	`gorm:"column:operation_type" json:"operation_type"`			
DdlStmtStr	string	`gorm:"column:ddl_stmt_str" json:"ddl_stmt_str"`			
ExecTenantID	int64	`gorm:"column:exec_tenant_id" json:"exec_tenant_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDdlOperation) TableName() string {
	return "__all_virtual_ddl_operation"
}
	

// AllVirtualDdlOperationColumns get sql column name.获取数据库列名
var AllVirtualDdlOperationColumns = struct { 
	TenantID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	UserID string
	DatabaseID string
	DatabaseName string
	TablegroupID string
	TableID string
	TableName string
	OperationType string
	DdlStmtStr string
	ExecTenantID string    
	}{ 
		TenantID:"tenant_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		UserID:"user_id",  
		DatabaseID:"database_id",  
		DatabaseName:"database_name",  
		TablegroupID:"tablegroup_id",  
		TableID:"table_id",  
		TableName:"table_name",  
		OperationType:"operation_type",  
		DdlStmtStr:"ddl_stmt_str",  
		ExecTenantID:"exec_tenant_id",             
	}
	
// AllVirtualDeadlockStat [...]		
type	AllVirtualDeadlockStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
CycleID	uint64	`gorm:"column:cycle_id" json:"cycle_id"`			
CycleSeq	int64	`gorm:"column:cycle_seq" json:"cycle_seq"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
RowKey	string	`gorm:"column:row_key" json:"row_key"`			
WaiterTransID	string	`gorm:"column:waiter_trans_id" json:"waiter_trans_id"`			
HolderTransID	string	`gorm:"column:holder_trans_id" json:"holder_trans_id"`			
DeadlockRollbacked	int8	`gorm:"column:deadlock_rollbacked" json:"deadlock_rollbacked"`			
CycleDetectTs	int64	`gorm:"column:cycle_detect_ts" json:"cycle_detect_ts"`			
LockWaitTs	int64	`gorm:"column:lock_wait_ts" json:"lock_wait_ts"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDeadlockStat) TableName() string {
	return "__all_virtual_deadlock_stat"
}
	

// AllVirtualDeadlockStatColumns get sql column name.获取数据库列名
var AllVirtualDeadlockStatColumns = struct { 
	SvrIP string
	SvrPort string
	CycleID string
	CycleSeq string
	SessionID string
	TableID string
	RowKey string
	WaiterTransID string
	HolderTransID string
	DeadlockRollbacked string
	CycleDetectTs string
	LockWaitTs string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		CycleID:"cycle_id",  
		CycleSeq:"cycle_seq",  
		SessionID:"session_id",  
		TableID:"table_id",  
		RowKey:"row_key",  
		WaiterTransID:"waiter_trans_id",  
		HolderTransID:"holder_trans_id",  
		DeadlockRollbacked:"deadlock_rollbacked",  
		CycleDetectTs:"cycle_detect_ts",  
		LockWaitTs:"lock_wait_ts",             
	}
	
// AllVirtualDefSubPart [...]		
type	AllVirtualDefSubPart	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
SubPartID	int64	`gorm:"primaryKey;column:sub_part_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SubPartName	string	`gorm:"column:sub_part_name" json:"sub_part_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
SubPartIDx	int64	`gorm:"column:sub_part_idx" json:"sub_part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgSubPartID	int64	`gorm:"column:mapping_pg_sub_part_id" json:"mapping_pg_sub_part_id"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDefSubPart) TableName() string {
	return "__all_virtual_def_sub_part"
}
	

// AllVirtualDefSubPartColumns get sql column name.获取数据库列名
var AllVirtualDefSubPartColumns = struct { 
	TenantID string
	TableID string
	SubPartID string
	GmtCreate string
	GmtModified string
	SubPartName string
	SchemaVersion string
	HighBoundVal string
	BHighBoundVal string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	SubPartIDx string
	SourcePartitionID string
	MappingPgSubPartID string
	TablespaceID string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		SubPartID:"sub_part_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SubPartName:"sub_part_name",  
		SchemaVersion:"schema_version",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		SubPartIDx:"sub_part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgSubPartID:"mapping_pg_sub_part_id",  
		TablespaceID:"tablespace_id",             
	}
	
// AllVirtualDefSubPartHistory [...]		
type	AllVirtualDefSubPartHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
SubPartID	int64	`gorm:"primaryKey;column:sub_part_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
SubPartName	string	`gorm:"column:sub_part_name" json:"sub_part_name"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
SubPartIDx	int64	`gorm:"column:sub_part_idx" json:"sub_part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgSubPartID	int64	`gorm:"column:mapping_pg_sub_part_id" json:"mapping_pg_sub_part_id"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDefSubPartHistory) TableName() string {
	return "__all_virtual_def_sub_part_history"
}
	

// AllVirtualDefSubPartHistoryColumns get sql column name.获取数据库列名
var AllVirtualDefSubPartHistoryColumns = struct { 
	TenantID string
	TableID string
	SubPartID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	SubPartName string
	HighBoundVal string
	BHighBoundVal string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	SubPartIDx string
	SourcePartitionID string
	MappingPgSubPartID string
	TablespaceID string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		SubPartID:"sub_part_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		SubPartName:"sub_part_name",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		SubPartIDx:"sub_part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgSubPartID:"mapping_pg_sub_part_id",  
		TablespaceID:"tablespace_id",             
	}
	
// AllVirtualDependency [...]		
type	AllVirtualDependency	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DepObjType	int64	`gorm:"primaryKey;column:dep_obj_type" json:"-"`			
DepObjID	int64	`gorm:"primaryKey;column:dep_obj_id" json:"-"`			
DepOrder	int64	`gorm:"primaryKey;column:dep_order" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
DepTimestamp	int64	`gorm:"column:dep_timestamp" json:"dep_timestamp"`			
RefObjType	int64	`gorm:"column:ref_obj_type" json:"ref_obj_type"`			
RefObjID	int64	`gorm:"column:ref_obj_id" json:"ref_obj_id"`			
RefTimestamp	int64	`gorm:"column:ref_timestamp" json:"ref_timestamp"`			
DepObjOwnerID	int64	`gorm:"column:dep_obj_owner_id" json:"dep_obj_owner_id"`			
Property	int64	`gorm:"column:property" json:"property"`			
DepAttrs	[]byte	`gorm:"column:dep_attrs" json:"dep_attrs"`			
DepReason	[]byte	`gorm:"column:dep_reason" json:"dep_reason"`			
RefObjName	string	`gorm:"column:ref_obj_name" json:"ref_obj_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDependency) TableName() string {
	return "__all_virtual_dependency"
}
	

// AllVirtualDependencyColumns get sql column name.获取数据库列名
var AllVirtualDependencyColumns = struct { 
	TenantID string
	DepObjType string
	DepObjID string
	DepOrder string
	GmtCreate string
	GmtModified string
	SchemaVersion string
	DepTimestamp string
	RefObjType string
	RefObjID string
	RefTimestamp string
	DepObjOwnerID string
	Property string
	DepAttrs string
	DepReason string
	RefObjName string    
	}{ 
		TenantID:"tenant_id",  
		DepObjType:"dep_obj_type",  
		DepObjID:"dep_obj_id",  
		DepOrder:"dep_order",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SchemaVersion:"schema_version",  
		DepTimestamp:"dep_timestamp",  
		RefObjType:"ref_obj_type",  
		RefObjID:"ref_obj_id",  
		RefTimestamp:"ref_timestamp",  
		DepObjOwnerID:"dep_obj_owner_id",  
		Property:"property",  
		DepAttrs:"dep_attrs",  
		DepReason:"dep_reason",  
		RefObjName:"ref_obj_name",             
	}
	
// AllVirtualDiskStat [...]		
type	AllVirtualDiskStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TotalSize	int64	`gorm:"column:total_size" json:"total_size"`			
UsedSize	int64	`gorm:"column:used_size" json:"used_size"`			
FreeSize	int64	`gorm:"column:free_size" json:"free_size"`			
IsDiskValid	int64	`gorm:"column:is_disk_valid" json:"is_disk_valid"`			
DiskErrorBeginTs	int64	`gorm:"column:disk_error_begin_ts" json:"disk_error_begin_ts"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDiskStat) TableName() string {
	return "__all_virtual_disk_stat"
}
	

// AllVirtualDiskStatColumns get sql column name.获取数据库列名
var AllVirtualDiskStatColumns = struct { 
	SvrIP string
	SvrPort string
	TotalSize string
	UsedSize string
	FreeSize string
	IsDiskValid string
	DiskErrorBeginTs string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TotalSize:"total_size",  
		UsedSize:"used_size",  
		FreeSize:"free_size",  
		IsDiskValid:"is_disk_valid",  
		DiskErrorBeginTs:"disk_error_begin_ts",             
	}
	
// AllVirtualDtlChannel [...]		
type	AllVirtualDtlChannel	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
ChannelID	int64	`gorm:"column:channel_id" json:"channel_id"`			
OpID	int64	`gorm:"column:op_id" json:"op_id"`			
PeerID	int64	`gorm:"column:peer_id" json:"peer_id"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
IsLocal	int8	`gorm:"column:is_local" json:"is_local"`			
IsData	int8	`gorm:"column:is_data" json:"is_data"`			
IsTransmit	int8	`gorm:"column:is_transmit" json:"is_transmit"`			
AllocBufferCnt	int64	`gorm:"column:alloc_buffer_cnt" json:"alloc_buffer_cnt"`			
FreeBufferCnt	int64	`gorm:"column:free_buffer_cnt" json:"free_buffer_cnt"`			
SendBufferCnt	int64	`gorm:"column:send_buffer_cnt" json:"send_buffer_cnt"`			
RecvBufferCnt	int64	`gorm:"column:recv_buffer_cnt" json:"recv_buffer_cnt"`			
ProcessedBufferCnt	int64	`gorm:"column:processed_buffer_cnt" json:"processed_buffer_cnt"`			
SendBufferSize	int64	`gorm:"column:send_buffer_size" json:"send_buffer_size"`			
HashVal	int64	`gorm:"column:hash_val" json:"hash_val"`			
BufferPoolID	int64	`gorm:"column:buffer_pool_id" json:"buffer_pool_id"`			
Pins	int64	`gorm:"column:pins" json:"pins"`			
FirstInTs	time.Time	`gorm:"column:first_in_ts" json:"first_in_ts"`			
FirstOutTs	time.Time	`gorm:"column:first_out_ts" json:"first_out_ts"`			
LastIntTs	time.Time	`gorm:"column:last_int_ts" json:"last_int_ts"`			
LastOutTs	time.Time	`gorm:"column:last_out_ts" json:"last_out_ts"`			
Status	int64	`gorm:"column:status" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDtlChannel) TableName() string {
	return "__all_virtual_dtl_channel"
}
	

// AllVirtualDtlChannelColumns get sql column name.获取数据库列名
var AllVirtualDtlChannelColumns = struct { 
	SvrIP string
	SvrPort string
	ChannelID string
	OpID string
	PeerID string
	TenantID string
	IsLocal string
	IsData string
	IsTransmit string
	AllocBufferCnt string
	FreeBufferCnt string
	SendBufferCnt string
	RecvBufferCnt string
	ProcessedBufferCnt string
	SendBufferSize string
	HashVal string
	BufferPoolID string
	Pins string
	FirstInTs string
	FirstOutTs string
	LastIntTs string
	LastOutTs string
	Status string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ChannelID:"channel_id",  
		OpID:"op_id",  
		PeerID:"peer_id",  
		TenantID:"tenant_id",  
		IsLocal:"is_local",  
		IsData:"is_data",  
		IsTransmit:"is_transmit",  
		AllocBufferCnt:"alloc_buffer_cnt",  
		FreeBufferCnt:"free_buffer_cnt",  
		SendBufferCnt:"send_buffer_cnt",  
		RecvBufferCnt:"recv_buffer_cnt",  
		ProcessedBufferCnt:"processed_buffer_cnt",  
		SendBufferSize:"send_buffer_size",  
		HashVal:"hash_val",  
		BufferPoolID:"buffer_pool_id",  
		Pins:"pins",  
		FirstInTs:"first_in_ts",  
		FirstOutTs:"first_out_ts",  
		LastIntTs:"last_int_ts",  
		LastOutTs:"last_out_ts",  
		Status:"status",             
	}
	
// AllVirtualDtlFirstCachedBuffer [...]		
type	AllVirtualDtlFirstCachedBuffer	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
ChannelID	int64	`gorm:"column:channel_id" json:"channel_id"`			
CalcedVal	int64	`gorm:"column:calced_val" json:"calced_val"`			
BufferPoolID	int64	`gorm:"column:buffer_pool_id" json:"buffer_pool_id"`			
TimeoutTs	time.Time	`gorm:"column:timeout_ts" json:"timeout_ts"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDtlFirstCachedBuffer) TableName() string {
	return "__all_virtual_dtl_first_cached_buffer"
}
	

// AllVirtualDtlFirstCachedBufferColumns get sql column name.获取数据库列名
var AllVirtualDtlFirstCachedBufferColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	ChannelID string
	CalcedVal string
	BufferPoolID string
	TimeoutTs string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		ChannelID:"channel_id",  
		CalcedVal:"calced_val",  
		BufferPoolID:"buffer_pool_id",  
		TimeoutTs:"timeout_ts",             
	}
	
// AllVirtualDtlMemory [...]		
type	AllVirtualDtlMemory	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
ChannelTotalCnt	int64	`gorm:"column:channel_total_cnt" json:"channel_total_cnt"`			
ChannelBlockCnt	int64	`gorm:"column:channel_block_cnt" json:"channel_block_cnt"`			
MaxParallelCnt	int64	`gorm:"column:max_parallel_cnt" json:"max_parallel_cnt"`			
MaxBlockedBufferSize	int64	`gorm:"column:max_blocked_buffer_size" json:"max_blocked_buffer_size"`			
AccumulatedBlockedCnt	int64	`gorm:"column:accumulated_blocked_cnt" json:"accumulated_blocked_cnt"`			
CurrentBufferUsed	int64	`gorm:"column:current_buffer_used" json:"current_buffer_used"`			
Seqno	int64	`gorm:"column:seqno" json:"seqno"`			
AllocCnt	int64	`gorm:"column:alloc_cnt" json:"alloc_cnt"`			
FreeCnt	int64	`gorm:"column:free_cnt" json:"free_cnt"`			
FreeQueueLen	int64	`gorm:"column:free_queue_len" json:"free_queue_len"`			
TotalMemorySize	int64	`gorm:"column:total_memory_size" json:"total_memory_size"`			
RealAllocCnt	int64	`gorm:"column:real_alloc_cnt" json:"real_alloc_cnt"`			
RealFreeCnt	int64	`gorm:"column:real_free_cnt" json:"real_free_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDtlMemory) TableName() string {
	return "__all_virtual_dtl_memory"
}
	

// AllVirtualDtlMemoryColumns get sql column name.获取数据库列名
var AllVirtualDtlMemoryColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	ChannelTotalCnt string
	ChannelBlockCnt string
	MaxParallelCnt string
	MaxBlockedBufferSize string
	AccumulatedBlockedCnt string
	CurrentBufferUsed string
	Seqno string
	AllocCnt string
	FreeCnt string
	FreeQueueLen string
	TotalMemorySize string
	RealAllocCnt string
	RealFreeCnt string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		ChannelTotalCnt:"channel_total_cnt",  
		ChannelBlockCnt:"channel_block_cnt",  
		MaxParallelCnt:"max_parallel_cnt",  
		MaxBlockedBufferSize:"max_blocked_buffer_size",  
		AccumulatedBlockedCnt:"accumulated_blocked_cnt",  
		CurrentBufferUsed:"current_buffer_used",  
		Seqno:"seqno",  
		AllocCnt:"alloc_cnt",  
		FreeCnt:"free_cnt",  
		FreeQueueLen:"free_queue_len",  
		TotalMemorySize:"total_memory_size",  
		RealAllocCnt:"real_alloc_cnt",  
		RealFreeCnt:"real_free_cnt",             
	}
	
// AllVirtualDumpTenantInfo [...]		
type	AllVirtualDumpTenantInfo	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
CompatMode	int64	`gorm:"column:compat_mode" json:"compat_mode"`			
UnitMinCPU	float64	`gorm:"column:unit_min_cpu" json:"unit_min_cpu"`			
UnitMaxCPU	float64	`gorm:"column:unit_max_cpu" json:"unit_max_cpu"`			
Slice	float64	`gorm:"column:slice" json:"slice"`			
RemainSlice	float64	`gorm:"column:remain_slice" json:"remain_slice"`			
TokenCnt	int64	`gorm:"column:token_cnt" json:"token_cnt"`			
AssTokenCnt	int64	`gorm:"column:ass_token_cnt" json:"ass_token_cnt"`			
LqTokens	int64	`gorm:"column:lq_tokens" json:"lq_tokens"`			
UsedLqTokens	int64	`gorm:"column:used_lq_tokens" json:"used_lq_tokens"`			
Stopped	int64	`gorm:"column:stopped" json:"stopped"`			
IDleUs	int64	`gorm:"column:idle_us" json:"idle_us"`			
RecvHpRPCCnt	int64	`gorm:"column:recv_hp_rpc_cnt" json:"recv_hp_rpc_cnt"`			
RecvNpRPCCnt	int64	`gorm:"column:recv_np_rpc_cnt" json:"recv_np_rpc_cnt"`			
RecvLpRPCCnt	int64	`gorm:"column:recv_lp_rpc_cnt" json:"recv_lp_rpc_cnt"`			
RecvMysqlCnt	int64	`gorm:"column:recv_mysql_cnt" json:"recv_mysql_cnt"`			
RecvTaskCnt	int64	`gorm:"column:recv_task_cnt" json:"recv_task_cnt"`			
RecvLargeReqCnt	int64	`gorm:"column:recv_large_req_cnt" json:"recv_large_req_cnt"`			
RecvLargeQueries	int64	`gorm:"column:recv_large_queries" json:"recv_large_queries"`			
Actives	int64	`gorm:"column:actives" json:"actives"`			
Workers	int64	`gorm:"column:workers" json:"workers"`			
LqWaitingWorkers	int64	`gorm:"column:lq_waiting_workers" json:"lq_waiting_workers"`			
ReqQueueTotalSize	int64	`gorm:"column:req_queue_total_size" json:"req_queue_total_size"`			
Queue0	int64	`gorm:"column:queue_0" json:"queue_0"`			
Queue1	int64	`gorm:"column:queue_1" json:"queue_1"`			
Queue2	int64	`gorm:"column:queue_2" json:"queue_2"`			
Queue3	int64	`gorm:"column:queue_3" json:"queue_3"`			
Queue4	int64	`gorm:"column:queue_4" json:"queue_4"`			
Queue5	int64	`gorm:"column:queue_5" json:"queue_5"`			
LargeQueued	int64	`gorm:"column:large_queued" json:"large_queued"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDumpTenantInfo) TableName() string {
	return "__all_virtual_dump_tenant_info"
}
	

// AllVirtualDumpTenantInfoColumns get sql column name.获取数据库列名
var AllVirtualDumpTenantInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	CompatMode string
	UnitMinCPU string
	UnitMaxCPU string
	Slice string
	RemainSlice string
	TokenCnt string
	AssTokenCnt string
	LqTokens string
	UsedLqTokens string
	Stopped string
	IDleUs string
	RecvHpRPCCnt string
	RecvNpRPCCnt string
	RecvLpRPCCnt string
	RecvMysqlCnt string
	RecvTaskCnt string
	RecvLargeReqCnt string
	RecvLargeQueries string
	Actives string
	Workers string
	LqWaitingWorkers string
	ReqQueueTotalSize string
	Queue0 string
	Queue1 string
	Queue2 string
	Queue3 string
	Queue4 string
	Queue5 string
	LargeQueued string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		CompatMode:"compat_mode",  
		UnitMinCPU:"unit_min_cpu",  
		UnitMaxCPU:"unit_max_cpu",  
		Slice:"slice",  
		RemainSlice:"remain_slice",  
		TokenCnt:"token_cnt",  
		AssTokenCnt:"ass_token_cnt",  
		LqTokens:"lq_tokens",  
		UsedLqTokens:"used_lq_tokens",  
		Stopped:"stopped",  
		IDleUs:"idle_us",  
		RecvHpRPCCnt:"recv_hp_rpc_cnt",  
		RecvNpRPCCnt:"recv_np_rpc_cnt",  
		RecvLpRPCCnt:"recv_lp_rpc_cnt",  
		RecvMysqlCnt:"recv_mysql_cnt",  
		RecvTaskCnt:"recv_task_cnt",  
		RecvLargeReqCnt:"recv_large_req_cnt",  
		RecvLargeQueries:"recv_large_queries",  
		Actives:"actives",  
		Workers:"workers",  
		LqWaitingWorkers:"lq_waiting_workers",  
		ReqQueueTotalSize:"req_queue_total_size",  
		Queue0:"queue_0",  
		Queue1:"queue_1",  
		Queue2:"queue_2",  
		Queue3:"queue_3",  
		Queue4:"queue_4",  
		Queue5:"queue_5",  
		LargeQueued:"large_queued",             
	}
	
// AllVirtualDuplicatePartitionMgrStat [...]		
type	AllVirtualDuplicatePartitionMgrStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
PartitionLeaseList	string	`gorm:"column:partition_lease_list" json:"partition_lease_list"`			
IsMaster	int64	`gorm:"column:is_master" json:"is_master"`			
CurLogID	int64	`gorm:"column:cur_log_id" json:"cur_log_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualDuplicatePartitionMgrStat) TableName() string {
	return "__all_virtual_duplicate_partition_mgr_stat"
}
	

// AllVirtualDuplicatePartitionMgrStatColumns get sql column name.获取数据库列名
var AllVirtualDuplicatePartitionMgrStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	TableID string
	PartitionID string
	PartitionLeaseList string
	IsMaster string
	CurLogID string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		PartitionLeaseList:"partition_lease_list",  
		IsMaster:"is_master",  
		CurLogID:"cur_log_id",             
	}
	
// AllVirtualElectionEventHistory [...]		
type	AllVirtualElectionEventHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
Event	string	`gorm:"column:event" json:"event"`			
Leader	string	`gorm:"column:leader" json:"leader"`			
Info	string	`gorm:"column:info" json:"info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualElectionEventHistory) TableName() string {
	return "__all_virtual_election_event_history"
}
	

// AllVirtualElectionEventHistoryColumns get sql column name.获取数据库列名
var AllVirtualElectionEventHistoryColumns = struct { 
	GmtCreate string
	SvrIP string
	SvrPort string
	TableID string
	PartitionIDx string
	Event string
	Leader string
	Info string    
	}{ 
		GmtCreate:"gmt_create",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		Event:"event",  
		Leader:"leader",  
		Info:"info",             
	}
	
// AllVirtualElectionGroupInfo [...]		
type	AllVirtualElectionGroupInfo	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
EgIDHash	uint64	`gorm:"column:eg_id_hash" json:"eg_id_hash"`			
IsRunning	int8	`gorm:"column:is_running" json:"is_running"`			
EgCreateTime	int64	`gorm:"column:eg_create_time" json:"eg_create_time"`			
EgVersion	int64	`gorm:"column:eg_version" json:"eg_version"`			
EgPartCnt	int64	`gorm:"column:eg_part_cnt" json:"eg_part_cnt"`			
IsAllPartMergedIn	int8	`gorm:"column:is_all_part_merged_in" json:"is_all_part_merged_in"`			
IsPriorityAllowReappoint	int8	`gorm:"column:is_priority_allow_reappoint" json:"is_priority_allow_reappoint"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
IsCandidate	int8	`gorm:"column:is_candidate" json:"is_candidate"`			
SystemScore	int64	`gorm:"column:system_score" json:"system_score"`			
CurrentLeader	string	`gorm:"column:current_leader" json:"current_leader"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
TakeoverT1Timestamp	int64	`gorm:"column:takeover_t1_timestamp_" json:"takeover_t1_timestamp_"`			
T1Timestamp	int64	`gorm:"column:T1_timestamp" json:"t1_timestamp"`			
LeaseStart	int64	`gorm:"column:lease_start" json:"lease_start"`			
LeaseEnd	int64	`gorm:"column:lease_end" json:"lease_end"`			
Role	int64	`gorm:"column:role" json:"role"`			
State	int64	`gorm:"column:state" json:"state"`			
PreDestroyState	int8	`gorm:"column:pre_destroy_state" json:"pre_destroy_state"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualElectionGroupInfo) TableName() string {
	return "__all_virtual_election_group_info"
}
	

// AllVirtualElectionGroupInfoColumns get sql column name.获取数据库列名
var AllVirtualElectionGroupInfoColumns = struct { 
	SvrIP string
	SvrPort string
	EgIDHash string
	IsRunning string
	EgCreateTime string
	EgVersion string
	EgPartCnt string
	IsAllPartMergedIn string
	IsPriorityAllowReappoint string
	TenantID string
	IsCandidate string
	SystemScore string
	CurrentLeader string
	MemberList string
	ReplicaNum string
	TakeoverT1Timestamp string
	T1Timestamp string
	LeaseStart string
	LeaseEnd string
	Role string
	State string
	PreDestroyState string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		EgIDHash:"eg_id_hash",  
		IsRunning:"is_running",  
		EgCreateTime:"eg_create_time",  
		EgVersion:"eg_version",  
		EgPartCnt:"eg_part_cnt",  
		IsAllPartMergedIn:"is_all_part_merged_in",  
		IsPriorityAllowReappoint:"is_priority_allow_reappoint",  
		TenantID:"tenant_id",  
		IsCandidate:"is_candidate",  
		SystemScore:"system_score",  
		CurrentLeader:"current_leader",  
		MemberList:"member_list",  
		ReplicaNum:"replica_num",  
		TakeoverT1Timestamp:"takeover_t1_timestamp_",  
		T1Timestamp:"T1_timestamp",  
		LeaseStart:"lease_start",  
		LeaseEnd:"lease_end",  
		Role:"role",  
		State:"state",  
		PreDestroyState:"pre_destroy_state",             
	}
	
// AllVirtualElectionInfo [...]		
type	AllVirtualElectionInfo	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
IsRunning	int64	`gorm:"column:is_running" json:"is_running"`			
IsChangingLeader	int64	`gorm:"column:is_changing_leader" json:"is_changing_leader"`			
CurrentLeader	string	`gorm:"column:current_leader" json:"current_leader"`			
PreviousLeader	string	`gorm:"column:previous_leader" json:"previous_leader"`			
ProposalLeader	string	`gorm:"column:proposal_leader" json:"proposal_leader"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
LeaseStart	int64	`gorm:"column:lease_start" json:"lease_start"`			
LeaseEnd	int64	`gorm:"column:lease_end" json:"lease_end"`			
TimeOffset	int64	`gorm:"column:time_offset" json:"time_offset"`			
ActiveTimestamp	int64	`gorm:"column:active_timestamp" json:"active_timestamp"`			
T1Timestamp	int64	`gorm:"column:T1_timestamp" json:"t1_timestamp"`			
LeaderEpoch	int64	`gorm:"column:leader_epoch" json:"leader_epoch"`			
State	int64	`gorm:"column:state" json:"state"`			
Role	int64	`gorm:"column:role" json:"role"`			
Stage	int64	`gorm:"column:stage" json:"stage"`			
EgID	uint64	`gorm:"column:eg_id" json:"eg_id"`			
RemainingTimeInBlacklist	int64	`gorm:"column:remaining_time_in_blacklist" json:"remaining_time_in_blacklist"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualElectionInfo) TableName() string {
	return "__all_virtual_election_info"
}
	

// AllVirtualElectionInfoColumns get sql column name.获取数据库列名
var AllVirtualElectionInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TableID string
	PartitionIDx string
	IsRunning string
	IsChangingLeader string
	CurrentLeader string
	PreviousLeader string
	ProposalLeader string
	MemberList string
	ReplicaNum string
	LeaseStart string
	LeaseEnd string
	TimeOffset string
	ActiveTimestamp string
	T1Timestamp string
	LeaderEpoch string
	State string
	Role string
	Stage string
	EgID string
	RemainingTimeInBlacklist string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		IsRunning:"is_running",  
		IsChangingLeader:"is_changing_leader",  
		CurrentLeader:"current_leader",  
		PreviousLeader:"previous_leader",  
		ProposalLeader:"proposal_leader",  
		MemberList:"member_list",  
		ReplicaNum:"replica_num",  
		LeaseStart:"lease_start",  
		LeaseEnd:"lease_end",  
		TimeOffset:"time_offset",  
		ActiveTimestamp:"active_timestamp",  
		T1Timestamp:"T1_timestamp",  
		LeaderEpoch:"leader_epoch",  
		State:"state",  
		Role:"role",  
		Stage:"stage",  
		EgID:"eg_id",  
		RemainingTimeInBlacklist:"remaining_time_in_blacklist",             
	}
	
// AllVirtualElectionMemStat [...]		
type	AllVirtualElectionMemStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Type	string	`gorm:"column:type" json:"type"`			
AllocCount	int64	`gorm:"column:alloc_count" json:"alloc_count"`			
ReleaseCount	int64	`gorm:"column:release_count" json:"release_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualElectionMemStat) TableName() string {
	return "__all_virtual_election_mem_stat"
}
	

// AllVirtualElectionMemStatColumns get sql column name.获取数据库列名
var AllVirtualElectionMemStatColumns = struct { 
	SvrIP string
	SvrPort string
	Type string
	AllocCount string
	ReleaseCount string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Type:"type",  
		AllocCount:"alloc_count",  
		ReleaseCount:"release_count",             
	}
	
// AllVirtualElectionPriority [...]		
type	AllVirtualElectionPriority	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Role	int64	`gorm:"column:role" json:"role"`			
IsCandidate	int8	`gorm:"column:is_candidate" json:"is_candidate"`			
MembershipVersion	int64	`gorm:"column:membership_version" json:"membership_version"`			
LogID	uint64	`gorm:"column:log_id" json:"log_id"`			
Locality	uint64	`gorm:"column:locality" json:"locality"`			
SystemScore	int64	`gorm:"column:system_score" json:"system_score"`			
IsTenantActive	int8	`gorm:"column:is_tenant_active" json:"is_tenant_active"`			
OnRevokeBlacklist	int8	`gorm:"column:on_revoke_blacklist" json:"on_revoke_blacklist"`			
OnLoopBlacklist	int8	`gorm:"column:on_loop_blacklist" json:"on_loop_blacklist"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
ServerStatus	int64	`gorm:"column:server_status" json:"server_status"`			
IsClogDiskFull	int8	`gorm:"column:is_clog_disk_full" json:"is_clog_disk_full"`			
IsOffline	int8	`gorm:"column:is_offline" json:"is_offline"`			
IsNeedRebuild	int8	`gorm:"column:is_need_rebuild" json:"is_need_rebuild"`			
IsPartitionCandidate	int8	`gorm:"column:is_partition_candidate" json:"is_partition_candidate"`			
IsDiskError	int8	`gorm:"column:is_disk_error" json:"is_disk_error"`			
MemstorePercent	int64	`gorm:"column:memstore_percent" json:"memstore_percent"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualElectionPriority) TableName() string {
	return "__all_virtual_election_priority"
}
	

// AllVirtualElectionPriorityColumns get sql column name.获取数据库列名
var AllVirtualElectionPriorityColumns = struct { 
	SvrIP string
	SvrPort string
	TableID string
	PartitionIDx string
	PartitionCnt string
	Role string
	IsCandidate string
	MembershipVersion string
	LogID string
	Locality string
	SystemScore string
	IsTenantActive string
	OnRevokeBlacklist string
	OnLoopBlacklist string
	ReplicaType string
	ServerStatus string
	IsClogDiskFull string
	IsOffline string
	IsNeedRebuild string
	IsPartitionCandidate string
	IsDiskError string
	MemstorePercent string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		Role:"role",  
		IsCandidate:"is_candidate",  
		MembershipVersion:"membership_version",  
		LogID:"log_id",  
		Locality:"locality",  
		SystemScore:"system_score",  
		IsTenantActive:"is_tenant_active",  
		OnRevokeBlacklist:"on_revoke_blacklist",  
		OnLoopBlacklist:"on_loop_blacklist",  
		ReplicaType:"replica_type",  
		ServerStatus:"server_status",  
		IsClogDiskFull:"is_clog_disk_full",  
		IsOffline:"is_offline",  
		IsNeedRebuild:"is_need_rebuild",  
		IsPartitionCandidate:"is_partition_candidate",  
		IsDiskError:"is_disk_error",  
		MemstorePercent:"memstore_percent",             
	}
	
// AllVirtualEngine [...]		
type	AllVirtualEngine	struct {		
Engine	string	`gorm:"column:Engine" json:"engine"`			
Support	string	`gorm:"column:Support" json:"support"`			
Comment	string	`gorm:"column:Comment" json:"comment"`			
Transactions	string	`gorm:"column:Transactions" json:"transactions"`			
Xa	string	`gorm:"column:XA" json:"xa"`			
Savepoints	string	`gorm:"column:Savepoints" json:"savepoints"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualEngine) TableName() string {
	return "__all_virtual_engine"
}
	

// AllVirtualEngineColumns get sql column name.获取数据库列名
var AllVirtualEngineColumns = struct { 
	Engine string
	Support string
	Comment string
	Transactions string
	Xa string
	Savepoints string    
	}{ 
		Engine:"Engine",  
		Support:"Support",  
		Comment:"Comment",  
		Transactions:"Transactions",  
		Xa:"XA",  
		Savepoints:"Savepoints",             
	}
	
// AllVirtualError [...]		
type	AllVirtualError	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjID	int64	`gorm:"primaryKey;column:obj_id" json:"-"`			
ObjSeq	int64	`gorm:"primaryKey;column:obj_seq" json:"-"`			
ObjType	int64	`gorm:"primaryKey;column:obj_type" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Line	int64	`gorm:"column:line" json:"line"`			
Position	int64	`gorm:"column:position" json:"position"`			
TextLength	int64	`gorm:"column:text_length" json:"text_length"`			
Text	string	`gorm:"column:text" json:"text"`			
Property	int64	`gorm:"column:property" json:"property"`			
ErrorNumber	int64	`gorm:"column:error_number" json:"error_number"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualError) TableName() string {
	return "__all_virtual_error"
}
	

// AllVirtualErrorColumns get sql column name.获取数据库列名
var AllVirtualErrorColumns = struct { 
	TenantID string
	ObjID string
	ObjSeq string
	ObjType string
	GmtCreate string
	GmtModified string
	Line string
	Position string
	TextLength string
	Text string
	Property string
	ErrorNumber string
	SchemaVersion string    
	}{ 
		TenantID:"tenant_id",  
		ObjID:"obj_id",  
		ObjSeq:"obj_seq",  
		ObjType:"obj_type",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Line:"line",  
		Position:"position",  
		TextLength:"text_length",  
		Text:"text",  
		Property:"property",  
		ErrorNumber:"error_number",  
		SchemaVersion:"schema_version",             
	}
	
// AllVirtualFiles [...]		
type	AllVirtualFiles	struct {		
FileID	int64	`gorm:"column:FILE_ID" json:"file_id"`			
FileName	string	`gorm:"column:FILE_NAME" json:"file_name"`			
FileType	string	`gorm:"column:FILE_TYPE" json:"file_type"`			
TablespaceName	string	`gorm:"column:TABLESPACE_NAME" json:"tablespace_name"`			
TableCatalog	string	`gorm:"column:TABLE_CATALOG" json:"table_catalog"`			
TableSchema	string	`gorm:"column:TABLE_SCHEMA" json:"table_schema"`			
TableName	string	`gorm:"column:TABLE_NAME" json:"table_name"`			
LogfileGroupName	string	`gorm:"column:LOGFILE_GROUP_NAME" json:"logfile_group_name"`			
LogfileGroupNumber	int64	`gorm:"column:LOGFILE_GROUP_NUMBER" json:"logfile_group_number"`			
Engine	string	`gorm:"column:ENGINE" json:"engine"`			
FulltextKeys	string	`gorm:"column:FULLTEXT_KEYS" json:"fulltext_keys"`			
DeletedRows	int64	`gorm:"column:DELETED_ROWS" json:"deleted_rows"`			
UpdateCount	int64	`gorm:"column:UPDATE_COUNT" json:"update_count"`			
FreeExtents	int64	`gorm:"column:FREE_EXTENTS" json:"free_extents"`			
TotalExtents	int64	`gorm:"column:TOTAL_EXTENTS" json:"total_extents"`			
ExtentSize	int64	`gorm:"column:EXTENT_SIZE" json:"extent_size"`			
InitialSize	uint64	`gorm:"column:INITIAL_SIZE" json:"initial_size"`			
MaximumSize	uint64	`gorm:"column:MAXIMUM_SIZE" json:"maximum_size"`			
AutoextendSize	uint64	`gorm:"column:AUTOEXTEND_SIZE" json:"autoextend_size"`			
CreationTime	time.Time	`gorm:"column:CREATION_TIME" json:"creation_time"`			
LastUpdateTime	time.Time	`gorm:"column:LAST_UPDATE_TIME" json:"last_update_time"`			
LastAccessTime	time.Time	`gorm:"column:LAST_ACCESS_TIME" json:"last_access_time"`			
RecoverTime	int64	`gorm:"column:RECOVER_TIME" json:"recover_time"`			
TransactionCounter	int64	`gorm:"column:TRANSACTION_COUNTER" json:"transaction_counter"`			
Version	uint64	`gorm:"column:VERSION" json:"version"`			
RowFormat	string	`gorm:"column:ROW_FORMAT" json:"row_format"`			
TableRows	uint64	`gorm:"column:TABLE_ROWS" json:"table_rows"`			
AvgRowLength	uint64	`gorm:"column:AVG_ROW_LENGTH" json:"avg_row_length"`			
DataLength	uint64	`gorm:"column:DATA_LENGTH" json:"data_length"`			
MaxDataLength	uint64	`gorm:"column:MAX_DATA_LENGTH" json:"max_data_length"`			
IndexLength	uint64	`gorm:"column:INDEX_LENGTH" json:"index_length"`			
DataFree	uint64	`gorm:"column:DATA_FREE" json:"data_free"`			
CreateTime	time.Time	`gorm:"column:CREATE_TIME" json:"create_time"`			
UpdateTime	time.Time	`gorm:"column:UPDATE_TIME" json:"update_time"`			
CheckTime	time.Time	`gorm:"column:CHECK_TIME" json:"check_time"`			
Checksum	uint64	`gorm:"column:CHECKSUM" json:"checksum"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
Extra	string	`gorm:"column:EXTRA" json:"extra"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualFiles) TableName() string {
	return "__all_virtual_files"
}
	

// AllVirtualFilesColumns get sql column name.获取数据库列名
var AllVirtualFilesColumns = struct { 
	FileID string
	FileName string
	FileType string
	TablespaceName string
	TableCatalog string
	TableSchema string
	TableName string
	LogfileGroupName string
	LogfileGroupNumber string
	Engine string
	FulltextKeys string
	DeletedRows string
	UpdateCount string
	FreeExtents string
	TotalExtents string
	ExtentSize string
	InitialSize string
	MaximumSize string
	AutoextendSize string
	CreationTime string
	LastUpdateTime string
	LastAccessTime string
	RecoverTime string
	TransactionCounter string
	Version string
	RowFormat string
	TableRows string
	AvgRowLength string
	DataLength string
	MaxDataLength string
	IndexLength string
	DataFree string
	CreateTime string
	UpdateTime string
	CheckTime string
	Checksum string
	Status string
	Extra string    
	}{ 
		FileID:"FILE_ID",  
		FileName:"FILE_NAME",  
		FileType:"FILE_TYPE",  
		TablespaceName:"TABLESPACE_NAME",  
		TableCatalog:"TABLE_CATALOG",  
		TableSchema:"TABLE_SCHEMA",  
		TableName:"TABLE_NAME",  
		LogfileGroupName:"LOGFILE_GROUP_NAME",  
		LogfileGroupNumber:"LOGFILE_GROUP_NUMBER",  
		Engine:"ENGINE",  
		FulltextKeys:"FULLTEXT_KEYS",  
		DeletedRows:"DELETED_ROWS",  
		UpdateCount:"UPDATE_COUNT",  
		FreeExtents:"FREE_EXTENTS",  
		TotalExtents:"TOTAL_EXTENTS",  
		ExtentSize:"EXTENT_SIZE",  
		InitialSize:"INITIAL_SIZE",  
		MaximumSize:"MAXIMUM_SIZE",  
		AutoextendSize:"AUTOEXTEND_SIZE",  
		CreationTime:"CREATION_TIME",  
		LastUpdateTime:"LAST_UPDATE_TIME",  
		LastAccessTime:"LAST_ACCESS_TIME",  
		RecoverTime:"RECOVER_TIME",  
		TransactionCounter:"TRANSACTION_COUNTER",  
		Version:"VERSION",  
		RowFormat:"ROW_FORMAT",  
		TableRows:"TABLE_ROWS",  
		AvgRowLength:"AVG_ROW_LENGTH",  
		DataLength:"DATA_LENGTH",  
		MaxDataLength:"MAX_DATA_LENGTH",  
		IndexLength:"INDEX_LENGTH",  
		DataFree:"DATA_FREE",  
		CreateTime:"CREATE_TIME",  
		UpdateTime:"UPDATE_TIME",  
		CheckTime:"CHECK_TIME",  
		Checksum:"CHECKSUM",  
		Status:"STATUS",  
		Extra:"EXTRA",             
	}
	
// AllVirtualForeignKey [...]		
type	AllVirtualForeignKey	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ForeignKeyID	int64	`gorm:"primaryKey;column:foreign_key_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ForeignKeyName	string	`gorm:"column:foreign_key_name" json:"foreign_key_name"`			
ChildTableID	int64	`gorm:"column:child_table_id" json:"child_table_id"`			
ParentTableID	int64	`gorm:"column:parent_table_id" json:"parent_table_id"`			
UpdateAction	int64	`gorm:"column:update_action" json:"update_action"`			
DeleteAction	int64	`gorm:"column:delete_action" json:"delete_action"`			
EnableFlag	int8	`gorm:"column:enable_flag" json:"enable_flag"`			
RefCstType	int64	`gorm:"column:ref_cst_type" json:"ref_cst_type"`			
RefCstID	int64	`gorm:"column:ref_cst_id" json:"ref_cst_id"`			
ValidateFlag	int8	`gorm:"column:validate_flag" json:"validate_flag"`			
RelyFlag	int8	`gorm:"column:rely_flag" json:"rely_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualForeignKey) TableName() string {
	return "__all_virtual_foreign_key"
}
	

// AllVirtualForeignKeyColumns get sql column name.获取数据库列名
var AllVirtualForeignKeyColumns = struct { 
	TenantID string
	ForeignKeyID string
	GmtCreate string
	GmtModified string
	ForeignKeyName string
	ChildTableID string
	ParentTableID string
	UpdateAction string
	DeleteAction string
	EnableFlag string
	RefCstType string
	RefCstID string
	ValidateFlag string
	RelyFlag string    
	}{ 
		TenantID:"tenant_id",  
		ForeignKeyID:"foreign_key_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ForeignKeyName:"foreign_key_name",  
		ChildTableID:"child_table_id",  
		ParentTableID:"parent_table_id",  
		UpdateAction:"update_action",  
		DeleteAction:"delete_action",  
		EnableFlag:"enable_flag",  
		RefCstType:"ref_cst_type",  
		RefCstID:"ref_cst_id",  
		ValidateFlag:"validate_flag",  
		RelyFlag:"rely_flag",             
	}
	
// AllVirtualForeignKeyColumn [...]		
type	AllVirtualForeignKeyColumn	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ForeignKeyID	int64	`gorm:"primaryKey;column:foreign_key_id" json:"-"`			
ChildColumnID	int64	`gorm:"primaryKey;column:child_column_id" json:"-"`			
ParentColumnID	int64	`gorm:"primaryKey;column:parent_column_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Position	int64	`gorm:"column:position" json:"position"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualForeignKeyColumn) TableName() string {
	return "__all_virtual_foreign_key_column"
}
	

// AllVirtualForeignKeyColumnColumns get sql column name.获取数据库列名
var AllVirtualForeignKeyColumnColumns = struct { 
	TenantID string
	ForeignKeyID string
	ChildColumnID string
	ParentColumnID string
	GmtCreate string
	GmtModified string
	Position string    
	}{ 
		TenantID:"tenant_id",  
		ForeignKeyID:"foreign_key_id",  
		ChildColumnID:"child_column_id",  
		ParentColumnID:"parent_column_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Position:"position",             
	}
	
// AllVirtualForeignKeyColumnHistory [...]		
type	AllVirtualForeignKeyColumnHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ForeignKeyID	int64	`gorm:"primaryKey;column:foreign_key_id" json:"-"`			
ChildColumnID	int64	`gorm:"primaryKey;column:child_column_id" json:"-"`			
ParentColumnID	int64	`gorm:"primaryKey;column:parent_column_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
Position	int64	`gorm:"column:position" json:"position"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualForeignKeyColumnHistory) TableName() string {
	return "__all_virtual_foreign_key_column_history"
}
	

// AllVirtualForeignKeyColumnHistoryColumns get sql column name.获取数据库列名
var AllVirtualForeignKeyColumnHistoryColumns = struct { 
	TenantID string
	ForeignKeyID string
	ChildColumnID string
	ParentColumnID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	Position string    
	}{ 
		TenantID:"tenant_id",  
		ForeignKeyID:"foreign_key_id",  
		ChildColumnID:"child_column_id",  
		ParentColumnID:"parent_column_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		Position:"position",             
	}
	
// AllVirtualForeignKeyHistory [...]		
type	AllVirtualForeignKeyHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ForeignKeyID	int64	`gorm:"primaryKey;column:foreign_key_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ForeignKeyName	string	`gorm:"column:foreign_key_name" json:"foreign_key_name"`			
ChildTableID	int64	`gorm:"column:child_table_id" json:"child_table_id"`			
ParentTableID	int64	`gorm:"column:parent_table_id" json:"parent_table_id"`			
UpdateAction	int64	`gorm:"column:update_action" json:"update_action"`			
DeleteAction	int64	`gorm:"column:delete_action" json:"delete_action"`			
EnableFlag	int8	`gorm:"column:enable_flag" json:"enable_flag"`			
RefCstType	int64	`gorm:"column:ref_cst_type" json:"ref_cst_type"`			
RefCstID	int64	`gorm:"column:ref_cst_id" json:"ref_cst_id"`			
ValidateFlag	int8	`gorm:"column:validate_flag" json:"validate_flag"`			
RelyFlag	int8	`gorm:"column:rely_flag" json:"rely_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualForeignKeyHistory) TableName() string {
	return "__all_virtual_foreign_key_history"
}
	

// AllVirtualForeignKeyHistoryColumns get sql column name.获取数据库列名
var AllVirtualForeignKeyHistoryColumns = struct { 
	TenantID string
	ForeignKeyID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	ForeignKeyName string
	ChildTableID string
	ParentTableID string
	UpdateAction string
	DeleteAction string
	EnableFlag string
	RefCstType string
	RefCstID string
	ValidateFlag string
	RelyFlag string    
	}{ 
		TenantID:"tenant_id",  
		ForeignKeyID:"foreign_key_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		ForeignKeyName:"foreign_key_name",  
		ChildTableID:"child_table_id",  
		ParentTableID:"parent_table_id",  
		UpdateAction:"update_action",  
		DeleteAction:"delete_action",  
		EnableFlag:"enable_flag",  
		RefCstType:"ref_cst_type",  
		RefCstID:"ref_cst_id",  
		ValidateFlag:"validate_flag",  
		RelyFlag:"rely_flag",             
	}
	
// AllVirtualFreezeInfo [...]		
type	AllVirtualFreezeInfo	struct {		
FrozenVersion	int64	`gorm:"primaryKey;column:frozen_version" json:"-"`			
FrozenTimestamp	int64	`gorm:"column:frozen_timestamp" json:"frozen_timestamp"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualFreezeInfo) TableName() string {
	return "__all_virtual_freeze_info"
}
	

// AllVirtualFreezeInfoColumns get sql column name.获取数据库列名
var AllVirtualFreezeInfoColumns = struct { 
	FrozenVersion string
	FrozenTimestamp string
	SchemaVersion string    
	}{ 
		FrozenVersion:"frozen_version",  
		FrozenTimestamp:"frozen_timestamp",  
		SchemaVersion:"schema_version",             
	}
	
// AllVirtualFunc [...]		
type	AllVirtualFunc	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Ret	int64	`gorm:"column:ret" json:"ret"`			
Dl	string	`gorm:"column:dl" json:"dl"`			
UdfID	int64	`gorm:"column:udf_id" json:"udf_id"`			
Type	int64	`gorm:"column:type" json:"type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualFunc) TableName() string {
	return "__all_virtual_func"
}
	

// AllVirtualFuncColumns get sql column name.获取数据库列名
var AllVirtualFuncColumns = struct { 
	TenantID string
	Name string
	GmtCreate string
	GmtModified string
	Ret string
	Dl string
	UdfID string
	Type string    
	}{ 
		TenantID:"tenant_id",  
		Name:"name",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Ret:"ret",  
		Dl:"dl",  
		UdfID:"udf_id",  
		Type:"type",             
	}
	
// AllVirtualFuncHistory [...]		
type	AllVirtualFuncHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
Ret	int64	`gorm:"column:ret" json:"ret"`			
Dl	string	`gorm:"column:dl" json:"dl"`			
UdfID	int64	`gorm:"column:udf_id" json:"udf_id"`			
Type	int64	`gorm:"column:type" json:"type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualFuncHistory) TableName() string {
	return "__all_virtual_func_history"
}
	

// AllVirtualFuncHistoryColumns get sql column name.获取数据库列名
var AllVirtualFuncHistoryColumns = struct { 
	TenantID string
	Name string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	Ret string
	Dl string
	UdfID string
	Type string    
	}{ 
		TenantID:"tenant_id",  
		Name:"name",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		Ret:"ret",  
		Dl:"dl",  
		UdfID:"udf_id",  
		Type:"type",             
	}
	
// AllVirtualGlobalTransaction [...]		
type	AllVirtualGlobalTransaction	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Gtrid	[]byte	`gorm:"primaryKey;column:gtrid" json:"-"`			
Bqual	[]byte	`gorm:"primaryKey;column:bqual" json:"-"`			
FormatID	int64	`gorm:"primaryKey;column:format_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TransID	string	`gorm:"column:trans_id" json:"trans_id"`			
Coordinator	string	`gorm:"column:coordinator" json:"coordinator"`			
SchedulerIP	string	`gorm:"column:scheduler_ip" json:"scheduler_ip"`			
SchedulerPort	int64	`gorm:"column:scheduler_port" json:"scheduler_port"`			
IsReadonly	int8	`gorm:"column:is_readonly" json:"is_readonly"`			
State	int64	`gorm:"column:state" json:"state"`			
EndFlag	int64	`gorm:"column:end_flag" json:"end_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualGlobalTransaction) TableName() string {
	return "__all_virtual_global_transaction"
}
	

// AllVirtualGlobalTransactionColumns get sql column name.获取数据库列名
var AllVirtualGlobalTransactionColumns = struct { 
	TenantID string
	Gtrid string
	Bqual string
	FormatID string
	GmtCreate string
	GmtModified string
	TransID string
	Coordinator string
	SchedulerIP string
	SchedulerPort string
	IsReadonly string
	State string
	EndFlag string    
	}{ 
		TenantID:"tenant_id",  
		Gtrid:"gtrid",  
		Bqual:"bqual",  
		FormatID:"format_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TransID:"trans_id",  
		Coordinator:"coordinator",  
		SchedulerIP:"scheduler_ip",  
		SchedulerPort:"scheduler_port",  
		IsReadonly:"is_readonly",  
		State:"state",  
		EndFlag:"end_flag",             
	}
	
// AllVirtualHistogramStat [...]		
type	AllVirtualHistogramStat	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
EndpointNum	int64	`gorm:"primaryKey;column:endpoint_num" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ObjectType	int64	`gorm:"column:object_type" json:"object_type"`			
EndpointValue	string	`gorm:"column:endpoint_value" json:"endpoint_value"`			
BEndpointValue	string	`gorm:"column:b_endpoint_value" json:"b_endpoint_value"`			
EndpointRepeatCnt	int64	`gorm:"column:endpoint_repeat_cnt" json:"endpoint_repeat_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualHistogramStat) TableName() string {
	return "__all_virtual_histogram_stat"
}
	

// AllVirtualHistogramStatColumns get sql column name.获取数据库列名
var AllVirtualHistogramStatColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	ColumnID string
	EndpointNum string
	GmtCreate string
	GmtModified string
	ObjectType string
	EndpointValue string
	BEndpointValue string
	EndpointRepeatCnt string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		ColumnID:"column_id",  
		EndpointNum:"endpoint_num",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ObjectType:"object_type",  
		EndpointValue:"endpoint_value",  
		BEndpointValue:"b_endpoint_value",  
		EndpointRepeatCnt:"endpoint_repeat_cnt",             
	}
	
// AllVirtualIoStat [...]		
type	AllVirtualIoStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Fd	int64	`gorm:"column:fd" json:"fd"`			
DiskType	string	`gorm:"column:disk_type" json:"disk_type"`			
SysIoUpLimitInMb	int64	`gorm:"column:sys_io_up_limit_in_mb" json:"sys_io_up_limit_in_mb"`			
SysIoBandwidthInMb	int64	`gorm:"column:sys_io_bandwidth_in_mb" json:"sys_io_bandwidth_in_mb"`			
SysIoLowWatermarkInMb	int64	`gorm:"column:sys_io_low_watermark_in_mb" json:"sys_io_low_watermark_in_mb"`			
SysIoHighWatermarkInMb	int64	`gorm:"column:sys_io_high_watermark_in_mb" json:"sys_io_high_watermark_in_mb"`			
IoBenchResult	string	`gorm:"column:io_bench_result" json:"io_bench_result"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualIoStat) TableName() string {
	return "__all_virtual_io_stat"
}
	

// AllVirtualIoStatColumns get sql column name.获取数据库列名
var AllVirtualIoStatColumns = struct { 
	SvrIP string
	SvrPort string
	Fd string
	DiskType string
	SysIoUpLimitInMb string
	SysIoBandwidthInMb string
	SysIoLowWatermarkInMb string
	SysIoHighWatermarkInMb string
	IoBenchResult string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Fd:"fd",  
		DiskType:"disk_type",  
		SysIoUpLimitInMb:"sys_io_up_limit_in_mb",  
		SysIoBandwidthInMb:"sys_io_bandwidth_in_mb",  
		SysIoLowWatermarkInMb:"sys_io_low_watermark_in_mb",  
		SysIoHighWatermarkInMb:"sys_io_high_watermark_in_mb",  
		IoBenchResult:"io_bench_result",             
	}
	
// AllVirtualKvTTLTask [...]		
type	AllVirtualKvTTLTask	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TaskStartTime	int64	`gorm:"column:task_start_time" json:"task_start_time"`			
TaskUpdateTime	int64	`gorm:"column:task_update_time" json:"task_update_time"`			
TriggerType	int64	`gorm:"column:trigger_type" json:"trigger_type"`			
Status	int64	`gorm:"column:status" json:"status"`			
TTLDelCnt	int64	`gorm:"column:ttl_del_cnt" json:"ttl_del_cnt"`			
MaxVersionDelCnt	int64	`gorm:"column:max_version_del_cnt" json:"max_version_del_cnt"`			
ScanCnt	int64	`gorm:"column:scan_cnt" json:"scan_cnt"`			
RowKey	[]byte	`gorm:"column:row_key" json:"row_key"`			
RetCode	string	`gorm:"column:ret_code" json:"ret_code"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualKvTTLTask) TableName() string {
	return "__all_virtual_kv_ttl_task"
}
	

// AllVirtualKvTTLTaskColumns get sql column name.获取数据库列名
var AllVirtualKvTTLTaskColumns = struct { 
	TenantID string
	TaskID string
	TableID string
	PartitionID string
	GmtCreate string
	GmtModified string
	TaskStartTime string
	TaskUpdateTime string
	TriggerType string
	Status string
	TTLDelCnt string
	MaxVersionDelCnt string
	ScanCnt string
	RowKey string
	RetCode string    
	}{ 
		TenantID:"tenant_id",  
		TaskID:"task_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TaskStartTime:"task_start_time",  
		TaskUpdateTime:"task_update_time",  
		TriggerType:"trigger_type",  
		Status:"status",  
		TTLDelCnt:"ttl_del_cnt",  
		MaxVersionDelCnt:"max_version_del_cnt",  
		ScanCnt:"scan_cnt",  
		RowKey:"row_key",  
		RetCode:"ret_code",             
	}
	
// AllVirtualKvTTLTaskHistory [...]		
type	AllVirtualKvTTLTaskHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TaskStartTime	int64	`gorm:"column:task_start_time" json:"task_start_time"`			
TaskUpdateTime	int64	`gorm:"column:task_update_time" json:"task_update_time"`			
TriggerType	int64	`gorm:"column:trigger_type" json:"trigger_type"`			
Status	int64	`gorm:"column:status" json:"status"`			
TTLDelCnt	int64	`gorm:"column:ttl_del_cnt" json:"ttl_del_cnt"`			
MaxVersionDelCnt	int64	`gorm:"column:max_version_del_cnt" json:"max_version_del_cnt"`			
ScanCnt	int64	`gorm:"column:scan_cnt" json:"scan_cnt"`			
RowKey	[]byte	`gorm:"column:row_key" json:"row_key"`			
RetCode	string	`gorm:"column:ret_code" json:"ret_code"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualKvTTLTaskHistory) TableName() string {
	return "__all_virtual_kv_ttl_task_history"
}
	

// AllVirtualKvTTLTaskHistoryColumns get sql column name.获取数据库列名
var AllVirtualKvTTLTaskHistoryColumns = struct { 
	TenantID string
	TaskID string
	TableID string
	PartitionID string
	GmtCreate string
	GmtModified string
	TaskStartTime string
	TaskUpdateTime string
	TriggerType string
	Status string
	TTLDelCnt string
	MaxVersionDelCnt string
	ScanCnt string
	RowKey string
	RetCode string    
	}{ 
		TenantID:"tenant_id",  
		TaskID:"task_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TaskStartTime:"task_start_time",  
		TaskUpdateTime:"task_update_time",  
		TriggerType:"trigger_type",  
		Status:"status",  
		TTLDelCnt:"ttl_del_cnt",  
		MaxVersionDelCnt:"max_version_del_cnt",  
		ScanCnt:"scan_cnt",  
		RowKey:"row_key",  
		RetCode:"ret_code",             
	}
	
// AllVirtualKvcacheInfo [...]		
type	AllVirtualKvcacheInfo	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
CacheName	string	`gorm:"column:cache_name" json:"cache_name"`			
CacheID	int64	`gorm:"column:cache_id" json:"cache_id"`			
Priority	int64	`gorm:"column:priority" json:"priority"`			
CacheSize	int64	`gorm:"column:cache_size" json:"cache_size"`			
CacheStoreSize	int64	`gorm:"column:cache_store_size" json:"cache_store_size"`			
CacheMapSize	int64	`gorm:"column:cache_map_size" json:"cache_map_size"`			
KvCnt	int64	`gorm:"column:kv_cnt" json:"kv_cnt"`			
HitRatio	float64	`gorm:"column:hit_ratio" json:"hit_ratio"`			
TotalPutCnt	int64	`gorm:"column:total_put_cnt" json:"total_put_cnt"`			
TotalHitCnt	int64	`gorm:"column:total_hit_cnt" json:"total_hit_cnt"`			
TotalMissCnt	int64	`gorm:"column:total_miss_cnt" json:"total_miss_cnt"`			
HoldSize	int64	`gorm:"column:hold_size" json:"hold_size"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualKvcacheInfo) TableName() string {
	return "__all_virtual_kvcache_info"
}
	

// AllVirtualKvcacheInfoColumns get sql column name.获取数据库列名
var AllVirtualKvcacheInfoColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	CacheName string
	CacheID string
	Priority string
	CacheSize string
	CacheStoreSize string
	CacheMapSize string
	KvCnt string
	HitRatio string
	TotalPutCnt string
	TotalHitCnt string
	TotalMissCnt string
	HoldSize string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		CacheName:"cache_name",  
		CacheID:"cache_id",  
		Priority:"priority",  
		CacheSize:"cache_size",  
		CacheStoreSize:"cache_store_size",  
		CacheMapSize:"cache_map_size",  
		KvCnt:"kv_cnt",  
		HitRatio:"hit_ratio",  
		TotalPutCnt:"total_put_cnt",  
		TotalHitCnt:"total_hit_cnt",  
		TotalMissCnt:"total_miss_cnt",  
		HoldSize:"hold_size",             
	}
	
// AllVirtualLatch [...]		
type	AllVirtualLatch	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
LatchID	int64	`gorm:"column:latch_id" json:"latch_id"`			
Name	string	`gorm:"column:name" json:"name"`			
Addr	string	`gorm:"column:addr" json:"addr"`			
Level	int64	`gorm:"column:level" json:"level"`			
Hash	int64	`gorm:"column:hash" json:"hash"`			
Gets	int64	`gorm:"column:gets" json:"gets"`			
Misses	int64	`gorm:"column:misses" json:"misses"`			
Sleeps	int64	`gorm:"column:sleeps" json:"sleeps"`			
ImmediateGets	int64	`gorm:"column:immediate_gets" json:"immediate_gets"`			
ImmediateMisses	int64	`gorm:"column:immediate_misses" json:"immediate_misses"`			
SpinGets	int64	`gorm:"column:spin_gets" json:"spin_gets"`			
WaitTime	int64	`gorm:"column:wait_time" json:"wait_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualLatch) TableName() string {
	return "__all_virtual_latch"
}
	

// AllVirtualLatchColumns get sql column name.获取数据库列名
var AllVirtualLatchColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	LatchID string
	Name string
	Addr string
	Level string
	Hash string
	Gets string
	Misses string
	Sleeps string
	ImmediateGets string
	ImmediateMisses string
	SpinGets string
	WaitTime string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		LatchID:"latch_id",  
		Name:"name",  
		Addr:"addr",  
		Level:"level",  
		Hash:"hash",  
		Gets:"gets",  
		Misses:"misses",  
		Sleeps:"sleeps",  
		ImmediateGets:"immediate_gets",  
		ImmediateMisses:"immediate_misses",  
		SpinGets:"spin_gets",  
		WaitTime:"wait_time",             
	}
	
// AllVirtualLeaderStat [...]		
type	AllVirtualLeaderStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
Region	string	`gorm:"column:region" json:"region"`			
RegionScore	int64	`gorm:"column:region_score" json:"region_score"`			
NotMerging	int64	`gorm:"column:not_merging" json:"not_merging"`			
CandidateCount	int64	`gorm:"column:candidate_count" json:"candidate_count"`			
IsCandidate	int64	`gorm:"column:is_candidate" json:"is_candidate"`			
MigrateOutOrTransformCount	int64	`gorm:"column:migrate_out_or_transform_count" json:"migrate_out_or_transform_count"`			
InNormalUnitCount	int64	`gorm:"column:in_normal_unit_count" json:"in_normal_unit_count"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
ZoneScore	int64	`gorm:"column:zone_score" json:"zone_score"`			
OriginalLeaderCount	int64	`gorm:"column:original_leader_count" json:"original_leader_count"`			
RandomScore	int64	`gorm:"column:random_score" json:"random_score"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualLeaderStat) TableName() string {
	return "__all_virtual_leader_stat"
}
	

// AllVirtualLeaderStatColumns get sql column name.获取数据库列名
var AllVirtualLeaderStatColumns = struct { 
	TenantID string
	TablegroupID string
	PartitionID string
	SvrIP string
	SvrPort string
	PrimaryZone string
	Region string
	RegionScore string
	NotMerging string
	CandidateCount string
	IsCandidate string
	MigrateOutOrTransformCount string
	InNormalUnitCount string
	Zone string
	ZoneScore string
	OriginalLeaderCount string
	RandomScore string    
	}{ 
		TenantID:"tenant_id",  
		TablegroupID:"tablegroup_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		PrimaryZone:"primary_zone",  
		Region:"region",  
		RegionScore:"region_score",  
		NotMerging:"not_merging",  
		CandidateCount:"candidate_count",  
		IsCandidate:"is_candidate",  
		MigrateOutOrTransformCount:"migrate_out_or_transform_count",  
		InNormalUnitCount:"in_normal_unit_count",  
		Zone:"zone",  
		ZoneScore:"zone_score",  
		OriginalLeaderCount:"original_leader_count",  
		RandomScore:"random_score",             
	}
	
// AllVirtualLockWaitStat [...]		
type	AllVirtualLockWaitStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
Rowkey	string	`gorm:"column:rowkey" json:"rowkey"`			
Addr	uint64	`gorm:"column:addr" json:"addr"`			
NeedWait	int8	`gorm:"column:need_wait" json:"need_wait"`			
RecvTs	int64	`gorm:"column:recv_ts" json:"recv_ts"`			
LockTs	int64	`gorm:"column:lock_ts" json:"lock_ts"`			
AbsTimeout	int64	`gorm:"column:abs_timeout" json:"abs_timeout"`			
TryLockTimes	int64	`gorm:"column:try_lock_times" json:"try_lock_times"`			
TimeAfterRecv	int64	`gorm:"column:time_after_recv" json:"time_after_recv"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
BlockSessionID	int64	`gorm:"column:block_session_id" json:"block_session_id"`			
Type	int64	`gorm:"column:type" json:"type"`			
LockMode	int64	`gorm:"column:lock_mode" json:"lock_mode"`			
TotalUpdateCnt	int64	`gorm:"column:total_update_cnt" json:"total_update_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualLockWaitStat) TableName() string {
	return "__all_virtual_lock_wait_stat"
}
	

// AllVirtualLockWaitStatColumns get sql column name.获取数据库列名
var AllVirtualLockWaitStatColumns = struct { 
	SvrIP string
	SvrPort string
	TableID string
	Rowkey string
	Addr string
	NeedWait string
	RecvTs string
	LockTs string
	AbsTimeout string
	TryLockTimes string
	TimeAfterRecv string
	SessionID string
	BlockSessionID string
	Type string
	LockMode string
	TotalUpdateCnt string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TableID:"table_id",  
		Rowkey:"rowkey",  
		Addr:"addr",  
		NeedWait:"need_wait",  
		RecvTs:"recv_ts",  
		LockTs:"lock_ts",  
		AbsTimeout:"abs_timeout",  
		TryLockTimes:"try_lock_times",  
		TimeAfterRecv:"time_after_recv",  
		SessionID:"session_id",  
		BlockSessionID:"block_session_id",  
		Type:"type",  
		LockMode:"lock_mode",  
		TotalUpdateCnt:"total_update_cnt",             
	}
	
// AllVirtualLongOpsStatus [...]		
type	AllVirtualLongOpsStatus	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Sid	int64	`gorm:"column:sid" json:"sid"`			
OpName	string	`gorm:"column:op_name" json:"op_name"`			
Target	string	`gorm:"column:target" json:"target"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
StartTime	int64	`gorm:"column:start_time" json:"start_time"`			
FinishTime	int64	`gorm:"column:finish_time" json:"finish_time"`			
ElapsedTime	int64	`gorm:"column:elapsed_time" json:"elapsed_time"`			
RemainingTime	int64	`gorm:"column:remaining_time" json:"remaining_time"`			
LastUpdateTime	int64	`gorm:"column:last_update_time" json:"last_update_time"`			
Percentage	int64	`gorm:"column:percentage" json:"percentage"`			
Message	string	`gorm:"column:message" json:"message"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualLongOpsStatus) TableName() string {
	return "__all_virtual_long_ops_status"
}
	

// AllVirtualLongOpsStatusColumns get sql column name.获取数据库列名
var AllVirtualLongOpsStatusColumns = struct { 
	TenantID string
	Sid string
	OpName string
	Target string
	SvrIP string
	SvrPort string
	StartTime string
	FinishTime string
	ElapsedTime string
	RemainingTime string
	LastUpdateTime string
	Percentage string
	Message string    
	}{ 
		TenantID:"tenant_id",  
		Sid:"sid",  
		OpName:"op_name",  
		Target:"target",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		StartTime:"start_time",  
		FinishTime:"finish_time",  
		ElapsedTime:"elapsed_time",  
		RemainingTime:"remaining_time",  
		LastUpdateTime:"last_update_time",  
		Percentage:"percentage",  
		Message:"message",             
	}
	
// AllVirtualMacroBlockMarkerStatus [...]		
type	AllVirtualMacroBlockMarkerStatus	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TotalCount	int64	`gorm:"column:total_count" json:"total_count"`			
ReservedCount	int64	`gorm:"column:reserved_count" json:"reserved_count"`			
MacroMetaCount	int64	`gorm:"column:macro_meta_count" json:"macro_meta_count"`			
PartitionMetaCount	int64	`gorm:"column:partition_meta_count" json:"partition_meta_count"`			
DataCount	int64	`gorm:"column:data_count" json:"data_count"`			
SecondIndexCount	int64	`gorm:"column:second_index_count" json:"second_index_count"`			
LobDataCount	int64	`gorm:"column:lob_data_count" json:"lob_data_count"`			
LobSecondIndexCount	int64	`gorm:"column:lob_second_index_count" json:"lob_second_index_count"`			
BloomfilterCount	int64	`gorm:"column:bloomfilter_count" json:"bloomfilter_count"`			
HoldCount	int64	`gorm:"column:hold_count" json:"hold_count"`			
PendingFreeCount	int64	`gorm:"column:pending_free_count" json:"pending_free_count"`			
FreeCount	int64	`gorm:"column:free_count" json:"free_count"`			
MarkCostTime	int64	`gorm:"column:mark_cost_time" json:"mark_cost_time"`			
SweepCostTime	int64	`gorm:"column:sweep_cost_time" json:"sweep_cost_time"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualMacroBlockMarkerStatus) TableName() string {
	return "__all_virtual_macro_block_marker_status"
}
	

// AllVirtualMacroBlockMarkerStatusColumns get sql column name.获取数据库列名
var AllVirtualMacroBlockMarkerStatusColumns = struct { 
	SvrIP string
	SvrPort string
	TotalCount string
	ReservedCount string
	MacroMetaCount string
	PartitionMetaCount string
	DataCount string
	SecondIndexCount string
	LobDataCount string
	LobSecondIndexCount string
	BloomfilterCount string
	HoldCount string
	PendingFreeCount string
	FreeCount string
	MarkCostTime string
	SweepCostTime string
	Comment string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TotalCount:"total_count",  
		ReservedCount:"reserved_count",  
		MacroMetaCount:"macro_meta_count",  
		PartitionMetaCount:"partition_meta_count",  
		DataCount:"data_count",  
		SecondIndexCount:"second_index_count",  
		LobDataCount:"lob_data_count",  
		LobSecondIndexCount:"lob_second_index_count",  
		BloomfilterCount:"bloomfilter_count",  
		HoldCount:"hold_count",  
		PendingFreeCount:"pending_free_count",  
		FreeCount:"free_count",  
		MarkCostTime:"mark_cost_time",  
		SweepCostTime:"sweep_cost_time",  
		Comment:"comment",             
	}
	
// AllVirtualMasterKeyVersionInfo [...]		
type	AllVirtualMasterKeyVersionInfo	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
MaxActiveVersion	int64	`gorm:"column:max_active_version" json:"max_active_version"`			
MaxStoredVersion	int64	`gorm:"column:max_stored_version" json:"max_stored_version"`			
ExpectVersion	int64	`gorm:"column:expect_version" json:"expect_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualMasterKeyVersionInfo) TableName() string {
	return "__all_virtual_master_key_version_info"
}
	

// AllVirtualMasterKeyVersionInfoColumns get sql column name.获取数据库列名
var AllVirtualMasterKeyVersionInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	MaxActiveVersion string
	MaxStoredVersion string
	ExpectVersion string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		MaxActiveVersion:"max_active_version",  
		MaxStoredVersion:"max_stored_version",  
		ExpectVersion:"expect_version",             
	}
	
// AllVirtualMemLeakCheckerInfo [...]		
type	AllVirtualMemLeakCheckerInfo	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
ModName	string	`gorm:"column:mod_name" json:"mod_name"`			
ModType	string	`gorm:"column:mod_type" json:"mod_type"`			
AllocCount	int64	`gorm:"column:alloc_count" json:"alloc_count"`			
AllocSize	int64	`gorm:"column:alloc_size" json:"alloc_size"`			
BackTrace	string	`gorm:"column:back_trace" json:"back_trace"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualMemLeakCheckerInfo) TableName() string {
	return "__all_virtual_mem_leak_checker_info"
}
	

// AllVirtualMemLeakCheckerInfoColumns get sql column name.获取数据库列名
var AllVirtualMemLeakCheckerInfoColumns = struct { 
	SvrIP string
	SvrPort string
	ModName string
	ModType string
	AllocCount string
	AllocSize string
	BackTrace string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ModName:"mod_name",  
		ModType:"mod_type",  
		AllocCount:"alloc_count",  
		AllocSize:"alloc_size",  
		BackTrace:"back_trace",             
	}
	
// AllVirtualMemoryContextStat [...]		
type	AllVirtualMemoryContextStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Entity	string	`gorm:"column:entity" json:"entity"`			
PEntity	string	`gorm:"column:p_entity" json:"p_entity"`			
Hold	int64	`gorm:"column:hold" json:"hold"`			
MallocHold	int64	`gorm:"column:malloc_hold" json:"malloc_hold"`			
MallocUsed	int64	`gorm:"column:malloc_used" json:"malloc_used"`			
ArenaHold	int64	`gorm:"column:arena_hold" json:"arena_hold"`			
ArenaUsed	int64	`gorm:"column:arena_used" json:"arena_used"`			
CreateTime	time.Time	`gorm:"column:create_time" json:"create_time"`			
Location	string	`gorm:"column:location" json:"location"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualMemoryContextStat) TableName() string {
	return "__all_virtual_memory_context_stat"
}
	

// AllVirtualMemoryContextStatColumns get sql column name.获取数据库列名
var AllVirtualMemoryContextStatColumns = struct { 
	SvrIP string
	SvrPort string
	Entity string
	PEntity string
	Hold string
	MallocHold string
	MallocUsed string
	ArenaHold string
	ArenaUsed string
	CreateTime string
	Location string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Entity:"entity",  
		PEntity:"p_entity",  
		Hold:"hold",  
		MallocHold:"malloc_hold",  
		MallocUsed:"malloc_used",  
		ArenaHold:"arena_hold",  
		ArenaUsed:"arena_used",  
		CreateTime:"create_time",  
		Location:"location",             
	}
	
// AllVirtualMemoryInfo [...]		
type	AllVirtualMemoryInfo	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
CtxID	int64	`gorm:"primaryKey;column:ctx_id" json:"-"`			
Label	string	`gorm:"primaryKey;column:label" json:"-"`			
CtxName	string	`gorm:"column:ctx_name" json:"ctx_name"`			
ModType	string	`gorm:"column:mod_type" json:"mod_type"`			
ModID	int64	`gorm:"column:mod_id" json:"mod_id"`			
ModName	string	`gorm:"column:mod_name" json:"mod_name"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Hold	int64	`gorm:"column:hold" json:"hold"`			
Used	int64	`gorm:"column:used" json:"used"`			
Count	int64	`gorm:"column:count" json:"count"`			
AllocCount	int64	`gorm:"column:alloc_count" json:"alloc_count"`			
FreeCount	int64	`gorm:"column:free_count" json:"free_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualMemoryInfo) TableName() string {
	return "__all_virtual_memory_info"
}
	

// AllVirtualMemoryInfoColumns get sql column name.获取数据库列名
var AllVirtualMemoryInfoColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	CtxID string
	Label string
	CtxName string
	ModType string
	ModID string
	ModName string
	Zone string
	Hold string
	Used string
	Count string
	AllocCount string
	FreeCount string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		CtxID:"ctx_id",  
		Label:"label",  
		CtxName:"ctx_name",  
		ModType:"mod_type",  
		ModID:"mod_id",  
		ModName:"mod_name",  
		Zone:"zone",  
		Hold:"hold",  
		Used:"used",  
		Count:"count",  
		AllocCount:"alloc_count",  
		FreeCount:"free_count",             
	}
	
// AllVirtualMemstoreInfo [...]		
type	AllVirtualMemstoreInfo	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Version	string	`gorm:"column:version" json:"version"`			
BaseVersion	int64	`gorm:"column:base_version" json:"base_version"`			
MultiVersionStart	int64	`gorm:"column:multi_version_start" json:"multi_version_start"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
IsActive	int64	`gorm:"column:is_active" json:"is_active"`			
MemUsed	int64	`gorm:"column:mem_used" json:"mem_used"`			
HashItemCount	int64	`gorm:"column:hash_item_count" json:"hash_item_count"`			
HashMemUsed	int64	`gorm:"column:hash_mem_used" json:"hash_mem_used"`			
BtreeItemCount	int64	`gorm:"column:btree_item_count" json:"btree_item_count"`			
BtreeMemUsed	int64	`gorm:"column:btree_mem_used" json:"btree_mem_used"`			
InsertRowCount	int64	`gorm:"column:insert_row_count" json:"insert_row_count"`			
UpdateRowCount	int64	`gorm:"column:update_row_count" json:"update_row_count"`			
DeleteRowCount	int64	`gorm:"column:delete_row_count" json:"delete_row_count"`			
PurgeRowCount	int64	`gorm:"column:purge_row_count" json:"purge_row_count"`			
PurgeQueueCount	int64	`gorm:"column:purge_queue_count" json:"purge_queue_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualMemstoreInfo) TableName() string {
	return "__all_virtual_memstore_info"
}
	

// AllVirtualMemstoreInfoColumns get sql column name.获取数据库列名
var AllVirtualMemstoreInfoColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	TableID string
	PartitionIDx string
	PartitionCnt string
	Version string
	BaseVersion string
	MultiVersionStart string
	SnapshotVersion string
	IsActive string
	MemUsed string
	HashItemCount string
	HashMemUsed string
	BtreeItemCount string
	BtreeMemUsed string
	InsertRowCount string
	UpdateRowCount string
	DeleteRowCount string
	PurgeRowCount string
	PurgeQueueCount string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		Version:"version",  
		BaseVersion:"base_version",  
		MultiVersionStart:"multi_version_start",  
		SnapshotVersion:"snapshot_version",  
		IsActive:"is_active",  
		MemUsed:"mem_used",  
		HashItemCount:"hash_item_count",  
		HashMemUsed:"hash_mem_used",  
		BtreeItemCount:"btree_item_count",  
		BtreeMemUsed:"btree_mem_used",  
		InsertRowCount:"insert_row_count",  
		UpdateRowCount:"update_row_count",  
		DeleteRowCount:"delete_row_count",  
		PurgeRowCount:"purge_row_count",  
		PurgeQueueCount:"purge_queue_count",             
	}
	
// AllVirtualMetaTable [...]		
type	AllVirtualMetaTable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
IsOriginalLeader	int64	`gorm:"column:is_original_leader" json:"is_original_leader"`			
IsPreviousLeader	int64	`gorm:"column:is_previous_leader" json:"is_previous_leader"`			
CreateTime	int64	`gorm:"column:create_time" json:"create_time"`			
Rebuild	int64	`gorm:"column:rebuild" json:"rebuild"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
Status	string	`gorm:"column:status" json:"status"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
PartitionChecksum	int64	`gorm:"column:partition_checksum" json:"partition_checksum"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
FailList	string	`gorm:"column:fail_list" json:"fail_list"`			
RecoveryTimestamp	int64	`gorm:"column:recovery_timestamp" json:"recovery_timestamp"`			
MemstorePercent	int64	`gorm:"column:memstore_percent" json:"memstore_percent"`			
DataFileID	int64	`gorm:"column:data_file_id" json:"data_file_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualMetaTable) TableName() string {
	return "__all_virtual_meta_table"
}
	

// AllVirtualMetaTableColumns get sql column name.获取数据库列名
var AllVirtualMetaTableColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	GmtCreate string
	GmtModified string
	SQLPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	RowCount string
	DataSize string
	DataVersion string
	DataChecksum string
	RowChecksum string
	ColumnChecksum string
	IsOriginalLeader string
	IsPreviousLeader string
	CreateTime string
	Rebuild string
	ReplicaType string
	RequiredSize string
	Status string
	IsRestore string
	PartitionChecksum string
	Quorum string
	FailList string
	RecoveryTimestamp string
	MemstorePercent string
	DataFileID string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SQLPort:"sql_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		DataChecksum:"data_checksum",  
		RowChecksum:"row_checksum",  
		ColumnChecksum:"column_checksum",  
		IsOriginalLeader:"is_original_leader",  
		IsPreviousLeader:"is_previous_leader",  
		CreateTime:"create_time",  
		Rebuild:"rebuild",  
		ReplicaType:"replica_type",  
		RequiredSize:"required_size",  
		Status:"status",  
		IsRestore:"is_restore",  
		PartitionChecksum:"partition_checksum",  
		Quorum:"quorum",  
		FailList:"fail_list",  
		RecoveryTimestamp:"recovery_timestamp",  
		MemstorePercent:"memstore_percent",  
		DataFileID:"data_file_id",             
	}
	
// AllVirtualObjauth [...]		
type	AllVirtualObjauth	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjID	int64	`gorm:"primaryKey;column:obj_id" json:"-"`			
Objtype	int64	`gorm:"primaryKey;column:objtype" json:"-"`			
ColID	int64	`gorm:"primaryKey;column:col_id" json:"-"`			
GrantorID	int64	`gorm:"primaryKey;column:grantor_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
PrivID	int64	`gorm:"primaryKey;column:priv_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
PrivOption	int64	`gorm:"column:priv_option" json:"priv_option"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualObjauth) TableName() string {
	return "__all_virtual_objauth"
}
	

// AllVirtualObjauthColumns get sql column name.获取数据库列名
var AllVirtualObjauthColumns = struct { 
	TenantID string
	ObjID string
	Objtype string
	ColID string
	GrantorID string
	GranteeID string
	PrivID string
	GmtCreate string
	GmtModified string
	PrivOption string    
	}{ 
		TenantID:"tenant_id",  
		ObjID:"obj_id",  
		Objtype:"objtype",  
		ColID:"col_id",  
		GrantorID:"grantor_id",  
		GranteeID:"grantee_id",  
		PrivID:"priv_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		PrivOption:"priv_option",             
	}
	
// AllVirtualObjauthHistory [...]		
type	AllVirtualObjauthHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjID	int64	`gorm:"primaryKey;column:obj_id" json:"-"`			
Objtype	int64	`gorm:"primaryKey;column:objtype" json:"-"`			
ColID	int64	`gorm:"primaryKey;column:col_id" json:"-"`			
GrantorID	int64	`gorm:"primaryKey;column:grantor_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
PrivID	int64	`gorm:"primaryKey;column:priv_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PrivOption	int64	`gorm:"column:priv_option" json:"priv_option"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualObjauthHistory) TableName() string {
	return "__all_virtual_objauth_history"
}
	

// AllVirtualObjauthHistoryColumns get sql column name.获取数据库列名
var AllVirtualObjauthHistoryColumns = struct { 
	TenantID string
	ObjID string
	Objtype string
	ColID string
	GrantorID string
	GranteeID string
	PrivID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	PrivOption string    
	}{ 
		TenantID:"tenant_id",  
		ObjID:"obj_id",  
		Objtype:"objtype",  
		ColID:"col_id",  
		GrantorID:"grantor_id",  
		GranteeID:"grantee_id",  
		PrivID:"priv_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		PrivOption:"priv_option",             
	}
	
// AllVirtualObjectType [...]		
type	AllVirtualObjectType	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjectTypeID	int64	`gorm:"primaryKey;column:object_type_id" json:"-"`			
Type	int64	`gorm:"primaryKey;column:type" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ObjectName	string	`gorm:"column:object_name" json:"object_name"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
Source	string	`gorm:"column:source" json:"source"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualObjectType) TableName() string {
	return "__all_virtual_object_type"
}
	

// AllVirtualObjectTypeColumns get sql column name.获取数据库列名
var AllVirtualObjectTypeColumns = struct { 
	TenantID string
	ObjectTypeID string
	Type string
	GmtCreate string
	GmtModified string
	SchemaVersion string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	DatabaseID string
	Flag string
	OwnerID string
	CompFlag string
	ObjectName string
	ExecEnv string
	Source string
	Comment string
	RouteSQL string    
	}{ 
		TenantID:"tenant_id",  
		ObjectTypeID:"object_type_id",  
		Type:"type",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SchemaVersion:"schema_version",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		DatabaseID:"database_id",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		CompFlag:"comp_flag",  
		ObjectName:"object_name",  
		ExecEnv:"exec_env",  
		Source:"source",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllVirtualObrpcStat [...]		
type	AllVirtualObrpcStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
DestIP	string	`gorm:"column:dest_ip" json:"dest_ip"`			
DestPort	int64	`gorm:"column:dest_port" json:"dest_port"`			
Index	int64	`gorm:"column:index" json:"index"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Pcode	int64	`gorm:"column:pcode" json:"pcode"`			
PcodeName	string	`gorm:"column:pcode_name" json:"pcode_name"`			
Count	int64	`gorm:"column:count" json:"count"`			
TotalTime	int64	`gorm:"column:total_time" json:"total_time"`			
TotalSize	int64	`gorm:"column:total_size" json:"total_size"`			
MaxTime	int64	`gorm:"column:max_time" json:"max_time"`			
MinTime	int64	`gorm:"column:min_time" json:"min_time"`			
MaxSize	int64	`gorm:"column:max_size" json:"max_size"`			
MinSize	int64	`gorm:"column:min_size" json:"min_size"`			
Failure	int64	`gorm:"column:failure" json:"failure"`			
Timeout	int64	`gorm:"column:timeout" json:"timeout"`			
Sync	int64	`gorm:"column:sync" json:"sync"`			
Async	int64	`gorm:"column:async" json:"async"`			
LastTimestamp	time.Time	`gorm:"column:last_timestamp" json:"last_timestamp"`			
Isize	int64	`gorm:"column:isize" json:"isize"`			
Icount	int64	`gorm:"column:icount" json:"icount"`			
NetTime	int64	`gorm:"column:net_time" json:"net_time"`			
WaitTime	int64	`gorm:"column:wait_time" json:"wait_time"`			
QueueTime	int64	`gorm:"column:queue_time" json:"queue_time"`			
ProcessTime	int64	`gorm:"column:process_time" json:"process_time"`			
IlastTimestamp	time.Time	`gorm:"column:ilast_timestamp" json:"ilast_timestamp"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualObrpcStat) TableName() string {
	return "__all_virtual_obrpc_stat"
}
	

// AllVirtualObrpcStatColumns get sql column name.获取数据库列名
var AllVirtualObrpcStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	DestIP string
	DestPort string
	Index string
	Zone string
	Pcode string
	PcodeName string
	Count string
	TotalTime string
	TotalSize string
	MaxTime string
	MinTime string
	MaxSize string
	MinSize string
	Failure string
	Timeout string
	Sync string
	Async string
	LastTimestamp string
	Isize string
	Icount string
	NetTime string
	WaitTime string
	QueueTime string
	ProcessTime string
	IlastTimestamp string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		DestIP:"dest_ip",  
		DestPort:"dest_port",  
		Index:"index",  
		Zone:"zone",  
		Pcode:"pcode",  
		PcodeName:"pcode_name",  
		Count:"count",  
		TotalTime:"total_time",  
		TotalSize:"total_size",  
		MaxTime:"max_time",  
		MinTime:"min_time",  
		MaxSize:"max_size",  
		MinSize:"min_size",  
		Failure:"failure",  
		Timeout:"timeout",  
		Sync:"sync",  
		Async:"async",  
		LastTimestamp:"last_timestamp",  
		Isize:"isize",  
		Icount:"icount",  
		NetTime:"net_time",  
		WaitTime:"wait_time",  
		QueueTime:"queue_time",  
		ProcessTime:"process_time",  
		IlastTimestamp:"ilast_timestamp",             
	}
	
// AllVirtualOpenCursor [...]		
type	AllVirtualOpenCursor	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
Saddr	string	`gorm:"column:SADDR" json:"saddr"`			
Sid	int64	`gorm:"column:SID" json:"s_id"`			
UserName	string	`gorm:"column:USER_NAME" json:"user_name"`			
Address	string	`gorm:"column:ADDRESS" json:"address"`			
HashValue	int64	`gorm:"column:HASH_VALUE" json:"hash_value"`			
SQLID	string	`gorm:"column:SQL_ID" json:"sql_id"`			
SQLText	string	`gorm:"column:SQL_TEXT" json:"sql_text"`			
LastSQLActiveTime	time.Time	`gorm:"column:LAST_SQL_ACTIVE_TIME" json:"last_sql_active_time"`			
SQLExecID	int64	`gorm:"column:SQL_EXEC_ID" json:"sql_exec_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualOpenCursor) TableName() string {
	return "__all_virtual_open_cursor"
}
	

// AllVirtualOpenCursorColumns get sql column name.获取数据库列名
var AllVirtualOpenCursorColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	Saddr string
	Sid string
	UserName string
	Address string
	HashValue string
	SQLID string
	SQLText string
	LastSQLActiveTime string
	SQLExecID string    
	}{ 
		TenantID:"TENANT_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		Saddr:"SADDR",  
		Sid:"SID",  
		UserName:"USER_NAME",  
		Address:"ADDRESS",  
		HashValue:"HASH_VALUE",  
		SQLID:"SQL_ID",  
		SQLText:"SQL_TEXT",  
		LastSQLActiveTime:"LAST_SQL_ACTIVE_TIME",  
		SQLExecID:"SQL_EXEC_ID",             
	}
	
// AllVirtualOriSchemaVersion [...]		
type	AllVirtualOriSchemaVersion	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
OriSchemaVersion	int64	`gorm:"column:ori_schema_version" json:"ori_schema_version"`			
BuildingSnapshot	int64	`gorm:"column:building_snapshot" json:"building_snapshot"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualOriSchemaVersion) TableName() string {
	return "__all_virtual_ori_schema_version"
}
	

// AllVirtualOriSchemaVersionColumns get sql column name.获取数据库列名
var AllVirtualOriSchemaVersionColumns = struct { 
	TenantID string
	TableID string
	GmtCreate string
	GmtModified string
	OriSchemaVersion string
	BuildingSnapshot string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		OriSchemaVersion:"ori_schema_version",  
		BuildingSnapshot:"building_snapshot",             
	}
	
// AllVirtualOutline [...]		
type	AllVirtualOutline	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
OutlineID	int64	`gorm:"primaryKey;column:outline_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
Name	string	`gorm:"column:name" json:"name"`			
Signature	[]byte	`gorm:"column:signature" json:"signature"`			
OutlineContent	string	`gorm:"column:outline_content" json:"outline_content"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
Owner	string	`gorm:"column:owner" json:"owner"`			
Used	int64	`gorm:"column:used" json:"used"`			
Version	string	`gorm:"column:version" json:"version"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
Enabled	int64	`gorm:"column:enabled" json:"enabled"`			
Format	int64	`gorm:"column:format" json:"format"`			
OutlineParams	[]byte	`gorm:"column:outline_params" json:"outline_params"`			
OutlineTarget	string	`gorm:"column:outline_target" json:"outline_target"`			
SQLID	[]byte	`gorm:"column:sql_id" json:"sql_id"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualOutline) TableName() string {
	return "__all_virtual_outline"
}
	

// AllVirtualOutlineColumns get sql column name.获取数据库列名
var AllVirtualOutlineColumns = struct { 
	TenantID string
	OutlineID string
	GmtCreate string
	GmtModified string
	DatabaseID string
	SchemaVersion string
	Name string
	Signature string
	OutlineContent string
	SQLText string
	Owner string
	Used string
	Version string
	Compatible string
	Enabled string
	Format string
	OutlineParams string
	OutlineTarget string
	SQLID string
	OwnerID string    
	}{ 
		TenantID:"tenant_id",  
		OutlineID:"outline_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		Name:"name",  
		Signature:"signature",  
		OutlineContent:"outline_content",  
		SQLText:"sql_text",  
		Owner:"owner",  
		Used:"used",  
		Version:"version",  
		Compatible:"compatible",  
		Enabled:"enabled",  
		Format:"format",  
		OutlineParams:"outline_params",  
		OutlineTarget:"outline_target",  
		SQLID:"sql_id",  
		OwnerID:"owner_id",             
	}
	
// AllVirtualOutlineHistory [...]		
type	AllVirtualOutlineHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
OutlineID	int64	`gorm:"primaryKey;column:outline_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
Name	string	`gorm:"column:name" json:"name"`			
Signature	[]byte	`gorm:"column:signature" json:"signature"`			
OutlineContent	string	`gorm:"column:outline_content" json:"outline_content"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
Owner	string	`gorm:"column:owner" json:"owner"`			
Used	int64	`gorm:"column:used" json:"used"`			
Version	string	`gorm:"column:version" json:"version"`			
Compatible	int64	`gorm:"column:compatible" json:"compatible"`			
Enabled	int64	`gorm:"column:enabled" json:"enabled"`			
Format	int64	`gorm:"column:format" json:"format"`			
OutlineParams	[]byte	`gorm:"column:outline_params" json:"outline_params"`			
OutlineTarget	string	`gorm:"column:outline_target" json:"outline_target"`			
SQLID	[]byte	`gorm:"column:sql_id" json:"sql_id"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualOutlineHistory) TableName() string {
	return "__all_virtual_outline_history"
}
	

// AllVirtualOutlineHistoryColumns get sql column name.获取数据库列名
var AllVirtualOutlineHistoryColumns = struct { 
	TenantID string
	OutlineID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DatabaseID string
	Name string
	Signature string
	OutlineContent string
	SQLText string
	Owner string
	Used string
	Version string
	Compatible string
	Enabled string
	Format string
	OutlineParams string
	OutlineTarget string
	SQLID string
	OwnerID string    
	}{ 
		TenantID:"tenant_id",  
		OutlineID:"outline_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		Name:"name",  
		Signature:"signature",  
		OutlineContent:"outline_content",  
		SQLText:"sql_text",  
		Owner:"owner",  
		Used:"used",  
		Version:"version",  
		Compatible:"compatible",  
		Enabled:"enabled",  
		Format:"format",  
		OutlineParams:"outline_params",  
		OutlineTarget:"outline_target",  
		SQLID:"sql_id",  
		OwnerID:"owner_id",             
	}
	
// AllVirtualPackage [...]		
type	AllVirtualPackage	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
PackageID	int64	`gorm:"primaryKey;column:package_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
PackageName	string	`gorm:"column:package_name" json:"package_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
Type	int64	`gorm:"column:type" json:"type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
Source	string	`gorm:"column:source" json:"source"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPackage) TableName() string {
	return "__all_virtual_package"
}
	

// AllVirtualPackageColumns get sql column name.获取数据库列名
var AllVirtualPackageColumns = struct { 
	TenantID string
	PackageID string
	GmtCreate string
	GmtModified string
	DatabaseID string
	PackageName string
	SchemaVersion string
	Type string
	Flag string
	OwnerID string
	CompFlag string
	ExecEnv string
	Source string
	Comment string
	RouteSQL string    
	}{ 
		TenantID:"tenant_id",  
		PackageID:"package_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DatabaseID:"database_id",  
		PackageName:"package_name",  
		SchemaVersion:"schema_version",  
		Type:"type",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		CompFlag:"comp_flag",  
		ExecEnv:"exec_env",  
		Source:"source",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllVirtualPackageHistory [...]		
type	AllVirtualPackageHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
PackageID	int64	`gorm:"primaryKey;column:package_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
PackageName	string	`gorm:"column:package_name" json:"package_name"`			
Type	int64	`gorm:"column:type" json:"type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
Source	string	`gorm:"column:source" json:"source"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPackageHistory) TableName() string {
	return "__all_virtual_package_history"
}
	

// AllVirtualPackageHistoryColumns get sql column name.获取数据库列名
var AllVirtualPackageHistoryColumns = struct { 
	TenantID string
	PackageID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DatabaseID string
	PackageName string
	Type string
	Flag string
	OwnerID string
	CompFlag string
	ExecEnv string
	Source string
	Comment string
	RouteSQL string    
	}{ 
		TenantID:"tenant_id",  
		PackageID:"package_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		PackageName:"package_name",  
		Type:"type",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		CompFlag:"comp_flag",  
		ExecEnv:"exec_env",  
		Source:"source",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllVirtualPart [...]		
type	AllVirtualPart	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
PartName	string	`gorm:"column:part_name" json:"part_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
SubPartSpace	int64	`gorm:"column:sub_part_space" json:"sub_part_space"`			
NewSubPartNum	int64	`gorm:"column:new_sub_part_num" json:"new_sub_part_num"`			
NewSubPartSpace	int64	`gorm:"column:new_sub_part_space" json:"new_sub_part_space"`			
SubPartInterval	string	`gorm:"column:sub_part_interval" json:"sub_part_interval"`			
SubIntervalStart	string	`gorm:"column:sub_interval_start" json:"sub_interval_start"`			
NewSubPartInterval	string	`gorm:"column:new_sub_part_interval" json:"new_sub_part_interval"`			
NewSubIntervalStart	string	`gorm:"column:new_sub_interval_start" json:"new_sub_interval_start"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
PartIDx	int64	`gorm:"column:part_idx" json:"part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgPartID	int64	`gorm:"column:mapping_pg_part_id" json:"mapping_pg_part_id"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
MaxUsedSubPartID	int64	`gorm:"column:max_used_sub_part_id" json:"max_used_sub_part_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPart) TableName() string {
	return "__all_virtual_part"
}
	

// AllVirtualPartColumns get sql column name.获取数据库列名
var AllVirtualPartColumns = struct { 
	TenantID string
	TableID string
	PartID string
	GmtCreate string
	GmtModified string
	PartName string
	SchemaVersion string
	HighBoundVal string
	BHighBoundVal string
	SubPartNum string
	SubPartSpace string
	NewSubPartNum string
	NewSubPartSpace string
	SubPartInterval string
	SubIntervalStart string
	NewSubPartInterval string
	NewSubIntervalStart string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Status string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	PartIDx string
	SourcePartitionID string
	MappingPgPartID string
	TablespaceID string
	DropSchemaVersion string
	MaxUsedSubPartID string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartID:"part_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		PartName:"part_name",  
		SchemaVersion:"schema_version",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		SubPartNum:"sub_part_num",  
		SubPartSpace:"sub_part_space",  
		NewSubPartNum:"new_sub_part_num",  
		NewSubPartSpace:"new_sub_part_space",  
		SubPartInterval:"sub_part_interval",  
		SubIntervalStart:"sub_interval_start",  
		NewSubPartInterval:"new_sub_part_interval",  
		NewSubIntervalStart:"new_sub_interval_start",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Status:"status",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		PartIDx:"part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgPartID:"mapping_pg_part_id",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		MaxUsedSubPartID:"max_used_sub_part_id",             
	}
	
// AllVirtualPartHistory [...]		
type	AllVirtualPartHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PartName	string	`gorm:"column:part_name" json:"part_name"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
SubPartSpace	int64	`gorm:"column:sub_part_space" json:"sub_part_space"`			
NewSubPartNum	int64	`gorm:"column:new_sub_part_num" json:"new_sub_part_num"`			
NewSubPartSpace	int64	`gorm:"column:new_sub_part_space" json:"new_sub_part_space"`			
SubPartInterval	string	`gorm:"column:sub_part_interval" json:"sub_part_interval"`			
SubIntervalStart	string	`gorm:"column:sub_interval_start" json:"sub_interval_start"`			
NewSubPartInterval	string	`gorm:"column:new_sub_part_interval" json:"new_sub_part_interval"`			
NewSubIntervalStart	string	`gorm:"column:new_sub_interval_start" json:"new_sub_interval_start"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
PartIDx	int64	`gorm:"column:part_idx" json:"part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgPartID	int64	`gorm:"column:mapping_pg_part_id" json:"mapping_pg_part_id"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
MaxUsedSubPartID	int64	`gorm:"column:max_used_sub_part_id" json:"max_used_sub_part_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartHistory) TableName() string {
	return "__all_virtual_part_history"
}
	

// AllVirtualPartHistoryColumns get sql column name.获取数据库列名
var AllVirtualPartHistoryColumns = struct { 
	TenantID string
	TableID string
	PartID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	PartName string
	HighBoundVal string
	BHighBoundVal string
	SubPartNum string
	SubPartSpace string
	NewSubPartNum string
	NewSubPartSpace string
	SubPartInterval string
	SubIntervalStart string
	NewSubPartInterval string
	NewSubIntervalStart string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Status string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	PartIDx string
	SourcePartitionID string
	MappingPgPartID string
	TablespaceID string
	DropSchemaVersion string
	MaxUsedSubPartID string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartID:"part_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		PartName:"part_name",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		SubPartNum:"sub_part_num",  
		SubPartSpace:"sub_part_space",  
		NewSubPartNum:"new_sub_part_num",  
		NewSubPartSpace:"new_sub_part_space",  
		SubPartInterval:"sub_part_interval",  
		SubIntervalStart:"sub_interval_start",  
		NewSubPartInterval:"new_sub_part_interval",  
		NewSubIntervalStart:"new_sub_interval_start",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Status:"status",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		PartIDx:"part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgPartID:"mapping_pg_part_id",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		MaxUsedSubPartID:"max_used_sub_part_id",             
	}
	
// AllVirtualPartInfo [...]		
type	AllVirtualPartInfo	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
PartType	int64	`gorm:"column:part_type" json:"part_type"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
PartSpace	int64	`gorm:"column:part_space" json:"part_space"`			
NewPartNum	int64	`gorm:"column:new_part_num" json:"new_part_num"`			
NewPartSpace	int64	`gorm:"column:new_part_space" json:"new_part_space"`			
SubPartType	int64	`gorm:"column:sub_part_type" json:"sub_part_type"`			
DefSubPartNum	int64	`gorm:"column:def_sub_part_num" json:"def_sub_part_num"`			
PartExpr	string	`gorm:"column:part_expr" json:"part_expr"`			
SubPartExpr	string	`gorm:"column:sub_part_expr" json:"sub_part_expr"`			
PartInterval	string	`gorm:"column:part_interval" json:"part_interval"`			
IntervalStart	string	`gorm:"column:interval_start" json:"interval_start"`			
NewPartInterval	string	`gorm:"column:new_part_interval" json:"new_part_interval"`			
NewIntervalStart	string	`gorm:"column:new_interval_start" json:"new_interval_start"`			
DefSubPartInterval	string	`gorm:"column:def_sub_part_interval" json:"def_sub_part_interval"`			
DefSubIntervalStart	string	`gorm:"column:def_sub_interval_start" json:"def_sub_interval_start"`			
NewDefSubPartInterval	string	`gorm:"column:new_def_sub_part_interval" json:"new_def_sub_part_interval"`			
NewDefSubIntervalStart	string	`gorm:"column:new_def_sub_interval_start" json:"new_def_sub_interval_start"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartInfo) TableName() string {
	return "__all_virtual_part_info"
}
	

// AllVirtualPartInfoColumns get sql column name.获取数据库列名
var AllVirtualPartInfoColumns = struct { 
	TenantID string
	TableID string
	GmtCreate string
	GmtModified string
	PartType string
	SchemaVersion string
	PartNum string
	PartSpace string
	NewPartNum string
	NewPartSpace string
	SubPartType string
	DefSubPartNum string
	PartExpr string
	SubPartExpr string
	PartInterval string
	IntervalStart string
	NewPartInterval string
	NewIntervalStart string
	DefSubPartInterval string
	DefSubIntervalStart string
	NewDefSubPartInterval string
	NewDefSubIntervalStart string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Spare1 string
	Spare2 string
	Spare3 string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		PartType:"part_type",  
		SchemaVersion:"schema_version",  
		PartNum:"part_num",  
		PartSpace:"part_space",  
		NewPartNum:"new_part_num",  
		NewPartSpace:"new_part_space",  
		SubPartType:"sub_part_type",  
		DefSubPartNum:"def_sub_part_num",  
		PartExpr:"part_expr",  
		SubPartExpr:"sub_part_expr",  
		PartInterval:"part_interval",  
		IntervalStart:"interval_start",  
		NewPartInterval:"new_part_interval",  
		NewIntervalStart:"new_interval_start",  
		DefSubPartInterval:"def_sub_part_interval",  
		DefSubIntervalStart:"def_sub_interval_start",  
		NewDefSubPartInterval:"new_def_sub_part_interval",  
		NewDefSubIntervalStart:"new_def_sub_interval_start",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",             
	}
	
// AllVirtualPartInfoHistory [...]		
type	AllVirtualPartInfoHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PartType	int64	`gorm:"column:part_type" json:"part_type"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
PartSpace	int64	`gorm:"column:part_space" json:"part_space"`			
NewPartNum	int64	`gorm:"column:new_part_num" json:"new_part_num"`			
NewPartSpace	int64	`gorm:"column:new_part_space" json:"new_part_space"`			
SubPartType	int64	`gorm:"column:sub_part_type" json:"sub_part_type"`			
DefSubPartNum	int64	`gorm:"column:def_sub_part_num" json:"def_sub_part_num"`			
PartExpr	string	`gorm:"column:part_expr" json:"part_expr"`			
SubPartExpr	string	`gorm:"column:sub_part_expr" json:"sub_part_expr"`			
PartInterval	string	`gorm:"column:part_interval" json:"part_interval"`			
IntervalStart	string	`gorm:"column:interval_start" json:"interval_start"`			
NewPartInterval	string	`gorm:"column:new_part_interval" json:"new_part_interval"`			
NewIntervalStart	string	`gorm:"column:new_interval_start" json:"new_interval_start"`			
DefSubPartInterval	string	`gorm:"column:def_sub_part_interval" json:"def_sub_part_interval"`			
DefSubIntervalStart	string	`gorm:"column:def_sub_interval_start" json:"def_sub_interval_start"`			
NewDefSubPartInterval	string	`gorm:"column:new_def_sub_part_interval" json:"new_def_sub_part_interval"`			
NewDefSubIntervalStart	string	`gorm:"column:new_def_sub_interval_start" json:"new_def_sub_interval_start"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartInfoHistory) TableName() string {
	return "__all_virtual_part_info_history"
}
	

// AllVirtualPartInfoHistoryColumns get sql column name.获取数据库列名
var AllVirtualPartInfoHistoryColumns = struct { 
	TenantID string
	TableID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	PartType string
	PartNum string
	PartSpace string
	NewPartNum string
	NewPartSpace string
	SubPartType string
	DefSubPartNum string
	PartExpr string
	SubPartExpr string
	PartInterval string
	IntervalStart string
	NewPartInterval string
	NewIntervalStart string
	DefSubPartInterval string
	DefSubIntervalStart string
	NewDefSubPartInterval string
	NewDefSubIntervalStart string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Spare1 string
	Spare2 string
	Spare3 string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		PartType:"part_type",  
		PartNum:"part_num",  
		PartSpace:"part_space",  
		NewPartNum:"new_part_num",  
		NewPartSpace:"new_part_space",  
		SubPartType:"sub_part_type",  
		DefSubPartNum:"def_sub_part_num",  
		PartExpr:"part_expr",  
		SubPartExpr:"sub_part_expr",  
		PartInterval:"part_interval",  
		IntervalStart:"interval_start",  
		NewPartInterval:"new_part_interval",  
		NewIntervalStart:"new_interval_start",  
		DefSubPartInterval:"def_sub_part_interval",  
		DefSubIntervalStart:"def_sub_interval_start",  
		NewDefSubPartInterval:"new_def_sub_part_interval",  
		NewDefSubIntervalStart:"new_def_sub_interval_start",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",             
	}
	
// AllVirtualPartitionAmplificationStat [...]		
type	AllVirtualPartitionAmplificationStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
DirtyRatio1	int64	`gorm:"column:dirty_ratio_1" json:"dirty_ratio_1"`			
DirtyRatio3	int64	`gorm:"column:dirty_ratio_3" json:"dirty_ratio_3"`			
DirtyRatio5	int64	`gorm:"column:dirty_ratio_5" json:"dirty_ratio_5"`			
DirtyRatio10	int64	`gorm:"column:dirty_ratio_10" json:"dirty_ratio_10"`			
DirtyRatio15	int64	`gorm:"column:dirty_ratio_15" json:"dirty_ratio_15"`			
DirtyRatio20	int64	`gorm:"column:dirty_ratio_20" json:"dirty_ratio_20"`			
DirtyRatio30	int64	`gorm:"column:dirty_ratio_30" json:"dirty_ratio_30"`			
DirtyRatio50	int64	`gorm:"column:dirty_ratio_50" json:"dirty_ratio_50"`			
DirtyRatio75	int64	`gorm:"column:dirty_ratio_75" json:"dirty_ratio_75"`			
DirtyRatio100	int64	`gorm:"column:dirty_ratio_100" json:"dirty_ratio_100"`			
MacroBlockCnt	int64	`gorm:"column:macro_block_cnt" json:"macro_block_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionAmplificationStat) TableName() string {
	return "__all_virtual_partition_amplification_stat"
}
	

// AllVirtualPartitionAmplificationStatColumns get sql column name.获取数据库列名
var AllVirtualPartitionAmplificationStatColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionIDx string
	PartitionCnt string
	DirtyRatio1 string
	DirtyRatio3 string
	DirtyRatio5 string
	DirtyRatio10 string
	DirtyRatio15 string
	DirtyRatio20 string
	DirtyRatio30 string
	DirtyRatio50 string
	DirtyRatio75 string
	DirtyRatio100 string
	MacroBlockCnt string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		DirtyRatio1:"dirty_ratio_1",  
		DirtyRatio3:"dirty_ratio_3",  
		DirtyRatio5:"dirty_ratio_5",  
		DirtyRatio10:"dirty_ratio_10",  
		DirtyRatio15:"dirty_ratio_15",  
		DirtyRatio20:"dirty_ratio_20",  
		DirtyRatio30:"dirty_ratio_30",  
		DirtyRatio50:"dirty_ratio_50",  
		DirtyRatio75:"dirty_ratio_75",  
		DirtyRatio100:"dirty_ratio_100",  
		MacroBlockCnt:"macro_block_cnt",             
	}
	
// AllVirtualPartitionAudit [...]		
type	AllVirtualPartitionAudit	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
BaseRowCount	int64	`gorm:"column:base_row_count" json:"base_row_count"`			
InsertRowCount	int64	`gorm:"column:insert_row_count" json:"insert_row_count"`			
DeleteRowCount	int64	`gorm:"column:delete_row_count" json:"delete_row_count"`			
UpdateRowCount	int64	`gorm:"column:update_row_count" json:"update_row_count"`			
QueryRowCount	int64	`gorm:"column:query_row_count" json:"query_row_count"`			
InsertSQLCount	int64	`gorm:"column:insert_sql_count" json:"insert_sql_count"`			
DeleteSQLCount	int64	`gorm:"column:delete_sql_count" json:"delete_sql_count"`			
UpdateSQLCount	int64	`gorm:"column:update_sql_count" json:"update_sql_count"`			
QuerySQLCount	int64	`gorm:"column:query_sql_count" json:"query_sql_count"`			
TransCount	int64	`gorm:"column:trans_count" json:"trans_count"`			
SQLCount	int64	`gorm:"column:sql_count" json:"sql_count"`			
RollbackInsertRowCount	int64	`gorm:"column:rollback_insert_row_count" json:"rollback_insert_row_count"`			
RollbackDeleteRowCount	int64	`gorm:"column:rollback_delete_row_count" json:"rollback_delete_row_count"`			
RollbackUpdateRowCount	int64	`gorm:"column:rollback_update_row_count" json:"rollback_update_row_count"`			
RollbackInsertSQLCount	int64	`gorm:"column:rollback_insert_sql_count" json:"rollback_insert_sql_count"`			
RollbackDeleteSQLCount	int64	`gorm:"column:rollback_delete_sql_count" json:"rollback_delete_sql_count"`			
RollbackUpdateSQLCount	int64	`gorm:"column:rollback_update_sql_count" json:"rollback_update_sql_count"`			
RollbackTransCount	int64	`gorm:"column:rollback_trans_count" json:"rollback_trans_count"`			
RollbackSQLCount	int64	`gorm:"column:rollback_sql_count" json:"rollback_sql_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionAudit) TableName() string {
	return "__all_virtual_partition_audit"
}
	

// AllVirtualPartitionAuditColumns get sql column name.获取数据库列名
var AllVirtualPartitionAuditColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	PartitionStatus string
	BaseRowCount string
	InsertRowCount string
	DeleteRowCount string
	UpdateRowCount string
	QueryRowCount string
	InsertSQLCount string
	DeleteSQLCount string
	UpdateSQLCount string
	QuerySQLCount string
	TransCount string
	SQLCount string
	RollbackInsertRowCount string
	RollbackDeleteRowCount string
	RollbackUpdateRowCount string
	RollbackInsertSQLCount string
	RollbackDeleteSQLCount string
	RollbackUpdateSQLCount string
	RollbackTransCount string
	RollbackSQLCount string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		PartitionStatus:"partition_status",  
		BaseRowCount:"base_row_count",  
		InsertRowCount:"insert_row_count",  
		DeleteRowCount:"delete_row_count",  
		UpdateRowCount:"update_row_count",  
		QueryRowCount:"query_row_count",  
		InsertSQLCount:"insert_sql_count",  
		DeleteSQLCount:"delete_sql_count",  
		UpdateSQLCount:"update_sql_count",  
		QuerySQLCount:"query_sql_count",  
		TransCount:"trans_count",  
		SQLCount:"sql_count",  
		RollbackInsertRowCount:"rollback_insert_row_count",  
		RollbackDeleteRowCount:"rollback_delete_row_count",  
		RollbackUpdateRowCount:"rollback_update_row_count",  
		RollbackInsertSQLCount:"rollback_insert_sql_count",  
		RollbackDeleteSQLCount:"rollback_delete_sql_count",  
		RollbackUpdateSQLCount:"rollback_update_sql_count",  
		RollbackTransCount:"rollback_trans_count",  
		RollbackSQLCount:"rollback_sql_count",             
	}
	
// AllVirtualPartitionInfo [...]		
type	AllVirtualPartitionInfo	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
MaxDecidedTransVersion	int64	`gorm:"column:max_decided_trans_version" json:"max_decided_trans_version"`			
MaxPassedTransTs	int64	`gorm:"column:max_passed_trans_ts" json:"max_passed_trans_ts"`			
FreezeTs	int64	`gorm:"column:freeze_ts" json:"freeze_ts"`			
AllowGc	int8	`gorm:"column:allow_gc" json:"allow_gc"`			
PartitionState	string	`gorm:"column:partition_state" json:"partition_state"`			
SstableReadRate	float64	`gorm:"column:sstable_read_rate" json:"sstable_read_rate"`			
SstableReadBytesRate	float64	`gorm:"column:sstable_read_bytes_rate" json:"sstable_read_bytes_rate"`			
SstableWriteRate	float64	`gorm:"column:sstable_write_rate" json:"sstable_write_rate"`			
SstableWriteBytesRate	float64	`gorm:"column:sstable_write_bytes_rate" json:"sstable_write_bytes_rate"`			
LogWriteRate	float64	`gorm:"column:log_write_rate" json:"log_write_rate"`			
LogWriteBytesRate	float64	`gorm:"column:log_write_bytes_rate" json:"log_write_bytes_rate"`			
MemtableBytes	int64	`gorm:"column:memtable_bytes" json:"memtable_bytes"`			
CPUUtimeRate	float64	`gorm:"column:cpu_utime_rate" json:"cpu_utime_rate"`			
CPUStimeRate	float64	`gorm:"column:cpu_stime_rate" json:"cpu_stime_rate"`			
NetInRate	float64	`gorm:"column:net_in_rate" json:"net_in_rate"`			
NetInBytesRate	float64	`gorm:"column:net_in_bytes_rate" json:"net_in_bytes_rate"`			
NetOutRate	float64	`gorm:"column:net_out_rate" json:"net_out_rate"`			
NetOutBytesRate	float64	`gorm:"column:net_out_bytes_rate" json:"net_out_bytes_rate"`			
MinLogServiceTs	int64	`gorm:"column:min_log_service_ts" json:"min_log_service_ts"`			
MinTransServiceTs	int64	`gorm:"column:min_trans_service_ts" json:"min_trans_service_ts"`			
MinReplayEngineTs	int64	`gorm:"column:min_replay_engine_ts" json:"min_replay_engine_ts"`			
IsNeedRebuild	int8	`gorm:"column:is_need_rebuild" json:"is_need_rebuild"`			
PgPartitionCount	int64	`gorm:"column:pg_partition_count" json:"pg_partition_count"`			
IsPg	int8	`gorm:"column:is_pg" json:"is_pg"`			
WeakReadTimestamp	int64	`gorm:"column:weak_read_timestamp" json:"weak_read_timestamp"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
LastReplayLogID	int64	`gorm:"column:last_replay_log_id" json:"last_replay_log_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
LastReplayLogTs	int64	`gorm:"column:last_replay_log_ts" json:"last_replay_log_ts"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionInfo) TableName() string {
	return "__all_virtual_partition_info"
}
	

// AllVirtualPartitionInfoColumns get sql column name.获取数据库列名
var AllVirtualPartitionInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionIDx string
	MaxDecidedTransVersion string
	MaxPassedTransTs string
	FreezeTs string
	AllowGc string
	PartitionState string
	SstableReadRate string
	SstableReadBytesRate string
	SstableWriteRate string
	SstableWriteBytesRate string
	LogWriteRate string
	LogWriteBytesRate string
	MemtableBytes string
	CPUUtimeRate string
	CPUStimeRate string
	NetInRate string
	NetInBytesRate string
	NetOutRate string
	NetOutBytesRate string
	MinLogServiceTs string
	MinTransServiceTs string
	MinReplayEngineTs string
	IsNeedRebuild string
	PgPartitionCount string
	IsPg string
	WeakReadTimestamp string
	ReplicaType string
	LastReplayLogID string
	SchemaVersion string
	LastReplayLogTs string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		MaxDecidedTransVersion:"max_decided_trans_version",  
		MaxPassedTransTs:"max_passed_trans_ts",  
		FreezeTs:"freeze_ts",  
		AllowGc:"allow_gc",  
		PartitionState:"partition_state",  
		SstableReadRate:"sstable_read_rate",  
		SstableReadBytesRate:"sstable_read_bytes_rate",  
		SstableWriteRate:"sstable_write_rate",  
		SstableWriteBytesRate:"sstable_write_bytes_rate",  
		LogWriteRate:"log_write_rate",  
		LogWriteBytesRate:"log_write_bytes_rate",  
		MemtableBytes:"memtable_bytes",  
		CPUUtimeRate:"cpu_utime_rate",  
		CPUStimeRate:"cpu_stime_rate",  
		NetInRate:"net_in_rate",  
		NetInBytesRate:"net_in_bytes_rate",  
		NetOutRate:"net_out_rate",  
		NetOutBytesRate:"net_out_bytes_rate",  
		MinLogServiceTs:"min_log_service_ts",  
		MinTransServiceTs:"min_trans_service_ts",  
		MinReplayEngineTs:"min_replay_engine_ts",  
		IsNeedRebuild:"is_need_rebuild",  
		PgPartitionCount:"pg_partition_count",  
		IsPg:"is_pg",  
		WeakReadTimestamp:"weak_read_timestamp",  
		ReplicaType:"replica_type",  
		LastReplayLogID:"last_replay_log_id",  
		SchemaVersion:"schema_version",  
		LastReplayLogTs:"last_replay_log_ts",             
	}
	
// AllVirtualPartitionItem [...]		
type	AllVirtualPartitionItem	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
PartitionLevel	int64	`gorm:"column:partition_level" json:"partition_level"`			
PartitionNum	int64	`gorm:"column:partition_num" json:"partition_num"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
PartFuncType	string	`gorm:"column:part_func_type" json:"part_func_type"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
PartName	string	`gorm:"column:part_name" json:"part_name"`			
PartIDx	int64	`gorm:"column:part_idx" json:"part_idx"`			
PartID	int64	`gorm:"column:part_id" json:"part_id"`			
PartHighBound	string	`gorm:"column:part_high_bound" json:"part_high_bound"`			
SubpartFuncType	string	`gorm:"column:subpart_func_type" json:"subpart_func_type"`			
SubpartNum	int64	`gorm:"column:subpart_num" json:"subpart_num"`			
SubpartName	string	`gorm:"column:subpart_name" json:"subpart_name"`			
SubpartIDx	int64	`gorm:"column:subpart_idx" json:"subpart_idx"`			
SubpartID	int64	`gorm:"column:subpart_id" json:"subpart_id"`			
SubpartHighBound	string	`gorm:"column:subpart_high_bound" json:"subpart_high_bound"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionItem) TableName() string {
	return "__all_virtual_partition_item"
}
	

// AllVirtualPartitionItemColumns get sql column name.获取数据库列名
var AllVirtualPartitionItemColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	TenantName string
	TableName string
	PartitionLevel string
	PartitionNum string
	PartitionIDx string
	PartFuncType string
	PartNum string
	PartName string
	PartIDx string
	PartID string
	PartHighBound string
	SubpartFuncType string
	SubpartNum string
	SubpartName string
	SubpartIDx string
	SubpartID string
	SubpartHighBound string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		TenantName:"tenant_name",  
		TableName:"table_name",  
		PartitionLevel:"partition_level",  
		PartitionNum:"partition_num",  
		PartitionIDx:"partition_idx",  
		PartFuncType:"part_func_type",  
		PartNum:"part_num",  
		PartName:"part_name",  
		PartIDx:"part_idx",  
		PartID:"part_id",  
		PartHighBound:"part_high_bound",  
		SubpartFuncType:"subpart_func_type",  
		SubpartNum:"subpart_num",  
		SubpartName:"subpart_name",  
		SubpartIDx:"subpart_idx",  
		SubpartID:"subpart_id",  
		SubpartHighBound:"subpart_high_bound",             
	}
	
// AllVirtualPartitionLocation [...]		
type	AllVirtualPartitionLocation	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
Status	string	`gorm:"column:status" json:"status"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionLocation) TableName() string {
	return "__all_virtual_partition_location"
}
	

// AllVirtualPartitionLocationColumns get sql column name.获取数据库列名
var AllVirtualPartitionLocationColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	ReplicaType string
	Status string
	DataVersion string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		ReplicaType:"replica_type",  
		Status:"status",  
		DataVersion:"data_version",             
	}
	
// AllVirtualPartitionMigrationStatus [...]		
type	AllVirtualPartitionMigrationStatus	struct {		
TaskID	string	`gorm:"column:task_id" json:"task_id"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
MigrateType	string	`gorm:"column:migrate_type" json:"migrate_type"`			
ParentIP	string	`gorm:"column:parent_ip" json:"parent_ip"`			
ParentPort	int64	`gorm:"column:parent_port" json:"parent_port"`			
SrcIP	string	`gorm:"column:src_ip" json:"src_ip"`			
SrcPort	int64	`gorm:"column:src_port" json:"src_port"`			
DestIP	string	`gorm:"column:dest_ip" json:"dest_ip"`			
DestPort	int64	`gorm:"column:dest_port" json:"dest_port"`			
Result	int64	`gorm:"column:result" json:"result"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
FinishTime	time.Time	`gorm:"column:finish_time" json:"finish_time"`			
Action	string	`gorm:"column:action" json:"action"`			
ReplicaState	string	`gorm:"column:replica_state" json:"replica_state"`			
RebuildCount	int64	`gorm:"column:rebuild_count" json:"rebuild_count"`			
TotalMacroBlock	int64	`gorm:"column:total_macro_block" json:"total_macro_block"`			
ReadyMacroBlock	int64	`gorm:"column:ready_macro_block" json:"ready_macro_block"`			
MajorCount	int64	`gorm:"column:major_count" json:"major_count"`			
MiniMinorCount	int64	`gorm:"column:mini_minor_count" json:"mini_minor_count"`			
NormalMinorCount	int64	`gorm:"column:normal_minor_count" json:"normal_minor_count"`			
BufMinorCount	int64	`gorm:"column:buf_minor_count" json:"buf_minor_count"`			
ReuseCount	int64	`gorm:"column:reuse_count" json:"reuse_count"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionMigrationStatus) TableName() string {
	return "__all_virtual_partition_migration_status"
}
	

// AllVirtualPartitionMigrationStatusColumns get sql column name.获取数据库列名
var AllVirtualPartitionMigrationStatusColumns = struct { 
	TaskID string
	TenantID string
	TableID string
	PartitionIDx string
	SvrIP string
	SvrPort string
	MigrateType string
	ParentIP string
	ParentPort string
	SrcIP string
	SrcPort string
	DestIP string
	DestPort string
	Result string
	StartTime string
	FinishTime string
	Action string
	ReplicaState string
	RebuildCount string
	TotalMacroBlock string
	ReadyMacroBlock string
	MajorCount string
	MiniMinorCount string
	NormalMinorCount string
	BufMinorCount string
	ReuseCount string
	Comment string    
	}{ 
		TaskID:"task_id",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		MigrateType:"migrate_type",  
		ParentIP:"parent_ip",  
		ParentPort:"parent_port",  
		SrcIP:"src_ip",  
		SrcPort:"src_port",  
		DestIP:"dest_ip",  
		DestPort:"dest_port",  
		Result:"result",  
		StartTime:"start_time",  
		FinishTime:"finish_time",  
		Action:"action",  
		ReplicaState:"replica_state",  
		RebuildCount:"rebuild_count",  
		TotalMacroBlock:"total_macro_block",  
		ReadyMacroBlock:"ready_macro_block",  
		MajorCount:"major_count",  
		MiniMinorCount:"mini_minor_count",  
		NormalMinorCount:"normal_minor_count",  
		BufMinorCount:"buf_minor_count",  
		ReuseCount:"reuse_count",  
		Comment:"comment",             
	}
	
// AllVirtualPartitionReplayStatus [...]		
type	AllVirtualPartitionReplayStatus	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
PendingTaskCount	int64	`gorm:"column:pending_task_count" json:"pending_task_count"`			
RetriedTaskCount	int64	`gorm:"column:retried_task_count" json:"retried_task_count"`			
PostBarrierStatus	string	`gorm:"column:post_barrier_status" json:"post_barrier_status"`			
IsEnabled	int64	`gorm:"column:is_enabled" json:"is_enabled"`			
MaxConfirmedLogID	uint64	`gorm:"column:max_confirmed_log_id" json:"max_confirmed_log_id"`			
LastReplayLogID	uint64	`gorm:"column:last_replay_log_id" json:"last_replay_log_id"`			
LastReplayLogType	string	`gorm:"column:last_replay_log_type" json:"last_replay_log_type"`			
TotalSubmmitedTaskCount	int64	`gorm:"column:total_submmited_task_count" json:"total_submmited_task_count"`			
TotalReplayedTaskCount	int64	`gorm:"column:total_replayed_task_count" json:"total_replayed_task_count"`			
NextSubmitLogID	uint64	`gorm:"column:next_submit_log_id" json:"next_submit_log_id"`			
NextSubmitLogTs	int64	`gorm:"column:next_submit_log_ts" json:"next_submit_log_ts"`			
LastSlideOutLogID	uint64	`gorm:"column:last_slide_out_log_id" json:"last_slide_out_log_id"`			
LastSlideOutLogTs	int64	`gorm:"column:last_slide_out_log_ts" json:"last_slide_out_log_ts"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionReplayStatus) TableName() string {
	return "__all_virtual_partition_replay_status"
}
	

// AllVirtualPartitionReplayStatusColumns get sql column name.获取数据库列名
var AllVirtualPartitionReplayStatusColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionIDx string
	PartitionCnt string
	PendingTaskCount string
	RetriedTaskCount string
	PostBarrierStatus string
	IsEnabled string
	MaxConfirmedLogID string
	LastReplayLogID string
	LastReplayLogType string
	TotalSubmmitedTaskCount string
	TotalReplayedTaskCount string
	NextSubmitLogID string
	NextSubmitLogTs string
	LastSlideOutLogID string
	LastSlideOutLogTs string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		PendingTaskCount:"pending_task_count",  
		RetriedTaskCount:"retried_task_count",  
		PostBarrierStatus:"post_barrier_status",  
		IsEnabled:"is_enabled",  
		MaxConfirmedLogID:"max_confirmed_log_id",  
		LastReplayLogID:"last_replay_log_id",  
		LastReplayLogType:"last_replay_log_type",  
		TotalSubmmitedTaskCount:"total_submmited_task_count",  
		TotalReplayedTaskCount:"total_replayed_task_count",  
		NextSubmitLogID:"next_submit_log_id",  
		NextSubmitLogTs:"next_submit_log_ts",  
		LastSlideOutLogID:"last_slide_out_log_id",  
		LastSlideOutLogTs:"last_slide_out_log_ts",             
	}
	
// AllVirtualPartitionSplitInfo [...]		
type	AllVirtualPartitionSplitInfo	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
SplitState	string	`gorm:"column:split_state" json:"split_state"`			
MergeVersion	int64	`gorm:"column:merge_version" json:"merge_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionSplitInfo) TableName() string {
	return "__all_virtual_partition_split_info"
}
	

// AllVirtualPartitionSplitInfoColumns get sql column name.获取数据库列名
var AllVirtualPartitionSplitInfoColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	Zone string
	TableID string
	PartitionID string
	SplitState string
	MergeVersion string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Zone:"zone",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SplitState:"split_state",  
		MergeVersion:"merge_version",             
	}
	
// AllVirtualPartitionSstableImageInfo [...]		
type	AllVirtualPartitionSstableImageInfo	struct {		
Zone	string	`gorm:"column:zone" json:"zone"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
MajorVersion	int64	`gorm:"column:major_version" json:"major_version"`			
MinVersion	int64	`gorm:"column:min_version" json:"min_version"`			
SsStoreCount	int64	`gorm:"column:ss_store_count" json:"ss_store_count"`			
MergedSsStoreCount	int64	`gorm:"column:merged_ss_store_count" json:"merged_ss_store_count"`			
ModifiedSsStoreCount	int64	`gorm:"column:modified_ss_store_count" json:"modified_ss_store_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
UseOldMacroBlockCount	int64	`gorm:"column:use_old_macro_block_count" json:"use_old_macro_block_count"`			
MergeStartTime	time.Time	`gorm:"column:merge_start_time" json:"merge_start_time"`			
MergeFinishTime	time.Time	`gorm:"column:merge_finish_time" json:"merge_finish_time"`			
MergeProcess	int64	`gorm:"column:merge_process" json:"merge_process"`			
RewriteMacroOldMicroBlockCount	int64	`gorm:"column:rewrite_macro_old_micro_block_count" json:"rewrite_macro_old_micro_block_count"`			
RewriteMacroTotalMicroBlockCount	int64	`gorm:"column:rewrite_macro_total_micro_block_count" json:"rewrite_macro_total_micro_block_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionSstableImageInfo) TableName() string {
	return "__all_virtual_partition_sstable_image_info"
}
	

// AllVirtualPartitionSstableImageInfoColumns get sql column name.获取数据库列名
var AllVirtualPartitionSstableImageInfoColumns = struct { 
	Zone string
	SvrIP string
	SvrPort string
	MajorVersion string
	MinVersion string
	SsStoreCount string
	MergedSsStoreCount string
	ModifiedSsStoreCount string
	MacroBlockCount string
	UseOldMacroBlockCount string
	MergeStartTime string
	MergeFinishTime string
	MergeProcess string
	RewriteMacroOldMicroBlockCount string
	RewriteMacroTotalMicroBlockCount string    
	}{ 
		Zone:"zone",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		MajorVersion:"major_version",  
		MinVersion:"min_version",  
		SsStoreCount:"ss_store_count",  
		MergedSsStoreCount:"merged_ss_store_count",  
		ModifiedSsStoreCount:"modified_ss_store_count",  
		MacroBlockCount:"macro_block_count",  
		UseOldMacroBlockCount:"use_old_macro_block_count",  
		MergeStartTime:"merge_start_time",  
		MergeFinishTime:"merge_finish_time",  
		MergeProcess:"merge_process",  
		RewriteMacroOldMicroBlockCount:"rewrite_macro_old_micro_block_count",  
		RewriteMacroTotalMicroBlockCount:"rewrite_macro_total_micro_block_count",             
	}
	
// AllVirtualPartitionSstableMacroInfo [...]		
type	AllVirtualPartitionSstableMacroInfo	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
DataVersion	int64	`gorm:"primaryKey;column:data_version" json:"-"`			
BaseVersion	int64	`gorm:"primaryKey;column:base_version" json:"-"`			
MultiVersionStart	int64	`gorm:"primaryKey;column:multi_version_start" json:"-"`			
SnapshotVersion	int64	`gorm:"primaryKey;column:snapshot_version" json:"-"`			
MacroIDxInSstable	int64	`gorm:"primaryKey;column:macro_idx_in_sstable" json:"-"`			
MajorTableID	int64	`gorm:"column:major_table_id" json:"major_table_id"`			
MacroDataVersion	int64	`gorm:"column:macro_data_version" json:"macro_data_version"`			
MacroIDxInDataFile	int64	`gorm:"column:macro_idx_in_data_file" json:"macro_idx_in_data_file"`			
DataSeq	int64	`gorm:"column:data_seq" json:"data_seq"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
OccupySize	int64	`gorm:"column:occupy_size" json:"occupy_size"`			
MicroBlockCount	int64	`gorm:"column:micro_block_count" json:"micro_block_count"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
MacroRange	string	`gorm:"column:macro_range" json:"macro_range"`			
RowCountDelta	int64	`gorm:"column:row_count_delta" json:"row_count_delta"`			
MacroBlockType	string	`gorm:"column:macro_block_type" json:"macro_block_type"`			
CompressorName	string	`gorm:"column:compressor_name" json:"compressor_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionSstableMacroInfo) TableName() string {
	return "__all_virtual_partition_sstable_macro_info"
}
	

// AllVirtualPartitionSstableMacroInfoColumns get sql column name.获取数据库列名
var AllVirtualPartitionSstableMacroInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	DataVersion string
	BaseVersion string
	MultiVersionStart string
	SnapshotVersion string
	MacroIDxInSstable string
	MajorTableID string
	MacroDataVersion string
	MacroIDxInDataFile string
	DataSeq string
	RowCount string
	OccupySize string
	MicroBlockCount string
	DataChecksum string
	SchemaVersion string
	MacroRange string
	RowCountDelta string
	MacroBlockType string
	CompressorName string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		DataVersion:"data_version",  
		BaseVersion:"base_version",  
		MultiVersionStart:"multi_version_start",  
		SnapshotVersion:"snapshot_version",  
		MacroIDxInSstable:"macro_idx_in_sstable",  
		MajorTableID:"major_table_id",  
		MacroDataVersion:"macro_data_version",  
		MacroIDxInDataFile:"macro_idx_in_data_file",  
		DataSeq:"data_seq",  
		RowCount:"row_count",  
		OccupySize:"occupy_size",  
		MicroBlockCount:"micro_block_count",  
		DataChecksum:"data_checksum",  
		SchemaVersion:"schema_version",  
		MacroRange:"macro_range",  
		RowCountDelta:"row_count_delta",  
		MacroBlockType:"macro_block_type",  
		CompressorName:"compressor_name",             
	}
	
// AllVirtualPartitionSstableMergeInfo [...]		
type	AllVirtualPartitionSstableMergeInfo	struct {		
Version	string	`gorm:"column:version" json:"version"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
MergeType	string	`gorm:"column:merge_type" json:"merge_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
MajorTableID	int64	`gorm:"column:major_table_id" json:"major_table_id"`			
MergeStartTime	int64	`gorm:"column:merge_start_time" json:"merge_start_time"`			
MergeFinishTime	int64	`gorm:"column:merge_finish_time" json:"merge_finish_time"`			
MergeCostTime	int64	`gorm:"column:merge_cost_time" json:"merge_cost_time"`			
EstimateCostTime	int64	`gorm:"column:estimate_cost_time" json:"estimate_cost_time"`			
OccupySize	int64	`gorm:"column:occupy_size" json:"occupy_size"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
UseOldMacroBlockCount	int64	`gorm:"column:use_old_macro_block_count" json:"use_old_macro_block_count"`			
BuildBloomfilterCount	int64	`gorm:"column:build_bloomfilter_count" json:"build_bloomfilter_count"`			
TotalRowCount	int64	`gorm:"column:total_row_count" json:"total_row_count"`			
DeleteRowCount	int64	`gorm:"column:delete_row_count" json:"delete_row_count"`			
InsertRowCount	int64	`gorm:"column:insert_row_count" json:"insert_row_count"`			
UpdateRowCount	int64	`gorm:"column:update_row_count" json:"update_row_count"`			
BaseRowCount	int64	`gorm:"column:base_row_count" json:"base_row_count"`			
UseBaseRowCount	int64	`gorm:"column:use_base_row_count" json:"use_base_row_count"`			
MemtableRowCount	int64	`gorm:"column:memtable_row_count" json:"memtable_row_count"`			
PurgedRowCount	int64	`gorm:"column:purged_row_count" json:"purged_row_count"`			
OutputRowCount	int64	`gorm:"column:output_row_count" json:"output_row_count"`			
MergeLevel	int64	`gorm:"column:merge_level" json:"merge_level"`			
RewriteMacroOldMicroBlockCount	int64	`gorm:"column:rewrite_macro_old_micro_block_count" json:"rewrite_macro_old_micro_block_count"`			
RewriteMacroTotalMicroBlockCount	int64	`gorm:"column:rewrite_macro_total_micro_block_count" json:"rewrite_macro_total_micro_block_count"`			
TotalChildTask	int64	`gorm:"column:total_child_task" json:"total_child_task"`			
FinishChildTask	int64	`gorm:"column:finish_child_task" json:"finish_child_task"`			
StepMergePercentage	int64	`gorm:"column:step_merge_percentage" json:"step_merge_percentage"`			
MergePercentage	int64	`gorm:"column:merge_percentage" json:"merge_percentage"`			
ErrorCode	int64	`gorm:"column:error_code" json:"error_code"`			
TableCount	int64	`gorm:"column:table_count" json:"table_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionSstableMergeInfo) TableName() string {
	return "__all_virtual_partition_sstable_merge_info"
}
	

// AllVirtualPartitionSstableMergeInfoColumns get sql column name.获取数据库列名
var AllVirtualPartitionSstableMergeInfoColumns = struct { 
	Version string
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	MergeType string
	SnapshotVersion string
	TableType string
	MajorTableID string
	MergeStartTime string
	MergeFinishTime string
	MergeCostTime string
	EstimateCostTime string
	OccupySize string
	MacroBlockCount string
	UseOldMacroBlockCount string
	BuildBloomfilterCount string
	TotalRowCount string
	DeleteRowCount string
	InsertRowCount string
	UpdateRowCount string
	BaseRowCount string
	UseBaseRowCount string
	MemtableRowCount string
	PurgedRowCount string
	OutputRowCount string
	MergeLevel string
	RewriteMacroOldMicroBlockCount string
	RewriteMacroTotalMicroBlockCount string
	TotalChildTask string
	FinishChildTask string
	StepMergePercentage string
	MergePercentage string
	ErrorCode string
	TableCount string    
	}{ 
		Version:"version",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		MergeType:"merge_type",  
		SnapshotVersion:"snapshot_version",  
		TableType:"table_type",  
		MajorTableID:"major_table_id",  
		MergeStartTime:"merge_start_time",  
		MergeFinishTime:"merge_finish_time",  
		MergeCostTime:"merge_cost_time",  
		EstimateCostTime:"estimate_cost_time",  
		OccupySize:"occupy_size",  
		MacroBlockCount:"macro_block_count",  
		UseOldMacroBlockCount:"use_old_macro_block_count",  
		BuildBloomfilterCount:"build_bloomfilter_count",  
		TotalRowCount:"total_row_count",  
		DeleteRowCount:"delete_row_count",  
		InsertRowCount:"insert_row_count",  
		UpdateRowCount:"update_row_count",  
		BaseRowCount:"base_row_count",  
		UseBaseRowCount:"use_base_row_count",  
		MemtableRowCount:"memtable_row_count",  
		PurgedRowCount:"purged_row_count",  
		OutputRowCount:"output_row_count",  
		MergeLevel:"merge_level",  
		RewriteMacroOldMicroBlockCount:"rewrite_macro_old_micro_block_count",  
		RewriteMacroTotalMicroBlockCount:"rewrite_macro_total_micro_block_count",  
		TotalChildTask:"total_child_task",  
		FinishChildTask:"finish_child_task",  
		StepMergePercentage:"step_merge_percentage",  
		MergePercentage:"merge_percentage",  
		ErrorCode:"error_code",  
		TableCount:"table_count",             
	}
	
// AllVirtualPartitionStoreInfo [...]		
type	AllVirtualPartitionStoreInfo	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
MigrateStatus	int64	`gorm:"column:migrate_status" json:"migrate_status"`			
MigrateTimestamp	int64	`gorm:"column:migrate_timestamp" json:"migrate_timestamp"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
SplitState	int64	`gorm:"column:split_state" json:"split_state"`			
MultiVersionStart	int64	`gorm:"column:multi_version_start" json:"multi_version_start"`			
ReportVersion	int64	`gorm:"column:report_version" json:"report_version"`			
ReportRowCount	int64	`gorm:"column:report_row_count" json:"report_row_count"`			
ReportDataChecksum	int64	`gorm:"column:report_data_checksum" json:"report_data_checksum"`			
ReportDataSize	int64	`gorm:"column:report_data_size" json:"report_data_size"`			
ReportRequiredSize	int64	`gorm:"column:report_required_size" json:"report_required_size"`			
ReadableTs	int64	`gorm:"column:readable_ts" json:"readable_ts"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionStoreInfo) TableName() string {
	return "__all_virtual_partition_store_info"
}
	

// AllVirtualPartitionStoreInfoColumns get sql column name.获取数据库列名
var AllVirtualPartitionStoreInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionIDx string
	PartitionCnt string
	IsRestore string
	MigrateStatus string
	MigrateTimestamp string
	ReplicaType string
	SplitState string
	MultiVersionStart string
	ReportVersion string
	ReportRowCount string
	ReportDataChecksum string
	ReportDataSize string
	ReportRequiredSize string
	ReadableTs string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		IsRestore:"is_restore",  
		MigrateStatus:"migrate_status",  
		MigrateTimestamp:"migrate_timestamp",  
		ReplicaType:"replica_type",  
		SplitState:"split_state",  
		MultiVersionStart:"multi_version_start",  
		ReportVersion:"report_version",  
		ReportRowCount:"report_row_count",  
		ReportDataChecksum:"report_data_checksum",  
		ReportDataSize:"report_data_size",  
		ReportRequiredSize:"report_required_size",  
		ReadableTs:"readable_ts",             
	}
	
// AllVirtualPartitionTable [...]		
type	AllVirtualPartitionTable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
IsOriginalLeader	int64	`gorm:"column:is_original_leader" json:"is_original_leader"`			
ToLeaderTime	int64	`gorm:"column:to_leader_time" json:"to_leader_time"`			
CreateTime	int64	`gorm:"column:create_time" json:"create_time"`			
Rebuild	int64	`gorm:"column:rebuild" json:"rebuild"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
Status	string	`gorm:"column:status" json:"status"`			
PartitionChecksum	int64	`gorm:"column:partition_checksum" json:"partition_checksum"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
FailList	string	`gorm:"column:fail_list" json:"fail_list"`			
RecoveryTimestamp	int64	`gorm:"column:recovery_timestamp" json:"recovery_timestamp"`			
MemstorePercent	int64	`gorm:"column:memstore_percent" json:"memstore_percent"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionTable) TableName() string {
	return "__all_virtual_partition_table"
}
	

// AllVirtualPartitionTableColumns get sql column name.获取数据库列名
var AllVirtualPartitionTableColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	SQLPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	RowCount string
	DataSize string
	DataVersion string
	DataChecksum string
	RowChecksum string
	ColumnChecksum string
	IsOriginalLeader string
	ToLeaderTime string
	CreateTime string
	Rebuild string
	ReplicaType string
	Status string
	PartitionChecksum string
	RequiredSize string
	IsRestore string
	Quorum string
	FailList string
	RecoveryTimestamp string
	MemstorePercent string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLPort:"sql_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		DataChecksum:"data_checksum",  
		RowChecksum:"row_checksum",  
		ColumnChecksum:"column_checksum",  
		IsOriginalLeader:"is_original_leader",  
		ToLeaderTime:"to_leader_time",  
		CreateTime:"create_time",  
		Rebuild:"rebuild",  
		ReplicaType:"replica_type",  
		Status:"status",  
		PartitionChecksum:"partition_checksum",  
		RequiredSize:"required_size",  
		IsRestore:"is_restore",  
		Quorum:"quorum",  
		FailList:"fail_list",  
		RecoveryTimestamp:"recovery_timestamp",  
		MemstorePercent:"memstore_percent",             
	}
	
// AllVirtualPartitionTableStoreStat [...]		
type	AllVirtualPartitionTableStoreStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
RowCacheHitCount	int64	`gorm:"column:row_cache_hit_count" json:"row_cache_hit_count"`			
RowCacheMissCount	int64	`gorm:"column:row_cache_miss_count" json:"row_cache_miss_count"`			
RowCachePutCount	int64	`gorm:"column:row_cache_put_count" json:"row_cache_put_count"`			
BfFilterCount	int64	`gorm:"column:bf_filter_count" json:"bf_filter_count"`			
BfEmptyReadCount	int64	`gorm:"column:bf_empty_read_count" json:"bf_empty_read_count"`			
BfAccessCount	int64	`gorm:"column:bf_access_count" json:"bf_access_count"`			
BlockCacheHitCount	int64	`gorm:"column:block_cache_hit_count" json:"block_cache_hit_count"`			
BlockCacheMissCount	int64	`gorm:"column:block_cache_miss_count" json:"block_cache_miss_count"`			
AccessRowCount	int64	`gorm:"column:access_row_count" json:"access_row_count"`			
OutputRowCount	int64	`gorm:"column:output_row_count" json:"output_row_count"`			
FuseRowCacheHitCount	int64	`gorm:"column:fuse_row_cache_hit_count" json:"fuse_row_cache_hit_count"`			
FuseRowCacheMissCount	int64	`gorm:"column:fuse_row_cache_miss_count" json:"fuse_row_cache_miss_count"`			
FuseRowCachePutCount	int64	`gorm:"column:fuse_row_cache_put_count" json:"fuse_row_cache_put_count"`			
SingleGetCallCount	int64	`gorm:"column:single_get_call_count" json:"single_get_call_count"`			
SingleGetOutputRowCount	int64	`gorm:"column:single_get_output_row_count" json:"single_get_output_row_count"`			
MultiGetCallCount	int64	`gorm:"column:multi_get_call_count" json:"multi_get_call_count"`			
MultiGetOutputRowCount	int64	`gorm:"column:multi_get_output_row_count" json:"multi_get_output_row_count"`			
IndexBackCallCount	int64	`gorm:"column:index_back_call_count" json:"index_back_call_count"`			
IndexBackOutputRowCount	int64	`gorm:"column:index_back_output_row_count" json:"index_back_output_row_count"`			
SingleScanCallCount	int64	`gorm:"column:single_scan_call_count" json:"single_scan_call_count"`			
SingleScanOutputRowCount	int64	`gorm:"column:single_scan_output_row_count" json:"single_scan_output_row_count"`			
MultiScanCallCount	int64	`gorm:"column:multi_scan_call_count" json:"multi_scan_call_count"`			
MultiScanOutputRowCount	int64	`gorm:"column:multi_scan_output_row_count" json:"multi_scan_output_row_count"`			
ExistRowEffectReadCount	int64	`gorm:"column:exist_row_effect_read_count" json:"exist_row_effect_read_count"`			
ExistRowEmptyReadCount	int64	`gorm:"column:exist_row_empty_read_count" json:"exist_row_empty_read_count"`			
GetRowEffectReadCount	int64	`gorm:"column:get_row_effect_read_count" json:"get_row_effect_read_count"`			
GetRowEmptyReadCount	int64	`gorm:"column:get_row_empty_read_count" json:"get_row_empty_read_count"`			
ScanRowEffectReadCount	int64	`gorm:"column:scan_row_effect_read_count" json:"scan_row_effect_read_count"`			
ScanRowEmptyReadCount	int64	`gorm:"column:scan_row_empty_read_count" json:"scan_row_empty_read_count"`			
RowkeyPrefixAccessInfo	string	`gorm:"column:rowkey_prefix_access_info" json:"rowkey_prefix_access_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPartitionTableStoreStat) TableName() string {
	return "__all_virtual_partition_table_store_stat"
}
	

// AllVirtualPartitionTableStoreStatColumns get sql column name.获取数据库列名
var AllVirtualPartitionTableStoreStatColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	RowCacheHitCount string
	RowCacheMissCount string
	RowCachePutCount string
	BfFilterCount string
	BfEmptyReadCount string
	BfAccessCount string
	BlockCacheHitCount string
	BlockCacheMissCount string
	AccessRowCount string
	OutputRowCount string
	FuseRowCacheHitCount string
	FuseRowCacheMissCount string
	FuseRowCachePutCount string
	SingleGetCallCount string
	SingleGetOutputRowCount string
	MultiGetCallCount string
	MultiGetOutputRowCount string
	IndexBackCallCount string
	IndexBackOutputRowCount string
	SingleScanCallCount string
	SingleScanOutputRowCount string
	MultiScanCallCount string
	MultiScanOutputRowCount string
	ExistRowEffectReadCount string
	ExistRowEmptyReadCount string
	GetRowEffectReadCount string
	GetRowEmptyReadCount string
	ScanRowEffectReadCount string
	ScanRowEmptyReadCount string
	RowkeyPrefixAccessInfo string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		RowCacheHitCount:"row_cache_hit_count",  
		RowCacheMissCount:"row_cache_miss_count",  
		RowCachePutCount:"row_cache_put_count",  
		BfFilterCount:"bf_filter_count",  
		BfEmptyReadCount:"bf_empty_read_count",  
		BfAccessCount:"bf_access_count",  
		BlockCacheHitCount:"block_cache_hit_count",  
		BlockCacheMissCount:"block_cache_miss_count",  
		AccessRowCount:"access_row_count",  
		OutputRowCount:"output_row_count",  
		FuseRowCacheHitCount:"fuse_row_cache_hit_count",  
		FuseRowCacheMissCount:"fuse_row_cache_miss_count",  
		FuseRowCachePutCount:"fuse_row_cache_put_count",  
		SingleGetCallCount:"single_get_call_count",  
		SingleGetOutputRowCount:"single_get_output_row_count",  
		MultiGetCallCount:"multi_get_call_count",  
		MultiGetOutputRowCount:"multi_get_output_row_count",  
		IndexBackCallCount:"index_back_call_count",  
		IndexBackOutputRowCount:"index_back_output_row_count",  
		SingleScanCallCount:"single_scan_call_count",  
		SingleScanOutputRowCount:"single_scan_output_row_count",  
		MultiScanCallCount:"multi_scan_call_count",  
		MultiScanOutputRowCount:"multi_scan_output_row_count",  
		ExistRowEffectReadCount:"exist_row_effect_read_count",  
		ExistRowEmptyReadCount:"exist_row_empty_read_count",  
		GetRowEffectReadCount:"get_row_effect_read_count",  
		GetRowEmptyReadCount:"get_row_empty_read_count",  
		ScanRowEffectReadCount:"scan_row_effect_read_count",  
		ScanRowEmptyReadCount:"scan_row_empty_read_count",  
		RowkeyPrefixAccessInfo:"rowkey_prefix_access_info",             
	}
	
// AllVirtualPgBackupBackupsetTask [...]		
type	AllVirtualPgBackupBackupsetTask	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Status	string	`gorm:"column:status" json:"status"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPgBackupBackupsetTask) TableName() string {
	return "__all_virtual_pg_backup_backupset_task"
}
	

// AllVirtualPgBackupBackupsetTaskColumns get sql column name.获取数据库列名
var AllVirtualPgBackupBackupsetTaskColumns = struct { 
	TenantID string
	JobID string
	Incarnation string
	BackupSetID string
	CopyID string
	TableID string
	PartitionID string
	GmtCreate string
	GmtModified string
	Status string
	TraceID string
	SvrIP string
	SvrPort string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	Result string
	Comment string    
	}{ 
		TenantID:"tenant_id",  
		JobID:"job_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		CopyID:"copy_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Status:"status",  
		TraceID:"trace_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllVirtualPgBackupLogArchiveStatus [...]		
type	AllVirtualPgBackupLogArchiveStatus	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
Incarnation	int64	`gorm:"column:incarnation" json:"incarnation"`			
LogArchiveRound	int64	`gorm:"column:log_archive_round" json:"log_archive_round"`			
LogArchiveStartTs	int64	`gorm:"column:log_archive_start_ts" json:"log_archive_start_ts"`			
LogArchiveStatus	int64	`gorm:"column:log_archive_status" json:"log_archive_status"`			
LogArchiveCurLogID	int64	`gorm:"column:log_archive_cur_log_id" json:"log_archive_cur_log_id"`			
LogArchiveCurTs	int64	`gorm:"column:log_archive_cur_ts" json:"log_archive_cur_ts"`			
MaxLogID	int64	`gorm:"column:max_log_id" json:"max_log_id"`			
MaxLogTs	int64	`gorm:"column:max_log_ts" json:"max_log_ts"`			
CurPieceID	int64	`gorm:"column:cur_piece_id" json:"cur_piece_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPgBackupLogArchiveStatus) TableName() string {
	return "__all_virtual_pg_backup_log_archive_status"
}
	

// AllVirtualPgBackupLogArchiveStatusColumns get sql column name.获取数据库列名
var AllVirtualPgBackupLogArchiveStatusColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	Incarnation string
	LogArchiveRound string
	LogArchiveStartTs string
	LogArchiveStatus string
	LogArchiveCurLogID string
	LogArchiveCurTs string
	MaxLogID string
	MaxLogTs string
	CurPieceID string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		Incarnation:"incarnation",  
		LogArchiveRound:"log_archive_round",  
		LogArchiveStartTs:"log_archive_start_ts",  
		LogArchiveStatus:"log_archive_status",  
		LogArchiveCurLogID:"log_archive_cur_log_id",  
		LogArchiveCurTs:"log_archive_cur_ts",  
		MaxLogID:"max_log_id",  
		MaxLogTs:"max_log_ts",  
		CurPieceID:"cur_piece_id",             
	}
	
// AllVirtualPgBackupTask [...]		
type	AllVirtualPgBackupTask	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
BackupType	string	`gorm:"column:backup_type" json:"backup_type"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
InputBytes	int64	`gorm:"column:input_bytes" json:"input_bytes"`			
OutputBytes	int64	`gorm:"column:output_bytes" json:"output_bytes"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
EndTime	time.Time	`gorm:"column:end_time" json:"end_time"`			
RetryCount	int64	`gorm:"column:retry_count" json:"retry_count"`			
ReplicaRole	int64	`gorm:"column:replica_role" json:"replica_role"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Status	string	`gorm:"column:status" json:"status"`			
TaskID	int64	`gorm:"column:task_id" json:"task_id"`			
Result	int64	`gorm:"column:result" json:"result"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPgBackupTask) TableName() string {
	return "__all_virtual_pg_backup_task"
}
	

// AllVirtualPgBackupTaskColumns get sql column name.获取数据库列名
var AllVirtualPgBackupTaskColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	Incarnation string
	BackupSetID string
	GmtCreate string
	GmtModified string
	BackupType string
	SnapshotVersion string
	PartitionCount string
	MacroBlockCount string
	FinishPartitionCount string
	FinishMacroBlockCount string
	InputBytes string
	OutputBytes string
	StartTime string
	EndTime string
	RetryCount string
	ReplicaRole string
	ReplicaType string
	SvrIP string
	SvrPort string
	Status string
	TaskID string
	Result string
	TraceID string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		BackupType:"backup_type",  
		SnapshotVersion:"snapshot_version",  
		PartitionCount:"partition_count",  
		MacroBlockCount:"macro_block_count",  
		FinishPartitionCount:"finish_partition_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		InputBytes:"input_bytes",  
		OutputBytes:"output_bytes",  
		StartTime:"start_time",  
		EndTime:"end_time",  
		RetryCount:"retry_count",  
		ReplicaRole:"replica_role",  
		ReplicaType:"replica_type",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Status:"status",  
		TaskID:"task_id",  
		Result:"result",  
		TraceID:"trace_id",             
	}
	
// AllVirtualPgBackupValidationTask [...]		
type	AllVirtualPgBackupValidationTask	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
Incarnation	int64	`gorm:"primaryKey;column:incarnation" json:"-"`			
BackupSetID	int64	`gorm:"primaryKey;column:backup_set_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ArchiveRound	int64	`gorm:"column:archive_round" json:"archive_round"`			
Status	string	`gorm:"column:status" json:"status"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TotalPartitionCount	int64	`gorm:"column:total_partition_count" json:"total_partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
TotalMacroBlockCount	int64	`gorm:"column:total_macro_block_count" json:"total_macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
LogInfo	string	`gorm:"column:log_info" json:"log_info"`			
LogSize	int64	`gorm:"column:log_size" json:"log_size"`			
Result	int64	`gorm:"column:result" json:"result"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPgBackupValidationTask) TableName() string {
	return "__all_virtual_pg_backup_validation_task"
}
	

// AllVirtualPgBackupValidationTaskColumns get sql column name.获取数据库列名
var AllVirtualPgBackupValidationTaskColumns = struct { 
	TenantID string
	JobID string
	TaskID string
	Incarnation string
	BackupSetID string
	TableID string
	PartitionID string
	GmtCreate string
	GmtModified string
	ArchiveRound string
	Status string
	TraceID string
	SvrIP string
	SvrPort string
	TotalPartitionCount string
	FinishPartitionCount string
	TotalMacroBlockCount string
	FinishMacroBlockCount string
	LogInfo string
	LogSize string
	Result string
	Comment string    
	}{ 
		TenantID:"tenant_id",  
		JobID:"job_id",  
		TaskID:"task_id",  
		Incarnation:"incarnation",  
		BackupSetID:"backup_set_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ArchiveRound:"archive_round",  
		Status:"status",  
		TraceID:"trace_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TotalPartitionCount:"total_partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		TotalMacroBlockCount:"total_macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		LogInfo:"log_info",  
		LogSize:"log_size",  
		Result:"result",  
		Comment:"comment",             
	}
	
// AllVirtualPgLogArchiveStat [...]		
type	AllVirtualPgLogArchiveStat	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
Incarnation	int64	`gorm:"column:incarnation" json:"incarnation"`			
LogArchiveRound	int64	`gorm:"column:log_archive_round" json:"log_archive_round"`			
Epoch	int64	`gorm:"column:epoch" json:"epoch"`			
BeenDeleted	int8	`gorm:"column:been_deleted" json:"been_deleted"`			
IsFirstRecordFinish	int8	`gorm:"column:is_first_record_finish" json:"is_first_record_finish"`			
EncountError	int8	`gorm:"column:encount_error" json:"encount_error"`			
CurrentIlogID	int64	`gorm:"column:current_ilog_id" json:"current_ilog_id"`			
MaxLogID	int64	`gorm:"column:max_log_id" json:"max_log_id"`			
RoundStartLogID	int64	`gorm:"column:round_start_log_id" json:"round_start_log_id"`			
RoundStartTs	int64	`gorm:"column:round_start_ts" json:"round_start_ts"`			
RoundSnapshotVersion	int64	`gorm:"column:round_snapshot_version" json:"round_snapshot_version"`			
CurStartLogID	int64	`gorm:"column:cur_start_log_id" json:"cur_start_log_id"`			
FetcherMaxSplitLogID	int64	`gorm:"column:fetcher_max_split_log_id" json:"fetcher_max_split_log_id"`			
ClogSplitMaxLogID	int64	`gorm:"column:clog_split_max_log_id" json:"clog_split_max_log_id"`			
ClogSplitMaxLogTs	int64	`gorm:"column:clog_split_max_log_ts" json:"clog_split_max_log_ts"`			
ClogSplitCheckpointTs	int64	`gorm:"column:clog_split_checkpoint_ts" json:"clog_split_checkpoint_ts"`			
MaxArchivedLogID	int64	`gorm:"column:max_archived_log_id" json:"max_archived_log_id"`			
MaxArchivedLogTs	int64	`gorm:"column:max_archived_log_ts" json:"max_archived_log_ts"`			
MaxArchivedCheckpointTs	int64	`gorm:"column:max_archived_checkpoint_ts" json:"max_archived_checkpoint_ts"`			
ClogEpoch	int64	`gorm:"column:clog_epoch" json:"clog_epoch"`			
ClogAccumChecksum	int64	`gorm:"column:clog_accum_checksum" json:"clog_accum_checksum"`			
CurIndexFileID	int64	`gorm:"column:cur_index_file_id" json:"cur_index_file_id"`			
CurIndexFileOffset	int64	`gorm:"column:cur_index_file_offset" json:"cur_index_file_offset"`			
CurDataFileID	int64	`gorm:"column:cur_data_file_id" json:"cur_data_file_id"`			
CurDataFileOffset	int64	`gorm:"column:cur_data_file_offset" json:"cur_data_file_offset"`			
ClogSplitTaskNum	int64	`gorm:"column:clog_split_task_num" json:"clog_split_task_num"`			
SendTaskNum	int64	`gorm:"column:send_task_num" json:"send_task_num"`			
CurPieceID	int64	`gorm:"column:cur_piece_id" json:"cur_piece_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPgLogArchiveStat) TableName() string {
	return "__all_virtual_pg_log_archive_stat"
}
	

// AllVirtualPgLogArchiveStatColumns get sql column name.获取数据库列名
var AllVirtualPgLogArchiveStatColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	Incarnation string
	LogArchiveRound string
	Epoch string
	BeenDeleted string
	IsFirstRecordFinish string
	EncountError string
	CurrentIlogID string
	MaxLogID string
	RoundStartLogID string
	RoundStartTs string
	RoundSnapshotVersion string
	CurStartLogID string
	FetcherMaxSplitLogID string
	ClogSplitMaxLogID string
	ClogSplitMaxLogTs string
	ClogSplitCheckpointTs string
	MaxArchivedLogID string
	MaxArchivedLogTs string
	MaxArchivedCheckpointTs string
	ClogEpoch string
	ClogAccumChecksum string
	CurIndexFileID string
	CurIndexFileOffset string
	CurDataFileID string
	CurDataFileOffset string
	ClogSplitTaskNum string
	SendTaskNum string
	CurPieceID string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		Incarnation:"incarnation",  
		LogArchiveRound:"log_archive_round",  
		Epoch:"epoch",  
		BeenDeleted:"been_deleted",  
		IsFirstRecordFinish:"is_first_record_finish",  
		EncountError:"encount_error",  
		CurrentIlogID:"current_ilog_id",  
		MaxLogID:"max_log_id",  
		RoundStartLogID:"round_start_log_id",  
		RoundStartTs:"round_start_ts",  
		RoundSnapshotVersion:"round_snapshot_version",  
		CurStartLogID:"cur_start_log_id",  
		FetcherMaxSplitLogID:"fetcher_max_split_log_id",  
		ClogSplitMaxLogID:"clog_split_max_log_id",  
		ClogSplitMaxLogTs:"clog_split_max_log_ts",  
		ClogSplitCheckpointTs:"clog_split_checkpoint_ts",  
		MaxArchivedLogID:"max_archived_log_id",  
		MaxArchivedLogTs:"max_archived_log_ts",  
		MaxArchivedCheckpointTs:"max_archived_checkpoint_ts",  
		ClogEpoch:"clog_epoch",  
		ClogAccumChecksum:"clog_accum_checksum",  
		CurIndexFileID:"cur_index_file_id",  
		CurIndexFileOffset:"cur_index_file_offset",  
		CurDataFileID:"cur_data_file_id",  
		CurDataFileOffset:"cur_data_file_offset",  
		ClogSplitTaskNum:"clog_split_task_num",  
		SendTaskNum:"send_task_num",  
		CurPieceID:"cur_piece_id",             
	}
	
// AllVirtualPgPartitionInfo [...]		
type	AllVirtualPgPartitionInfo	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
TgID	int64	`gorm:"column:tg_id" json:"tg_id"`			
PgIDx	int64	`gorm:"column:pg_idx" json:"pg_idx"`			
MaxDecidedTransVersion	int64	`gorm:"column:max_decided_trans_version" json:"max_decided_trans_version"`			
MaxPassedTransTs	int64	`gorm:"column:max_passed_trans_ts" json:"max_passed_trans_ts"`			
FreezeTs	int64	`gorm:"column:freeze_ts" json:"freeze_ts"`			
AllowGc	int8	`gorm:"column:allow_gc" json:"allow_gc"`			
PartitionState	string	`gorm:"column:partition_state" json:"partition_state"`			
MinLogServiceTs	int64	`gorm:"column:min_log_service_ts" json:"min_log_service_ts"`			
MinTransServiceTs	int64	`gorm:"column:min_trans_service_ts" json:"min_trans_service_ts"`			
MinReplayEngineTs	int64	`gorm:"column:min_replay_engine_ts" json:"min_replay_engine_ts"`			
IsPg	int8	`gorm:"column:is_pg" json:"is_pg"`			
WeakReadTimestamp	int64	`gorm:"column:weak_read_timestamp" json:"weak_read_timestamp"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPgPartitionInfo) TableName() string {
	return "__all_virtual_pg_partition_info"
}
	

// AllVirtualPgPartitionInfoColumns get sql column name.获取数据库列名
var AllVirtualPgPartitionInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionIDx string
	TgID string
	PgIDx string
	MaxDecidedTransVersion string
	MaxPassedTransTs string
	FreezeTs string
	AllowGc string
	PartitionState string
	MinLogServiceTs string
	MinTransServiceTs string
	MinReplayEngineTs string
	IsPg string
	WeakReadTimestamp string
	ReplicaType string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		TgID:"tg_id",  
		PgIDx:"pg_idx",  
		MaxDecidedTransVersion:"max_decided_trans_version",  
		MaxPassedTransTs:"max_passed_trans_ts",  
		FreezeTs:"freeze_ts",  
		AllowGc:"allow_gc",  
		PartitionState:"partition_state",  
		MinLogServiceTs:"min_log_service_ts",  
		MinTransServiceTs:"min_trans_service_ts",  
		MinReplayEngineTs:"min_replay_engine_ts",  
		IsPg:"is_pg",  
		WeakReadTimestamp:"weak_read_timestamp",  
		ReplicaType:"replica_type",             
	}
	
// AllVirtualPlanCachePlanExplain [...]		
type	AllVirtualPlanCachePlanExplain	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
PlanID	int64	`gorm:"primaryKey;column:plan_id" json:"-"`			
Operator	string	`gorm:"column:operator" json:"operator"`			
Name	string	`gorm:"column:name" json:"name"`			
Rows	int64	`gorm:"column:rows" json:"rows"`			
Cost	int64	`gorm:"column:cost" json:"cost"`			
Property	string	`gorm:"column:property" json:"property"`			
PlanDepth	int64	`gorm:"column:plan_depth" json:"plan_depth"`			
PlanLineID	int64	`gorm:"column:plan_line_id" json:"plan_line_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPlanCachePlanExplain) TableName() string {
	return "__all_virtual_plan_cache_plan_explain"
}
	

// AllVirtualPlanCachePlanExplainColumns get sql column name.获取数据库列名
var AllVirtualPlanCachePlanExplainColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	PlanID string
	Operator string
	Name string
	Rows string
	Cost string
	Property string
	PlanDepth string
	PlanLineID string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		PlanID:"plan_id",  
		Operator:"operator",  
		Name:"name",  
		Rows:"rows",  
		Cost:"cost",  
		Property:"property",  
		PlanDepth:"plan_depth",  
		PlanLineID:"plan_line_id",             
	}
	
// AllVirtualPlanCacheStat [...]		
type	AllVirtualPlanCacheStat	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
SQLNum	int64	`gorm:"column:sql_num" json:"sql_num"`			
MemUsed	int64	`gorm:"column:mem_used" json:"mem_used"`			
MemHold	int64	`gorm:"column:mem_hold" json:"mem_hold"`			
AccessCount	int64	`gorm:"column:access_count" json:"access_count"`			
HitCount	int64	`gorm:"column:hit_count" json:"hit_count"`			
HitRate	int64	`gorm:"column:hit_rate" json:"hit_rate"`			
PlanNum	int64	`gorm:"column:plan_num" json:"plan_num"`			
MemLimit	int64	`gorm:"column:mem_limit" json:"mem_limit"`			
HashBucket	int64	`gorm:"column:hash_bucket" json:"hash_bucket"`			
StmtkeyNum	int64	`gorm:"column:stmtkey_num" json:"stmtkey_num"`			
PcRefPlanLocal	int64	`gorm:"column:pc_ref_plan_local" json:"pc_ref_plan_local"`			
PcRefPlanRemote	int64	`gorm:"column:pc_ref_plan_remote" json:"pc_ref_plan_remote"`			
PcRefPlanDist	int64	`gorm:"column:pc_ref_plan_dist" json:"pc_ref_plan_dist"`			
PcRefPlanArr	int64	`gorm:"column:pc_ref_plan_arr" json:"pc_ref_plan_arr"`			
PcRefPlanStat	int64	`gorm:"column:pc_ref_plan_stat" json:"pc_ref_plan_stat"`			
PcRefPl	int64	`gorm:"column:pc_ref_pl" json:"pc_ref_pl"`			
PcRefPlStat	int64	`gorm:"column:pc_ref_pl_stat" json:"pc_ref_pl_stat"`			
PlanGen	int64	`gorm:"column:plan_gen" json:"plan_gen"`			
CliQuery	int64	`gorm:"column:cli_query" json:"cli_query"`			
OutlineExec	int64	`gorm:"column:outline_exec" json:"outline_exec"`			
PlanExplain	int64	`gorm:"column:plan_explain" json:"plan_explain"`			
AsynBaseline	int64	`gorm:"column:asyn_baseline" json:"asyn_baseline"`			
LoadBaseline	int64	`gorm:"column:load_baseline" json:"load_baseline"`			
PsExec	int64	`gorm:"column:ps_exec" json:"ps_exec"`			
GvSQL	int64	`gorm:"column:gv_sql" json:"gv_sql"`			
PlAnon	int64	`gorm:"column:pl_anon" json:"pl_anon"`			
PlRoutine	int64	`gorm:"column:pl_routine" json:"pl_routine"`			
PackageVar	int64	`gorm:"column:package_var" json:"package_var"`			
PackageType	int64	`gorm:"column:package_type" json:"package_type"`			
PackageSpec	int64	`gorm:"column:package_spec" json:"package_spec"`			
PackageBody	int64	`gorm:"column:package_body" json:"package_body"`			
PackageResv	int64	`gorm:"column:package_resv" json:"package_resv"`			
GetPkg	int64	`gorm:"column:get_pkg" json:"get_pkg"`			
IndexBuilder	int64	`gorm:"column:index_builder" json:"index_builder"`			
PcvSet	int64	`gorm:"column:pcv_set" json:"pcv_set"`			
PcvRd	int64	`gorm:"column:pcv_rd" json:"pcv_rd"`			
PcvWr	int64	`gorm:"column:pcv_wr" json:"pcv_wr"`			
PcvGetPlanKey	int64	`gorm:"column:pcv_get_plan_key" json:"pcv_get_plan_key"`			
PcvGetPlKey	int64	`gorm:"column:pcv_get_pl_key" json:"pcv_get_pl_key"`			
PcvExpireByUsed	int64	`gorm:"column:pcv_expire_by_used" json:"pcv_expire_by_used"`			
PcvExpireByMem	int64	`gorm:"column:pcv_expire_by_mem" json:"pcv_expire_by_mem"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPlanCacheStat) TableName() string {
	return "__all_virtual_plan_cache_stat"
}
	

// AllVirtualPlanCacheStatColumns get sql column name.获取数据库列名
var AllVirtualPlanCacheStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	SQLNum string
	MemUsed string
	MemHold string
	AccessCount string
	HitCount string
	HitRate string
	PlanNum string
	MemLimit string
	HashBucket string
	StmtkeyNum string
	PcRefPlanLocal string
	PcRefPlanRemote string
	PcRefPlanDist string
	PcRefPlanArr string
	PcRefPlanStat string
	PcRefPl string
	PcRefPlStat string
	PlanGen string
	CliQuery string
	OutlineExec string
	PlanExplain string
	AsynBaseline string
	LoadBaseline string
	PsExec string
	GvSQL string
	PlAnon string
	PlRoutine string
	PackageVar string
	PackageType string
	PackageSpec string
	PackageBody string
	PackageResv string
	GetPkg string
	IndexBuilder string
	PcvSet string
	PcvRd string
	PcvWr string
	PcvGetPlanKey string
	PcvGetPlKey string
	PcvExpireByUsed string
	PcvExpireByMem string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLNum:"sql_num",  
		MemUsed:"mem_used",  
		MemHold:"mem_hold",  
		AccessCount:"access_count",  
		HitCount:"hit_count",  
		HitRate:"hit_rate",  
		PlanNum:"plan_num",  
		MemLimit:"mem_limit",  
		HashBucket:"hash_bucket",  
		StmtkeyNum:"stmtkey_num",  
		PcRefPlanLocal:"pc_ref_plan_local",  
		PcRefPlanRemote:"pc_ref_plan_remote",  
		PcRefPlanDist:"pc_ref_plan_dist",  
		PcRefPlanArr:"pc_ref_plan_arr",  
		PcRefPlanStat:"pc_ref_plan_stat",  
		PcRefPl:"pc_ref_pl",  
		PcRefPlStat:"pc_ref_pl_stat",  
		PlanGen:"plan_gen",  
		CliQuery:"cli_query",  
		OutlineExec:"outline_exec",  
		PlanExplain:"plan_explain",  
		AsynBaseline:"asyn_baseline",  
		LoadBaseline:"load_baseline",  
		PsExec:"ps_exec",  
		GvSQL:"gv_sql",  
		PlAnon:"pl_anon",  
		PlRoutine:"pl_routine",  
		PackageVar:"package_var",  
		PackageType:"package_type",  
		PackageSpec:"package_spec",  
		PackageBody:"package_body",  
		PackageResv:"package_resv",  
		GetPkg:"get_pkg",  
		IndexBuilder:"index_builder",  
		PcvSet:"pcv_set",  
		PcvRd:"pcv_rd",  
		PcvWr:"pcv_wr",  
		PcvGetPlanKey:"pcv_get_plan_key",  
		PcvGetPlKey:"pcv_get_pl_key",  
		PcvExpireByUsed:"pcv_expire_by_used",  
		PcvExpireByMem:"pcv_expire_by_mem",             
	}
	
// AllVirtualPlanStat [...]		
type	AllVirtualPlanStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
PlanID	int64	`gorm:"column:plan_id" json:"plan_id"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
Type	int64	`gorm:"column:type" json:"type"`			
IsBindSensitive	int64	`gorm:"column:is_bind_sensitive" json:"is_bind_sensitive"`			
IsBindAware	int64	`gorm:"column:is_bind_aware" json:"is_bind_aware"`			
Statement	string	`gorm:"column:statement" json:"statement"`			
QuerySQL	string	`gorm:"column:query_sql" json:"query_sql"`			
SpecialParams	string	`gorm:"column:special_params" json:"special_params"`			
ParamInfos	string	`gorm:"column:param_infos" json:"param_infos"`			
SysVars	string	`gorm:"column:sys_vars" json:"sys_vars"`			
PlanHash	uint64	`gorm:"column:plan_hash" json:"plan_hash"`			
FirstLoadTime	time.Time	`gorm:"column:first_load_time" json:"first_load_time"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
MergedVersion	int64	`gorm:"column:merged_version" json:"merged_version"`			
LastActiveTime	time.Time	`gorm:"column:last_active_time" json:"last_active_time"`			
AvgExeUsec	int64	`gorm:"column:avg_exe_usec" json:"avg_exe_usec"`			
SlowestExeTime	time.Time	`gorm:"column:slowest_exe_time" json:"slowest_exe_time"`			
SlowestExeUsec	int64	`gorm:"column:slowest_exe_usec" json:"slowest_exe_usec"`			
SlowCount	int64	`gorm:"column:slow_count" json:"slow_count"`			
HitCount	int64	`gorm:"column:hit_count" json:"hit_count"`			
PlanSize	int64	`gorm:"column:plan_size" json:"plan_size"`			
Executions	int64	`gorm:"column:executions" json:"executions"`			
DiskReads	int64	`gorm:"column:disk_reads" json:"disk_reads"`			
DirectWrites	int64	`gorm:"column:direct_writes" json:"direct_writes"`			
BufferGets	int64	`gorm:"column:buffer_gets" json:"buffer_gets"`			
ApplicationWaitTime	uint64	`gorm:"column:application_wait_time" json:"application_wait_time"`			
ConcurrencyWaitTime	uint64	`gorm:"column:concurrency_wait_time" json:"concurrency_wait_time"`			
UserIoWaitTime	uint64	`gorm:"column:user_io_wait_time" json:"user_io_wait_time"`			
RowsProcessed	int64	`gorm:"column:rows_processed" json:"rows_processed"`			
ElapsedTime	uint64	`gorm:"column:elapsed_time" json:"elapsed_time"`			
CPUTime	uint64	`gorm:"column:cpu_time" json:"cpu_time"`			
LargeQuerys	int64	`gorm:"column:large_querys" json:"large_querys"`			
DelayedLargeQuerys	int64	`gorm:"column:delayed_large_querys" json:"delayed_large_querys"`			
OutlineVersion	int64	`gorm:"column:outline_version" json:"outline_version"`			
OutlineID	int64	`gorm:"column:outline_id" json:"outline_id"`			
OutlineData	string	`gorm:"column:outline_data" json:"outline_data"`			
AcsSelInfo	string	`gorm:"column:acs_sel_info" json:"acs_sel_info"`			
TableScan	int8	`gorm:"column:table_scan" json:"table_scan"`			
DbID	uint64	`gorm:"column:db_id" json:"db_id"`			
Evolution	int8	`gorm:"column:evolution" json:"evolution"`			
EvoExecutions	int64	`gorm:"column:evo_executions" json:"evo_executions"`			
EvoCPUTime	uint64	`gorm:"column:evo_cpu_time" json:"evo_cpu_time"`			
TimeoutCount	int64	`gorm:"column:timeout_count" json:"timeout_count"`			
PsStmtID	int64	`gorm:"column:ps_stmt_id" json:"ps_stmt_id"`			
DelayedPxQuerys	int64	`gorm:"column:delayed_px_querys" json:"delayed_px_querys"`			
Sessid	uint64	`gorm:"column:sessid" json:"sessid"`			
TempTables	string	`gorm:"column:temp_tables" json:"temp_tables"`			
IsUseJit	int8	`gorm:"column:is_use_jit" json:"is_use_jit"`			
ObjectType	string	`gorm:"column:object_type" json:"object_type"`			
EnableBfCache	int8	`gorm:"column:enable_bf_cache" json:"enable_bf_cache"`			
BfFilterCnt	int64	`gorm:"column:bf_filter_cnt" json:"bf_filter_cnt"`			
BfAccessCnt	int64	`gorm:"column:bf_access_cnt" json:"bf_access_cnt"`			
EnableRowCache	int8	`gorm:"column:enable_row_cache" json:"enable_row_cache"`			
RowCacheHitCnt	int64	`gorm:"column:row_cache_hit_cnt" json:"row_cache_hit_cnt"`			
RowCacheMissCnt	int64	`gorm:"column:row_cache_miss_cnt" json:"row_cache_miss_cnt"`			
EnableFuseRowCache	int8	`gorm:"column:enable_fuse_row_cache" json:"enable_fuse_row_cache"`			
FuseRowCacheHitCnt	int64	`gorm:"column:fuse_row_cache_hit_cnt" json:"fuse_row_cache_hit_cnt"`			
FuseRowCacheMissCnt	int64	`gorm:"column:fuse_row_cache_miss_cnt" json:"fuse_row_cache_miss_cnt"`			
HintsInfo	string	`gorm:"column:hints_info" json:"hints_info"`			
HintsAllWorked	int8	`gorm:"column:hints_all_worked" json:"hints_all_worked"`			
PlSchemaID	uint64	`gorm:"column:pl_schema_id" json:"pl_schema_id"`			
IsBatchedMultiStmt	int8	`gorm:"column:is_batched_multi_stmt" json:"is_batched_multi_stmt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPlanStat) TableName() string {
	return "__all_virtual_plan_stat"
}
	

// AllVirtualPlanStatColumns get sql column name.获取数据库列名
var AllVirtualPlanStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	PlanID string
	SQLID string
	Type string
	IsBindSensitive string
	IsBindAware string
	Statement string
	QuerySQL string
	SpecialParams string
	ParamInfos string
	SysVars string
	PlanHash string
	FirstLoadTime string
	SchemaVersion string
	MergedVersion string
	LastActiveTime string
	AvgExeUsec string
	SlowestExeTime string
	SlowestExeUsec string
	SlowCount string
	HitCount string
	PlanSize string
	Executions string
	DiskReads string
	DirectWrites string
	BufferGets string
	ApplicationWaitTime string
	ConcurrencyWaitTime string
	UserIoWaitTime string
	RowsProcessed string
	ElapsedTime string
	CPUTime string
	LargeQuerys string
	DelayedLargeQuerys string
	OutlineVersion string
	OutlineID string
	OutlineData string
	AcsSelInfo string
	TableScan string
	DbID string
	Evolution string
	EvoExecutions string
	EvoCPUTime string
	TimeoutCount string
	PsStmtID string
	DelayedPxQuerys string
	Sessid string
	TempTables string
	IsUseJit string
	ObjectType string
	EnableBfCache string
	BfFilterCnt string
	BfAccessCnt string
	EnableRowCache string
	RowCacheHitCnt string
	RowCacheMissCnt string
	EnableFuseRowCache string
	FuseRowCacheHitCnt string
	FuseRowCacheMissCnt string
	HintsInfo string
	HintsAllWorked string
	PlSchemaID string
	IsBatchedMultiStmt string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		PlanID:"plan_id",  
		SQLID:"sql_id",  
		Type:"type",  
		IsBindSensitive:"is_bind_sensitive",  
		IsBindAware:"is_bind_aware",  
		Statement:"statement",  
		QuerySQL:"query_sql",  
		SpecialParams:"special_params",  
		ParamInfos:"param_infos",  
		SysVars:"sys_vars",  
		PlanHash:"plan_hash",  
		FirstLoadTime:"first_load_time",  
		SchemaVersion:"schema_version",  
		MergedVersion:"merged_version",  
		LastActiveTime:"last_active_time",  
		AvgExeUsec:"avg_exe_usec",  
		SlowestExeTime:"slowest_exe_time",  
		SlowestExeUsec:"slowest_exe_usec",  
		SlowCount:"slow_count",  
		HitCount:"hit_count",  
		PlanSize:"plan_size",  
		Executions:"executions",  
		DiskReads:"disk_reads",  
		DirectWrites:"direct_writes",  
		BufferGets:"buffer_gets",  
		ApplicationWaitTime:"application_wait_time",  
		ConcurrencyWaitTime:"concurrency_wait_time",  
		UserIoWaitTime:"user_io_wait_time",  
		RowsProcessed:"rows_processed",  
		ElapsedTime:"elapsed_time",  
		CPUTime:"cpu_time",  
		LargeQuerys:"large_querys",  
		DelayedLargeQuerys:"delayed_large_querys",  
		OutlineVersion:"outline_version",  
		OutlineID:"outline_id",  
		OutlineData:"outline_data",  
		AcsSelInfo:"acs_sel_info",  
		TableScan:"table_scan",  
		DbID:"db_id",  
		Evolution:"evolution",  
		EvoExecutions:"evo_executions",  
		EvoCPUTime:"evo_cpu_time",  
		TimeoutCount:"timeout_count",  
		PsStmtID:"ps_stmt_id",  
		DelayedPxQuerys:"delayed_px_querys",  
		Sessid:"sessid",  
		TempTables:"temp_tables",  
		IsUseJit:"is_use_jit",  
		ObjectType:"object_type",  
		EnableBfCache:"enable_bf_cache",  
		BfFilterCnt:"bf_filter_cnt",  
		BfAccessCnt:"bf_access_cnt",  
		EnableRowCache:"enable_row_cache",  
		RowCacheHitCnt:"row_cache_hit_cnt",  
		RowCacheMissCnt:"row_cache_miss_cnt",  
		EnableFuseRowCache:"enable_fuse_row_cache",  
		FuseRowCacheHitCnt:"fuse_row_cache_hit_cnt",  
		FuseRowCacheMissCnt:"fuse_row_cache_miss_cnt",  
		HintsInfo:"hints_info",  
		HintsAllWorked:"hints_all_worked",  
		PlSchemaID:"pl_schema_id",  
		IsBatchedMultiStmt:"is_batched_multi_stmt",             
	}
	
// AllVirtualProcesslist [...]		
type	AllVirtualProcesslist	struct {		
ID	uint64	`gorm:"column:id" json:"id"`			
User	string	`gorm:"column:user" json:"user"`			
Tenant	string	`gorm:"column:tenant" json:"tenant"`			
Host	string	`gorm:"column:host" json:"host"`			
Db	string	`gorm:"column:db" json:"db"`			
Command	string	`gorm:"column:command" json:"command"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
Time	int64	`gorm:"column:time" json:"time"`			
State	string	`gorm:"column:state" json:"state"`			
Info	string	`gorm:"column:info" json:"info"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
ProxySessid	uint64	`gorm:"column:proxy_sessid" json:"proxy_sessid"`			
MasterSessid	uint64	`gorm:"column:master_sessid" json:"master_sessid"`			
UserClientIP	string	`gorm:"column:user_client_ip" json:"user_client_ip"`			
UserHost	string	`gorm:"column:user_host" json:"user_host"`			
TransID	uint64	`gorm:"column:trans_id" json:"trans_id"`			
ThreadID	uint64	`gorm:"column:thread_id" json:"thread_id"`			
SslCipher	string	`gorm:"column:ssl_cipher" json:"ssl_cipher"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualProcesslist) TableName() string {
	return "__all_virtual_processlist"
}
	

// AllVirtualProcesslistColumns get sql column name.获取数据库列名
var AllVirtualProcesslistColumns = struct { 
	ID string
	User string
	Tenant string
	Host string
	Db string
	Command string
	SQLID string
	Time string
	State string
	Info string
	SvrIP string
	SvrPort string
	SQLPort string
	ProxySessid string
	MasterSessid string
	UserClientIP string
	UserHost string
	TransID string
	ThreadID string
	SslCipher string
	TraceID string    
	}{ 
		ID:"id",  
		User:"user",  
		Tenant:"tenant",  
		Host:"host",  
		Db:"db",  
		Command:"command",  
		SQLID:"sql_id",  
		Time:"time",  
		State:"state",  
		Info:"info",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLPort:"sql_port",  
		ProxySessid:"proxy_sessid",  
		MasterSessid:"master_sessid",  
		UserClientIP:"user_client_ip",  
		UserHost:"user_host",  
		TransID:"trans_id",  
		ThreadID:"thread_id",  
		SslCipher:"ssl_cipher",  
		TraceID:"trace_id",             
	}
	
// AllVirtualProxyPartition [...]		
type	AllVirtualProxyPartition	struct {		
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
PartName	string	`gorm:"column:part_name" json:"part_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
LowBoundVal	string	`gorm:"column:low_bound_val" json:"low_bound_val"`			
LowBoundValBin	string	`gorm:"column:low_bound_val_bin" json:"low_bound_val_bin"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
HighBoundValBin	string	`gorm:"column:high_bound_val_bin" json:"high_bound_val_bin"`			
PartIDx	int64	`gorm:"column:part_idx" json:"part_idx"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
SubPartSpace	int64	`gorm:"column:sub_part_space" json:"sub_part_space"`			
SubPartInterval	string	`gorm:"column:sub_part_interval" json:"sub_part_interval"`			
SubPartIntervalBin	string	`gorm:"column:sub_part_interval_bin" json:"sub_part_interval_bin"`			
SubIntervalStart	string	`gorm:"column:sub_interval_start" json:"sub_interval_start"`			
SubIntervalStartBin	string	`gorm:"column:sub_interval_start_bin" json:"sub_interval_start_bin"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	int64	`gorm:"column:spare3" json:"spare3"`			
Spare4	string	`gorm:"column:spare4" json:"spare4"`			
Spare5	string	`gorm:"column:spare5" json:"spare5"`			
Spare6	string	`gorm:"column:spare6" json:"spare6"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualProxyPartition) TableName() string {
	return "__all_virtual_proxy_partition"
}
	

// AllVirtualProxyPartitionColumns get sql column name.获取数据库列名
var AllVirtualProxyPartitionColumns = struct { 
	TableID string
	PartID string
	TenantID string
	PartName string
	Status string
	LowBoundVal string
	LowBoundValBin string
	HighBoundVal string
	HighBoundValBin string
	PartIDx string
	SubPartNum string
	SubPartSpace string
	SubPartInterval string
	SubPartIntervalBin string
	SubIntervalStart string
	SubIntervalStartBin string
	Spare1 string
	Spare2 string
	Spare3 string
	Spare4 string
	Spare5 string
	Spare6 string    
	}{ 
		TableID:"table_id",  
		PartID:"part_id",  
		TenantID:"tenant_id",  
		PartName:"part_name",  
		Status:"status",  
		LowBoundVal:"low_bound_val",  
		LowBoundValBin:"low_bound_val_bin",  
		HighBoundVal:"high_bound_val",  
		HighBoundValBin:"high_bound_val_bin",  
		PartIDx:"part_idx",  
		SubPartNum:"sub_part_num",  
		SubPartSpace:"sub_part_space",  
		SubPartInterval:"sub_part_interval",  
		SubPartIntervalBin:"sub_part_interval_bin",  
		SubIntervalStart:"sub_interval_start",  
		SubIntervalStartBin:"sub_interval_start_bin",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Spare4:"spare4",  
		Spare5:"spare5",  
		Spare6:"spare6",             
	}
	
// AllVirtualProxyPartitionInfo [...]		
type	AllVirtualProxyPartitionInfo	struct {		
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
AllPartNum	int64	`gorm:"column:all_part_num" json:"all_part_num"`			
TemplateNum	int64	`gorm:"column:template_num" json:"template_num"`			
PartIDRuleVer	int64	`gorm:"column:part_id_rule_ver" json:"part_id_rule_ver"`			
PartType	int64	`gorm:"column:part_type" json:"part_type"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
IsColumnType	int8	`gorm:"column:is_column_type" json:"is_column_type"`			
PartSpace	int64	`gorm:"column:part_space" json:"part_space"`			
PartExpr	string	`gorm:"column:part_expr" json:"part_expr"`			
PartExprBin	string	`gorm:"column:part_expr_bin" json:"part_expr_bin"`			
PartRangeType	string	`gorm:"column:part_range_type" json:"part_range_type"`			
PartInterval	string	`gorm:"column:part_interval" json:"part_interval"`			
PartIntervalBin	string	`gorm:"column:part_interval_bin" json:"part_interval_bin"`			
IntervalStart	string	`gorm:"column:interval_start" json:"interval_start"`			
IntervalStartBin	string	`gorm:"column:interval_start_bin" json:"interval_start_bin"`			
SubPartType	int64	`gorm:"column:sub_part_type" json:"sub_part_type"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
IsSubColumnType	int8	`gorm:"column:is_sub_column_type" json:"is_sub_column_type"`			
SubPartSpace	int64	`gorm:"column:sub_part_space" json:"sub_part_space"`			
SubPartExpr	string	`gorm:"column:sub_part_expr" json:"sub_part_expr"`			
SubPartExprBin	string	`gorm:"column:sub_part_expr_bin" json:"sub_part_expr_bin"`			
SubPartRangeType	string	`gorm:"column:sub_part_range_type" json:"sub_part_range_type"`			
DefSubPartInterval	string	`gorm:"column:def_sub_part_interval" json:"def_sub_part_interval"`			
DefSubPartIntervalBin	string	`gorm:"column:def_sub_part_interval_bin" json:"def_sub_part_interval_bin"`			
DefSubIntervalStart	string	`gorm:"column:def_sub_interval_start" json:"def_sub_interval_start"`			
DefSubIntervalStartBin	string	`gorm:"column:def_sub_interval_start_bin" json:"def_sub_interval_start_bin"`			
PartKeyNum	int64	`gorm:"column:part_key_num" json:"part_key_num"`			
PartKeyName	string	`gorm:"column:part_key_name" json:"part_key_name"`			
PartKeyType	int64	`gorm:"column:part_key_type" json:"part_key_type"`			
PartKeyIDx	int64	`gorm:"column:part_key_idx" json:"part_key_idx"`			
PartKeyLevel	int64	`gorm:"column:part_key_level" json:"part_key_level"`			
PartKeyExtra	string	`gorm:"column:part_key_extra" json:"part_key_extra"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	int64	`gorm:"column:spare3" json:"spare3"`			
Spare4	string	`gorm:"column:spare4" json:"spare4"`			
Spare5	string	`gorm:"column:spare5" json:"spare5"`			
Spare6	string	`gorm:"column:spare6" json:"spare6"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualProxyPartitionInfo) TableName() string {
	return "__all_virtual_proxy_partition_info"
}
	

// AllVirtualProxyPartitionInfoColumns get sql column name.获取数据库列名
var AllVirtualProxyPartitionInfoColumns = struct { 
	TableID string
	TenantID string
	PartLevel string
	AllPartNum string
	TemplateNum string
	PartIDRuleVer string
	PartType string
	PartNum string
	IsColumnType string
	PartSpace string
	PartExpr string
	PartExprBin string
	PartRangeType string
	PartInterval string
	PartIntervalBin string
	IntervalStart string
	IntervalStartBin string
	SubPartType string
	SubPartNum string
	IsSubColumnType string
	SubPartSpace string
	SubPartExpr string
	SubPartExprBin string
	SubPartRangeType string
	DefSubPartInterval string
	DefSubPartIntervalBin string
	DefSubIntervalStart string
	DefSubIntervalStartBin string
	PartKeyNum string
	PartKeyName string
	PartKeyType string
	PartKeyIDx string
	PartKeyLevel string
	PartKeyExtra string
	Spare1 string
	Spare2 string
	Spare3 string
	Spare4 string
	Spare5 string
	Spare6 string    
	}{ 
		TableID:"table_id",  
		TenantID:"tenant_id",  
		PartLevel:"part_level",  
		AllPartNum:"all_part_num",  
		TemplateNum:"template_num",  
		PartIDRuleVer:"part_id_rule_ver",  
		PartType:"part_type",  
		PartNum:"part_num",  
		IsColumnType:"is_column_type",  
		PartSpace:"part_space",  
		PartExpr:"part_expr",  
		PartExprBin:"part_expr_bin",  
		PartRangeType:"part_range_type",  
		PartInterval:"part_interval",  
		PartIntervalBin:"part_interval_bin",  
		IntervalStart:"interval_start",  
		IntervalStartBin:"interval_start_bin",  
		SubPartType:"sub_part_type",  
		SubPartNum:"sub_part_num",  
		IsSubColumnType:"is_sub_column_type",  
		SubPartSpace:"sub_part_space",  
		SubPartExpr:"sub_part_expr",  
		SubPartExprBin:"sub_part_expr_bin",  
		SubPartRangeType:"sub_part_range_type",  
		DefSubPartInterval:"def_sub_part_interval",  
		DefSubPartIntervalBin:"def_sub_part_interval_bin",  
		DefSubIntervalStart:"def_sub_interval_start",  
		DefSubIntervalStartBin:"def_sub_interval_start_bin",  
		PartKeyNum:"part_key_num",  
		PartKeyName:"part_key_name",  
		PartKeyType:"part_key_type",  
		PartKeyIDx:"part_key_idx",  
		PartKeyLevel:"part_key_level",  
		PartKeyExtra:"part_key_extra",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Spare4:"spare4",  
		Spare5:"spare5",  
		Spare6:"spare6",             
	}
	
// AllVirtualProxyRoute [...]		
type	AllVirtualProxyRoute	struct {		
SQLString	string	`gorm:"primaryKey;column:sql_string" json:"-"`			
TenantName	string	`gorm:"primaryKey;column:tenant_name" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
CalculatorBin	string	`gorm:"column:calculator_bin" json:"calculator_bin"`			
ResultStatus	int64	`gorm:"column:result_status" json:"result_status"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	int64	`gorm:"column:spare3" json:"spare3"`			
Spare4	string	`gorm:"column:spare4" json:"spare4"`			
Spare5	string	`gorm:"column:spare5" json:"spare5"`			
Spare6	string	`gorm:"column:spare6" json:"spare6"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualProxyRoute) TableName() string {
	return "__all_virtual_proxy_route"
}
	

// AllVirtualProxyRouteColumns get sql column name.获取数据库列名
var AllVirtualProxyRouteColumns = struct { 
	SQLString string
	TenantName string
	DatabaseName string
	TableName string
	TableID string
	CalculatorBin string
	ResultStatus string
	Spare1 string
	Spare2 string
	Spare3 string
	Spare4 string
	Spare5 string
	Spare6 string    
	}{ 
		SQLString:"sql_string",  
		TenantName:"tenant_name",  
		DatabaseName:"database_name",  
		TableName:"table_name",  
		TableID:"table_id",  
		CalculatorBin:"calculator_bin",  
		ResultStatus:"result_status",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Spare4:"spare4",  
		Spare5:"spare5",  
		Spare6:"spare6",             
	}
	
// AllVirtualProxySchema [...]		
type	AllVirtualProxySchema	struct {		
TenantName	string	`gorm:"primaryKey;column:tenant_name" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
TableName	string	`gorm:"primaryKey;column:table_name" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SQLPort	int64	`gorm:"primaryKey;column:sql_port" json:"-"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
Role	int64	`gorm:"column:role" json:"role"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	int64	`gorm:"column:spare3" json:"spare3"`			
Spare4	string	`gorm:"column:spare4" json:"spare4"`			
Spare5	string	`gorm:"column:spare5" json:"spare5"`			
Spare6	string	`gorm:"column:spare6" json:"spare6"`			
ComplexTableType	int64	`gorm:"column:complex_table_type" json:"complex_table_type"`			
Level1DecodedDbName	string	`gorm:"column:level1_decoded_db_name" json:"level1_decoded_db_name"`			
Level1DecodedTableName	string	`gorm:"column:level1_decoded_table_name" json:"level1_decoded_table_name"`			
Level2DecodedDbName	string	`gorm:"column:level2_decoded_db_name" json:"level2_decoded_db_name"`			
Level2DecodedTableName	string	`gorm:"column:level2_decoded_table_name" json:"level2_decoded_table_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualProxySchema) TableName() string {
	return "__all_virtual_proxy_schema"
}
	

// AllVirtualProxySchemaColumns get sql column name.获取数据库列名
var AllVirtualProxySchemaColumns = struct { 
	TenantName string
	DatabaseName string
	TableName string
	PartitionID string
	SvrIP string
	SQLPort string
	TableID string
	Role string
	PartNum string
	ReplicaNum string
	TableType string
	SchemaVersion string
	Spare1 string
	Spare2 string
	Spare3 string
	Spare4 string
	Spare5 string
	Spare6 string
	ComplexTableType string
	Level1DecodedDbName string
	Level1DecodedTableName string
	Level2DecodedDbName string
	Level2DecodedTableName string    
	}{ 
		TenantName:"tenant_name",  
		DatabaseName:"database_name",  
		TableName:"table_name",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SQLPort:"sql_port",  
		TableID:"table_id",  
		Role:"role",  
		PartNum:"part_num",  
		ReplicaNum:"replica_num",  
		TableType:"table_type",  
		SchemaVersion:"schema_version",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Spare4:"spare4",  
		Spare5:"spare5",  
		Spare6:"spare6",  
		ComplexTableType:"complex_table_type",  
		Level1DecodedDbName:"level1_decoded_db_name",  
		Level1DecodedTableName:"level1_decoded_table_name",  
		Level2DecodedDbName:"level2_decoded_db_name",  
		Level2DecodedTableName:"level2_decoded_table_name",             
	}
	
// AllVirtualProxyServerStat [...]		
type	AllVirtualProxyServerStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
StartServiceTime	int64	`gorm:"column:start_service_time" json:"start_service_time"`			
StopTime	int64	`gorm:"column:stop_time" json:"stop_time"`			
Status	string	`gorm:"column:status" json:"status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualProxyServerStat) TableName() string {
	return "__all_virtual_proxy_server_stat"
}
	

// AllVirtualProxyServerStatColumns get sql column name.获取数据库列名
var AllVirtualProxyServerStatColumns = struct { 
	SvrIP string
	SvrPort string
	Zone string
	StartServiceTime string
	StopTime string
	Status string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Zone:"zone",  
		StartServiceTime:"start_service_time",  
		StopTime:"stop_time",  
		Status:"status",             
	}
	
// AllVirtualProxySubPartition [...]		
type	AllVirtualProxySubPartition	struct {		
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
SubPartID	int64	`gorm:"primaryKey;column:sub_part_id" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
PartName	string	`gorm:"column:part_name" json:"part_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
LowBoundVal	string	`gorm:"column:low_bound_val" json:"low_bound_val"`			
LowBoundValBin	string	`gorm:"column:low_bound_val_bin" json:"low_bound_val_bin"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
HighBoundValBin	string	`gorm:"column:high_bound_val_bin" json:"high_bound_val_bin"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	int64	`gorm:"column:spare3" json:"spare3"`			
Spare4	string	`gorm:"column:spare4" json:"spare4"`			
Spare5	string	`gorm:"column:spare5" json:"spare5"`			
Spare6	string	`gorm:"column:spare6" json:"spare6"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualProxySubPartition) TableName() string {
	return "__all_virtual_proxy_sub_partition"
}
	

// AllVirtualProxySubPartitionColumns get sql column name.获取数据库列名
var AllVirtualProxySubPartitionColumns = struct { 
	TableID string
	PartID string
	SubPartID string
	TenantID string
	PartName string
	Status string
	LowBoundVal string
	LowBoundValBin string
	HighBoundVal string
	HighBoundValBin string
	Spare1 string
	Spare2 string
	Spare3 string
	Spare4 string
	Spare5 string
	Spare6 string    
	}{ 
		TableID:"table_id",  
		PartID:"part_id",  
		SubPartID:"sub_part_id",  
		TenantID:"tenant_id",  
		PartName:"part_name",  
		Status:"status",  
		LowBoundVal:"low_bound_val",  
		LowBoundValBin:"low_bound_val_bin",  
		HighBoundVal:"high_bound_val",  
		HighBoundValBin:"high_bound_val_bin",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Spare4:"spare4",  
		Spare5:"spare5",  
		Spare6:"spare6",             
	}
	
// AllVirtualProxySysVariable [...]		
type	AllVirtualProxySysVariable	struct {		
Name	string	`gorm:"column:name" json:"name"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Flags	int64	`gorm:"column:flags" json:"flags"`			
ModifiedTime	int64	`gorm:"column:modified_time" json:"modified_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualProxySysVariable) TableName() string {
	return "__all_virtual_proxy_sys_variable"
}
	

// AllVirtualProxySysVariableColumns get sql column name.获取数据库列名
var AllVirtualProxySysVariableColumns = struct { 
	Name string
	TenantID string
	DataType string
	Value string
	Flags string
	ModifiedTime string    
	}{ 
		Name:"name",  
		TenantID:"tenant_id",  
		DataType:"data_type",  
		Value:"value",  
		Flags:"flags",  
		ModifiedTime:"modified_time",             
	}
	
// AllVirtualPsItemInfo [...]		
type	AllVirtualPsItemInfo	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
StmtID	int64	`gorm:"column:stmt_id" json:"stmt_id"`			
DbID	int64	`gorm:"column:db_id" json:"db_id"`			
PsSQL	string	`gorm:"column:ps_sql" json:"ps_sql"`			
ParamCount	int64	`gorm:"column:param_count" json:"param_count"`			
StmtItemRefCount	int64	`gorm:"column:stmt_item_ref_count" json:"stmt_item_ref_count"`			
StmtInfoRefCount	int64	`gorm:"column:stmt_info_ref_count" json:"stmt_info_ref_count"`			
MemHold	int64	`gorm:"column:mem_hold" json:"mem_hold"`			
StmtType	int64	`gorm:"column:stmt_type" json:"stmt_type"`			
Checksum	int64	`gorm:"column:checksum" json:"checksum"`			
Expired	int8	`gorm:"column:expired" json:"expired"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPsItemInfo) TableName() string {
	return "__all_virtual_ps_item_info"
}
	

// AllVirtualPsItemInfoColumns get sql column name.获取数据库列名
var AllVirtualPsItemInfoColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	StmtID string
	DbID string
	PsSQL string
	ParamCount string
	StmtItemRefCount string
	StmtInfoRefCount string
	MemHold string
	StmtType string
	Checksum string
	Expired string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		StmtID:"stmt_id",  
		DbID:"db_id",  
		PsSQL:"ps_sql",  
		ParamCount:"param_count",  
		StmtItemRefCount:"stmt_item_ref_count",  
		StmtInfoRefCount:"stmt_info_ref_count",  
		MemHold:"mem_hold",  
		StmtType:"stmt_type",  
		Checksum:"checksum",  
		Expired:"expired",             
	}
	
// AllVirtualPsStat [...]		
type	AllVirtualPsStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
StmtCount	int64	`gorm:"column:stmt_count" json:"stmt_count"`			
HitCount	int64	`gorm:"column:hit_count" json:"hit_count"`			
AccessCount	int64	`gorm:"column:access_count" json:"access_count"`			
MemHold	int64	`gorm:"column:mem_hold" json:"mem_hold"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPsStat) TableName() string {
	return "__all_virtual_ps_stat"
}
	

// AllVirtualPsStatColumns get sql column name.获取数据库列名
var AllVirtualPsStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	StmtCount string
	HitCount string
	AccessCount string
	MemHold string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		StmtCount:"stmt_count",  
		HitCount:"hit_count",  
		AccessCount:"access_count",  
		MemHold:"mem_hold",             
	}
	
// AllVirtualPxWorkerStat [...]		
type	AllVirtualPxWorkerStat	struct {		
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
QcID	int64	`gorm:"column:qc_id" json:"qc_id"`			
SqcID	int64	`gorm:"column:sqc_id" json:"sqc_id"`			
WorkerID	int64	`gorm:"column:worker_id" json:"worker_id"`			
DfoID	int64	`gorm:"column:dfo_id" json:"dfo_id"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
ThreadID	int64	`gorm:"column:thread_id" json:"thread_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualPxWorkerStat) TableName() string {
	return "__all_virtual_px_worker_stat"
}
	

// AllVirtualPxWorkerStatColumns get sql column name.获取数据库列名
var AllVirtualPxWorkerStatColumns = struct { 
	SessionID string
	TenantID string
	SvrIP string
	SvrPort string
	TraceID string
	QcID string
	SqcID string
	WorkerID string
	DfoID string
	StartTime string
	ThreadID string    
	}{ 
		SessionID:"session_id",  
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TraceID:"trace_id",  
		QcID:"qc_id",  
		SqcID:"sqc_id",  
		WorkerID:"worker_id",  
		DfoID:"dfo_id",  
		StartTime:"start_time",  
		ThreadID:"thread_id",             
	}
	
// AllVirtualQueryResponseTime [...]		
type	AllVirtualQueryResponseTime	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
ResponseTime	int64	`gorm:"column:response_time" json:"response_time"`			
Count	int64	`gorm:"column:count" json:"count"`			
Total	int64	`gorm:"column:total" json:"total"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualQueryResponseTime) TableName() string {
	return "__all_virtual_query_response_time"
}
	

// AllVirtualQueryResponseTimeColumns get sql column name.获取数据库列名
var AllVirtualQueryResponseTimeColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	ResponseTime string
	Count string
	Total string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ResponseTime:"response_time",  
		Count:"count",  
		Total:"total",             
	}
	
// AllVirtualRaidStat [...]		
type	AllVirtualRaidStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
DiskIDx	int64	`gorm:"column:disk_idx" json:"disk_idx"`			
InstallSeq	int64	`gorm:"column:install_seq" json:"install_seq"`			
DataNum	int64	`gorm:"column:data_num" json:"data_num"`			
ParityNum	int64	`gorm:"column:parity_num" json:"parity_num"`			
CreateTs	int64	`gorm:"column:create_ts" json:"create_ts"`			
FinishTs	int64	`gorm:"column:finish_ts" json:"finish_ts"`			
AliasName	string	`gorm:"column:alias_name" json:"alias_name"`			
Status	string	`gorm:"column:status" json:"status"`			
Percent	int64	`gorm:"column:percent" json:"percent"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRaidStat) TableName() string {
	return "__all_virtual_raid_stat"
}
	

// AllVirtualRaidStatColumns get sql column name.获取数据库列名
var AllVirtualRaidStatColumns = struct { 
	SvrIP string
	SvrPort string
	DiskIDx string
	InstallSeq string
	DataNum string
	ParityNum string
	CreateTs string
	FinishTs string
	AliasName string
	Status string
	Percent string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		DiskIDx:"disk_idx",  
		InstallSeq:"install_seq",  
		DataNum:"data_num",  
		ParityNum:"parity_num",  
		CreateTs:"create_ts",  
		FinishTs:"finish_ts",  
		AliasName:"alias_name",  
		Status:"status",  
		Percent:"percent",             
	}
	
// AllVirtualRebalanceMapItemStat [...]		
type	AllVirtualRebalanceMapItemStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
MapType	int64	`gorm:"column:map_type" json:"map_type"`			
RowSize	int64	`gorm:"column:row_size" json:"row_size"`			
ColSize	int64	`gorm:"column:col_size" json:"col_size"`			
PartIDx	int64	`gorm:"column:part_idx" json:"part_idx"`			
DesignatedRole	int64	`gorm:"column:designated_role" json:"designated_role"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
DestUnitID	int64	`gorm:"column:dest_unit_id" json:"dest_unit_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRebalanceMapItemStat) TableName() string {
	return "__all_virtual_rebalance_map_item_stat"
}
	

// AllVirtualRebalanceMapItemStatColumns get sql column name.获取数据库列名
var AllVirtualRebalanceMapItemStatColumns = struct { 
	TenantID string
	Zone string
	TablegroupID string
	TableID string
	MapType string
	RowSize string
	ColSize string
	PartIDx string
	DesignatedRole string
	UnitID string
	DestUnitID string    
	}{ 
		TenantID:"tenant_id",  
		Zone:"zone",  
		TablegroupID:"tablegroup_id",  
		TableID:"table_id",  
		MapType:"map_type",  
		RowSize:"row_size",  
		ColSize:"col_size",  
		PartIDx:"part_idx",  
		DesignatedRole:"designated_role",  
		UnitID:"unit_id",  
		DestUnitID:"dest_unit_id",             
	}
	
// AllVirtualRebalanceMapStat [...]		
type	AllVirtualRebalanceMapStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
MapType	int64	`gorm:"column:map_type" json:"map_type"`			
IsValid	int8	`gorm:"column:is_valid" json:"is_valid"`			
RowSize	int64	`gorm:"column:row_size" json:"row_size"`			
ColSize	int64	`gorm:"column:col_size" json:"col_size"`			
Tables	string	`gorm:"column:tables" json:"tables"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRebalanceMapStat) TableName() string {
	return "__all_virtual_rebalance_map_stat"
}
	

// AllVirtualRebalanceMapStatColumns get sql column name.获取数据库列名
var AllVirtualRebalanceMapStatColumns = struct { 
	TenantID string
	MapType string
	IsValid string
	RowSize string
	ColSize string
	Tables string    
	}{ 
		TenantID:"tenant_id",  
		MapType:"map_type",  
		IsValid:"is_valid",  
		RowSize:"row_size",  
		ColSize:"col_size",  
		Tables:"tables",             
	}
	
// AllVirtualRebalanceReplicaStat [...]		
type	AllVirtualRebalanceReplicaStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
CPUUsage	float64	`gorm:"column:cpu_usage" json:"cpu_usage"`			
DiskUsage	float64	`gorm:"column:disk_usage" json:"disk_usage"`			
IopsUsage	float64	`gorm:"column:iops_usage" json:"iops_usage"`			
MemoryUsage	float64	`gorm:"column:memory_usage" json:"memory_usage"`			
NetPacketUsage	float64	`gorm:"column:net_packet_usage" json:"net_packet_usage"`			
NetThroughputUsage	float64	`gorm:"column:net_throughput_usage" json:"net_throughput_usage"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRebalanceReplicaStat) TableName() string {
	return "__all_virtual_rebalance_replica_stat"
}
	

// AllVirtualRebalanceReplicaStatColumns get sql column name.获取数据库列名
var AllVirtualRebalanceReplicaStatColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	CPUUsage string
	DiskUsage string
	IopsUsage string
	MemoryUsage string
	NetPacketUsage string
	NetThroughputUsage string
	Zone string
	UnitID string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		CPUUsage:"cpu_usage",  
		DiskUsage:"disk_usage",  
		IopsUsage:"iops_usage",  
		MemoryUsage:"memory_usage",  
		NetPacketUsage:"net_packet_usage",  
		NetThroughputUsage:"net_throughput_usage",  
		Zone:"zone",  
		UnitID:"unit_id",             
	}
	
// AllVirtualRebalanceTaskStat [...]		
type	AllVirtualRebalanceTaskStat	struct {		
TenantID	uint64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	uint64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
Source	string	`gorm:"column:source" json:"source"`			
DataSource	string	`gorm:"column:data_source" json:"data_source"`			
Destination	string	`gorm:"column:destination" json:"destination"`			
Offline	string	`gorm:"column:offline" json:"offline"`			
IsReplicate	string	`gorm:"column:is_replicate" json:"is_replicate"`			
TaskType	string	`gorm:"column:task_type" json:"task_type"`			
IsScheduled	string	`gorm:"column:is_scheduled" json:"is_scheduled"`			
IsManual	string	`gorm:"column:is_manual" json:"is_manual"`			
WaitingTime	int64	`gorm:"column:waiting_time" json:"waiting_time"`			
ExecutingTime	int64	`gorm:"column:executing_time" json:"executing_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRebalanceTaskStat) TableName() string {
	return "__all_virtual_rebalance_task_stat"
}
	

// AllVirtualRebalanceTaskStatColumns get sql column name.获取数据库列名
var AllVirtualRebalanceTaskStatColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	PartitionCount string
	Source string
	DataSource string
	Destination string
	Offline string
	IsReplicate string
	TaskType string
	IsScheduled string
	IsManual string
	WaitingTime string
	ExecutingTime string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		PartitionCount:"partition_count",  
		Source:"source",  
		DataSource:"data_source",  
		Destination:"destination",  
		Offline:"offline",  
		IsReplicate:"is_replicate",  
		TaskType:"task_type",  
		IsScheduled:"is_scheduled",  
		IsManual:"is_manual",  
		WaitingTime:"waiting_time",  
		ExecutingTime:"executing_time",             
	}
	
// AllVirtualRebalanceTenantStat [...]		
type	AllVirtualRebalanceTenantStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
CPUWeight	float64	`gorm:"column:cpu_weight" json:"cpu_weight"`			
DiskWeight	float64	`gorm:"column:disk_weight" json:"disk_weight"`			
IopsWeight	float64	`gorm:"column:iops_weight" json:"iops_weight"`			
MemoryWeight	float64	`gorm:"column:memory_weight" json:"memory_weight"`			
LoadImbalance	float64	`gorm:"column:load_imbalance" json:"load_imbalance"`			
LoadAvg	float64	`gorm:"column:load_avg" json:"load_avg"`			
CPUImbalance	float64	`gorm:"column:cpu_imbalance" json:"cpu_imbalance"`			
CPUAvg	float64	`gorm:"column:cpu_avg" json:"cpu_avg"`			
DiskImbalance	float64	`gorm:"column:disk_imbalance" json:"disk_imbalance"`			
DiskAvg	float64	`gorm:"column:disk_avg" json:"disk_avg"`			
IopsImbalance	float64	`gorm:"column:iops_imbalance" json:"iops_imbalance"`			
IopsAvg	float64	`gorm:"column:iops_avg" json:"iops_avg"`			
MemoryImbalance	float64	`gorm:"column:memory_imbalance" json:"memory_imbalance"`			
MemoryAvg	float64	`gorm:"column:memory_avg" json:"memory_avg"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRebalanceTenantStat) TableName() string {
	return "__all_virtual_rebalance_tenant_stat"
}
	

// AllVirtualRebalanceTenantStatColumns get sql column name.获取数据库列名
var AllVirtualRebalanceTenantStatColumns = struct { 
	TenantID string
	Zone string
	CPUWeight string
	DiskWeight string
	IopsWeight string
	MemoryWeight string
	LoadImbalance string
	LoadAvg string
	CPUImbalance string
	CPUAvg string
	DiskImbalance string
	DiskAvg string
	IopsImbalance string
	IopsAvg string
	MemoryImbalance string
	MemoryAvg string    
	}{ 
		TenantID:"tenant_id",  
		Zone:"zone",  
		CPUWeight:"cpu_weight",  
		DiskWeight:"disk_weight",  
		IopsWeight:"iops_weight",  
		MemoryWeight:"memory_weight",  
		LoadImbalance:"load_imbalance",  
		LoadAvg:"load_avg",  
		CPUImbalance:"cpu_imbalance",  
		CPUAvg:"cpu_avg",  
		DiskImbalance:"disk_imbalance",  
		DiskAvg:"disk_avg",  
		IopsImbalance:"iops_imbalance",  
		IopsAvg:"iops_avg",  
		MemoryImbalance:"memory_imbalance",  
		MemoryAvg:"memory_avg",             
	}
	
// AllVirtualRebalanceUnitDistributionStat [...]		
type	AllVirtualRebalanceUnitDistributionStat	struct {		
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
MaxCPU	float64	`gorm:"column:max_cpu" json:"max_cpu"`			
MinCPU	float64	`gorm:"column:min_cpu" json:"min_cpu"`			
MaxMemory	int64	`gorm:"column:max_memory" json:"max_memory"`			
MinMemory	int64	`gorm:"column:min_memory" json:"min_memory"`			
MaxIops	int64	`gorm:"column:max_iops" json:"max_iops"`			
MinIops	int64	`gorm:"column:min_iops" json:"min_iops"`			
MaxDiskSize	int64	`gorm:"column:max_disk_size" json:"max_disk_size"`			
MaxSessionNum	int64	`gorm:"column:max_session_num" json:"max_session_num"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRebalanceUnitDistributionStat) TableName() string {
	return "__all_virtual_rebalance_unit_distribution_stat"
}
	

// AllVirtualRebalanceUnitDistributionStatColumns get sql column name.获取数据库列名
var AllVirtualRebalanceUnitDistributionStatColumns = struct { 
	UnitID string
	TenantID string
	SvrIP string
	SvrPort string
	Zone string
	MaxCPU string
	MinCPU string
	MaxMemory string
	MinMemory string
	MaxIops string
	MinIops string
	MaxDiskSize string
	MaxSessionNum string    
	}{ 
		UnitID:"unit_id",  
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Zone:"zone",  
		MaxCPU:"max_cpu",  
		MinCPU:"min_cpu",  
		MaxMemory:"max_memory",  
		MinMemory:"min_memory",  
		MaxIops:"max_iops",  
		MinIops:"min_iops",  
		MaxDiskSize:"max_disk_size",  
		MaxSessionNum:"max_session_num",             
	}
	
// AllVirtualRebalanceUnitMigrateStat [...]		
type	AllVirtualRebalanceUnitMigrateStat	struct {		
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
SrcSvrIP	string	`gorm:"column:src_svr_ip" json:"src_svr_ip"`			
SrcSvrPort	int64	`gorm:"column:src_svr_port" json:"src_svr_port"`			
DstSvrIP	string	`gorm:"column:dst_svr_ip" json:"dst_svr_ip"`			
DstSvrPort	int64	`gorm:"column:dst_svr_port" json:"dst_svr_port"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRebalanceUnitMigrateStat) TableName() string {
	return "__all_virtual_rebalance_unit_migrate_stat"
}
	

// AllVirtualRebalanceUnitMigrateStatColumns get sql column name.获取数据库列名
var AllVirtualRebalanceUnitMigrateStatColumns = struct { 
	UnitID string
	Zone string
	SrcSvrIP string
	SrcSvrPort string
	DstSvrIP string
	DstSvrPort string    
	}{ 
		UnitID:"unit_id",  
		Zone:"zone",  
		SrcSvrIP:"src_svr_ip",  
		SrcSvrPort:"src_svr_port",  
		DstSvrIP:"dst_svr_ip",  
		DstSvrPort:"dst_svr_port",             
	}
	
// AllVirtualRebalanceUnitStat [...]		
type	AllVirtualRebalanceUnitStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
Load	float64	`gorm:"column:load" json:"load"`			
CPUUsageRate	float64	`gorm:"column:cpu_usage_rate" json:"cpu_usage_rate"`			
DiskUsageRate	float64	`gorm:"column:disk_usage_rate" json:"disk_usage_rate"`			
IopsUsageRate	float64	`gorm:"column:iops_usage_rate" json:"iops_usage_rate"`			
MemoryUsageRate	float64	`gorm:"column:memory_usage_rate" json:"memory_usage_rate"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRebalanceUnitStat) TableName() string {
	return "__all_virtual_rebalance_unit_stat"
}
	

// AllVirtualRebalanceUnitStatColumns get sql column name.获取数据库列名
var AllVirtualRebalanceUnitStatColumns = struct { 
	TenantID string
	Zone string
	UnitID string
	Load string
	CPUUsageRate string
	DiskUsageRate string
	IopsUsageRate string
	MemoryUsageRate string    
	}{ 
		TenantID:"tenant_id",  
		Zone:"zone",  
		UnitID:"unit_id",  
		Load:"load",  
		CPUUsageRate:"cpu_usage_rate",  
		DiskUsageRate:"disk_usage_rate",  
		IopsUsageRate:"iops_usage_rate",  
		MemoryUsageRate:"memory_usage_rate",             
	}
	
// AllVirtualRecyclebin [...]		
type	AllVirtualRecyclebin	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ObjectName	string	`gorm:"primaryKey;column:object_name" json:"-"`			
Type	int64	`gorm:"primaryKey;column:type" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
OriginalName	string	`gorm:"column:original_name" json:"original_name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRecyclebin) TableName() string {
	return "__all_virtual_recyclebin"
}
	

// AllVirtualRecyclebinColumns get sql column name.获取数据库列名
var AllVirtualRecyclebinColumns = struct { 
	TenantID string
	ObjectName string
	Type string
	GmtCreate string
	DatabaseID string
	TableID string
	TablegroupID string
	OriginalName string    
	}{ 
		TenantID:"tenant_id",  
		ObjectName:"object_name",  
		Type:"type",  
		GmtCreate:"gmt_create",  
		DatabaseID:"database_id",  
		TableID:"table_id",  
		TablegroupID:"tablegroup_id",  
		OriginalName:"original_name",             
	}
	
// AllVirtualReplicaTask [...]		
type	AllVirtualReplicaTask	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
SrcIP	string	`gorm:"column:src_ip" json:"src_ip"`			
SrcPort	int64	`gorm:"column:src_port" json:"src_port"`			
SrcReplicaType	int64	`gorm:"column:src_replica_type" json:"src_replica_type"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Region	string	`gorm:"column:region" json:"region"`			
DstIP	string	`gorm:"column:dst_ip" json:"dst_ip"`			
DstPort	int64	`gorm:"column:dst_port" json:"dst_port"`			
DstReplicaType	int64	`gorm:"column:dst_replica_type" json:"dst_replica_type"`			
CmdType	string	`gorm:"column:cmd_type" json:"cmd_type"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualReplicaTask) TableName() string {
	return "__all_virtual_replica_task"
}
	

// AllVirtualReplicaTaskColumns get sql column name.获取数据库列名
var AllVirtualReplicaTaskColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	SrcIP string
	SrcPort string
	SrcReplicaType string
	Zone string
	Region string
	DstIP string
	DstPort string
	DstReplicaType string
	CmdType string
	Comment string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SrcIP:"src_ip",  
		SrcPort:"src_port",  
		SrcReplicaType:"src_replica_type",  
		Zone:"zone",  
		Region:"region",  
		DstIP:"dst_ip",  
		DstPort:"dst_port",  
		DstReplicaType:"dst_replica_type",  
		CmdType:"cmd_type",  
		Comment:"comment",             
	}
	
// AllVirtualReservedTableMgr [...]		
type	AllVirtualReservedTableMgr	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
TableType	int64	`gorm:"primaryKey;column:table_type" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
IndexID	int64	`gorm:"primaryKey;column:index_id" json:"-"`			
BaseVersion	int64	`gorm:"primaryKey;column:base_version" json:"-"`			
MultiVersionStart	int64	`gorm:"primaryKey;column:multi_version_start" json:"-"`			
SnapshotVersion	int64	`gorm:"primaryKey;column:snapshot_version" json:"-"`			
Version	int64	`gorm:"primaryKey;column:version" json:"-"`			
Size	int64	`gorm:"column:size" json:"size"`			
Ref	int64	`gorm:"column:ref" json:"ref"`			
ReserveType	string	`gorm:"column:reserve_type" json:"reserve_type"`			
ReservePointVersion	int64	`gorm:"column:reserve_point_version" json:"reserve_point_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualReservedTableMgr) TableName() string {
	return "__all_virtual_reserved_table_mgr"
}
	

// AllVirtualReservedTableMgrColumns get sql column name.获取数据库列名
var AllVirtualReservedTableMgrColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	TableType string
	PartitionID string
	IndexID string
	BaseVersion string
	MultiVersionStart string
	SnapshotVersion string
	Version string
	Size string
	Ref string
	ReserveType string
	ReservePointVersion string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		TableType:"table_type",  
		PartitionID:"partition_id",  
		IndexID:"index_id",  
		BaseVersion:"base_version",  
		MultiVersionStart:"multi_version_start",  
		SnapshotVersion:"snapshot_version",  
		Version:"version",  
		Size:"size",  
		Ref:"ref",  
		ReserveType:"reserve_type",  
		ReservePointVersion:"reserve_point_version",             
	}
	
// AllVirtualRestorePgInfo [...]		
type	AllVirtualRestorePgInfo	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
MacroBlockCount	int64	`gorm:"column:macro_block_count" json:"macro_block_count"`			
FinishMacroBlockCount	int64	`gorm:"column:finish_macro_block_count" json:"finish_macro_block_count"`			
PartitionCount	int64	`gorm:"column:partition_count" json:"partition_count"`			
FinishPartitionCount	int64	`gorm:"column:finish_partition_count" json:"finish_partition_count"`			
RestoreInfo	string	`gorm:"column:restore_info" json:"restore_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRestorePgInfo) TableName() string {
	return "__all_virtual_restore_pg_info"
}
	

// AllVirtualRestorePgInfoColumns get sql column name.获取数据库列名
var AllVirtualRestorePgInfoColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	GmtCreate string
	GmtModified string
	MacroBlockCount string
	FinishMacroBlockCount string
	PartitionCount string
	FinishPartitionCount string
	RestoreInfo string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		MacroBlockCount:"macro_block_count",  
		FinishMacroBlockCount:"finish_macro_block_count",  
		PartitionCount:"partition_count",  
		FinishPartitionCount:"finish_partition_count",  
		RestoreInfo:"restore_info",             
	}
	
// AllVirtualRootserviceStat [...]		
type	AllVirtualRootserviceStat	struct {		
Statistic#	int64	`gorm:"column:statistic#" json:"statistic#"`			
Value	int64	`gorm:"column:value" json:"value"`			
StatID	int64	`gorm:"column:stat_id" json:"stat_id"`			
Name	string	`gorm:"column:name" json:"name"`			
Class	int64	`gorm:"column:class" json:"class"`			
CanVisible	int8	`gorm:"column:can_visible" json:"can_visible"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRootserviceStat) TableName() string {
	return "__all_virtual_rootservice_stat"
}
	

// AllVirtualRootserviceStatColumns get sql column name.获取数据库列名
var AllVirtualRootserviceStatColumns = struct { 
	Statistic# string
	Value string
	StatID string
	Name string
	Class string
	CanVisible string    
	}{ 
		Statistic#:"statistic#",  
		Value:"value",  
		StatID:"stat_id",  
		Name:"name",  
		Class:"class",  
		CanVisible:"can_visible",             
	}
	
// AllVirtualRoutine [...]		
type	AllVirtualRoutine	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoutineID	int64	`gorm:"primaryKey;column:routine_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
RoutineName	string	`gorm:"column:routine_name" json:"routine_name"`			
Overload	int64	`gorm:"column:overload" json:"overload"`			
SubprogramID	int64	`gorm:"column:subprogram_id" json:"subprogram_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
RoutineType	int64	`gorm:"column:routine_type" json:"routine_type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
PrivUser	string	`gorm:"column:priv_user" json:"priv_user"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
RoutineBody	string	`gorm:"column:routine_body" json:"routine_body"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRoutine) TableName() string {
	return "__all_virtual_routine"
}
	

// AllVirtualRoutineColumns get sql column name.获取数据库列名
var AllVirtualRoutineColumns = struct { 
	TenantID string
	RoutineID string
	GmtCreate string
	GmtModified string
	DatabaseID string
	PackageID string
	RoutineName string
	Overload string
	SubprogramID string
	SchemaVersion string
	RoutineType string
	Flag string
	OwnerID string
	PrivUser string
	CompFlag string
	ExecEnv string
	RoutineBody string
	Comment string
	RouteSQL string    
	}{ 
		TenantID:"tenant_id",  
		RoutineID:"routine_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DatabaseID:"database_id",  
		PackageID:"package_id",  
		RoutineName:"routine_name",  
		Overload:"overload",  
		SubprogramID:"subprogram_id",  
		SchemaVersion:"schema_version",  
		RoutineType:"routine_type",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		PrivUser:"priv_user",  
		CompFlag:"comp_flag",  
		ExecEnv:"exec_env",  
		RoutineBody:"routine_body",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllVirtualRoutineHistory [...]		
type	AllVirtualRoutineHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoutineID	int64	`gorm:"primaryKey;column:routine_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
RoutineName	string	`gorm:"column:routine_name" json:"routine_name"`			
Overload	int64	`gorm:"column:overload" json:"overload"`			
SubprogramID	int64	`gorm:"column:subprogram_id" json:"subprogram_id"`			
RoutineType	int64	`gorm:"column:routine_type" json:"routine_type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
PrivUser	string	`gorm:"column:priv_user" json:"priv_user"`			
CompFlag	int64	`gorm:"column:comp_flag" json:"comp_flag"`			
ExecEnv	string	`gorm:"column:exec_env" json:"exec_env"`			
RoutineBody	string	`gorm:"column:routine_body" json:"routine_body"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RouteSQL	string	`gorm:"column:route_sql" json:"route_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRoutineHistory) TableName() string {
	return "__all_virtual_routine_history"
}
	

// AllVirtualRoutineHistoryColumns get sql column name.获取数据库列名
var AllVirtualRoutineHistoryColumns = struct { 
	TenantID string
	RoutineID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DatabaseID string
	PackageID string
	RoutineName string
	Overload string
	SubprogramID string
	RoutineType string
	Flag string
	OwnerID string
	PrivUser string
	CompFlag string
	ExecEnv string
	RoutineBody string
	Comment string
	RouteSQL string    
	}{ 
		TenantID:"tenant_id",  
		RoutineID:"routine_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		PackageID:"package_id",  
		RoutineName:"routine_name",  
		Overload:"overload",  
		SubprogramID:"subprogram_id",  
		RoutineType:"routine_type",  
		Flag:"flag",  
		OwnerID:"owner_id",  
		PrivUser:"priv_user",  
		CompFlag:"comp_flag",  
		ExecEnv:"exec_env",  
		RoutineBody:"routine_body",  
		Comment:"comment",  
		RouteSQL:"route_sql",             
	}
	
// AllVirtualRoutineParam [...]		
type	AllVirtualRoutineParam	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoutineID	int64	`gorm:"primaryKey;column:routine_id" json:"-"`			
Sequence	int64	`gorm:"primaryKey;column:sequence" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SubprogramID	int64	`gorm:"column:subprogram_id" json:"subprogram_id"`			
ParamPosition	int64	`gorm:"column:param_position" json:"param_position"`			
ParamLevel	int64	`gorm:"column:param_level" json:"param_level"`			
ParamName	string	`gorm:"column:param_name" json:"param_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ParamType	int64	`gorm:"column:param_type" json:"param_type"`			
ParamLength	int64	`gorm:"column:param_length" json:"param_length"`			
ParamPrecision	int64	`gorm:"column:param_precision" json:"param_precision"`			
ParamScale	int64	`gorm:"column:param_scale" json:"param_scale"`			
ParamZeroFill	int64	`gorm:"column:param_zero_fill" json:"param_zero_fill"`			
ParamCharset	int64	`gorm:"column:param_charset" json:"param_charset"`			
ParamCollType	int64	`gorm:"column:param_coll_type" json:"param_coll_type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
DefaultValue	string	`gorm:"column:default_value" json:"default_value"`			
TypeOwner	int64	`gorm:"column:type_owner" json:"type_owner"`			
TypeName	string	`gorm:"column:type_name" json:"type_name"`			
TypeSubname	string	`gorm:"column:type_subname" json:"type_subname"`			
ExtendedTypeInfo	[]byte	`gorm:"column:extended_type_info" json:"extended_type_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRoutineParam) TableName() string {
	return "__all_virtual_routine_param"
}
	

// AllVirtualRoutineParamColumns get sql column name.获取数据库列名
var AllVirtualRoutineParamColumns = struct { 
	TenantID string
	RoutineID string
	Sequence string
	GmtCreate string
	GmtModified string
	SubprogramID string
	ParamPosition string
	ParamLevel string
	ParamName string
	SchemaVersion string
	ParamType string
	ParamLength string
	ParamPrecision string
	ParamScale string
	ParamZeroFill string
	ParamCharset string
	ParamCollType string
	Flag string
	DefaultValue string
	TypeOwner string
	TypeName string
	TypeSubname string
	ExtendedTypeInfo string    
	}{ 
		TenantID:"tenant_id",  
		RoutineID:"routine_id",  
		Sequence:"sequence",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SubprogramID:"subprogram_id",  
		ParamPosition:"param_position",  
		ParamLevel:"param_level",  
		ParamName:"param_name",  
		SchemaVersion:"schema_version",  
		ParamType:"param_type",  
		ParamLength:"param_length",  
		ParamPrecision:"param_precision",  
		ParamScale:"param_scale",  
		ParamZeroFill:"param_zero_fill",  
		ParamCharset:"param_charset",  
		ParamCollType:"param_coll_type",  
		Flag:"flag",  
		DefaultValue:"default_value",  
		TypeOwner:"type_owner",  
		TypeName:"type_name",  
		TypeSubname:"type_subname",  
		ExtendedTypeInfo:"extended_type_info",             
	}
	
// AllVirtualRoutineParamHistory [...]		
type	AllVirtualRoutineParamHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RoutineID	int64	`gorm:"primaryKey;column:routine_id" json:"-"`			
Sequence	int64	`gorm:"primaryKey;column:sequence" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
SubprogramID	int64	`gorm:"column:subprogram_id" json:"subprogram_id"`			
ParamPosition	int64	`gorm:"column:param_position" json:"param_position"`			
ParamLevel	int64	`gorm:"column:param_level" json:"param_level"`			
ParamName	string	`gorm:"column:param_name" json:"param_name"`			
ParamType	int64	`gorm:"column:param_type" json:"param_type"`			
ParamLength	int64	`gorm:"column:param_length" json:"param_length"`			
ParamPrecision	int64	`gorm:"column:param_precision" json:"param_precision"`			
ParamScale	int64	`gorm:"column:param_scale" json:"param_scale"`			
ParamZeroFill	int64	`gorm:"column:param_zero_fill" json:"param_zero_fill"`			
ParamCharset	int64	`gorm:"column:param_charset" json:"param_charset"`			
ParamCollType	int64	`gorm:"column:param_coll_type" json:"param_coll_type"`			
Flag	int64	`gorm:"column:flag" json:"flag"`			
DefaultValue	string	`gorm:"column:default_value" json:"default_value"`			
TypeOwner	int64	`gorm:"column:type_owner" json:"type_owner"`			
TypeName	string	`gorm:"column:type_name" json:"type_name"`			
TypeSubname	string	`gorm:"column:type_subname" json:"type_subname"`			
ExtendedTypeInfo	[]byte	`gorm:"column:extended_type_info" json:"extended_type_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualRoutineParamHistory) TableName() string {
	return "__all_virtual_routine_param_history"
}
	

// AllVirtualRoutineParamHistoryColumns get sql column name.获取数据库列名
var AllVirtualRoutineParamHistoryColumns = struct { 
	TenantID string
	RoutineID string
	Sequence string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	SubprogramID string
	ParamPosition string
	ParamLevel string
	ParamName string
	ParamType string
	ParamLength string
	ParamPrecision string
	ParamScale string
	ParamZeroFill string
	ParamCharset string
	ParamCollType string
	Flag string
	DefaultValue string
	TypeOwner string
	TypeName string
	TypeSubname string
	ExtendedTypeInfo string    
	}{ 
		TenantID:"tenant_id",  
		RoutineID:"routine_id",  
		Sequence:"sequence",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		SubprogramID:"subprogram_id",  
		ParamPosition:"param_position",  
		ParamLevel:"param_level",  
		ParamName:"param_name",  
		ParamType:"param_type",  
		ParamLength:"param_length",  
		ParamPrecision:"param_precision",  
		ParamScale:"param_scale",  
		ParamZeroFill:"param_zero_fill",  
		ParamCharset:"param_charset",  
		ParamCollType:"param_coll_type",  
		Flag:"flag",  
		DefaultValue:"default_value",  
		TypeOwner:"type_owner",  
		TypeName:"type_name",  
		TypeSubname:"type_subname",  
		ExtendedTypeInfo:"extended_type_info",             
	}
	
// AllVirtualSecurityAudit [...]		
type	AllVirtualSecurityAudit	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
AuditID	int64	`gorm:"primaryKey;column:audit_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
AuditType	uint64	`gorm:"column:audit_type" json:"audit_type"`			
OwnerID	uint64	`gorm:"column:owner_id" json:"owner_id"`			
OperationType	uint64	`gorm:"column:operation_type" json:"operation_type"`			
InSuccess	uint64	`gorm:"column:in_success" json:"in_success"`			
InFailure	uint64	`gorm:"column:in_failure" json:"in_failure"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSecurityAudit) TableName() string {
	return "__all_virtual_security_audit"
}
	

// AllVirtualSecurityAuditColumns get sql column name.获取数据库列名
var AllVirtualSecurityAuditColumns = struct { 
	TenantID string
	AuditID string
	GmtCreate string
	GmtModified string
	AuditType string
	OwnerID string
	OperationType string
	InSuccess string
	InFailure string    
	}{ 
		TenantID:"tenant_id",  
		AuditID:"audit_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		AuditType:"audit_type",  
		OwnerID:"owner_id",  
		OperationType:"operation_type",  
		InSuccess:"in_success",  
		InFailure:"in_failure",             
	}
	
// AllVirtualSecurityAuditHistory [...]		
type	AllVirtualSecurityAuditHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
AuditID	int64	`gorm:"primaryKey;column:audit_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
AuditType	uint64	`gorm:"column:audit_type" json:"audit_type"`			
OwnerID	uint64	`gorm:"column:owner_id" json:"owner_id"`			
OperationType	uint64	`gorm:"column:operation_type" json:"operation_type"`			
InSuccess	uint64	`gorm:"column:in_success" json:"in_success"`			
InFailure	uint64	`gorm:"column:in_failure" json:"in_failure"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSecurityAuditHistory) TableName() string {
	return "__all_virtual_security_audit_history"
}
	

// AllVirtualSecurityAuditHistoryColumns get sql column name.获取数据库列名
var AllVirtualSecurityAuditHistoryColumns = struct { 
	TenantID string
	AuditID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	AuditType string
	OwnerID string
	OperationType string
	InSuccess string
	InFailure string    
	}{ 
		TenantID:"tenant_id",  
		AuditID:"audit_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		AuditType:"audit_type",  
		OwnerID:"owner_id",  
		OperationType:"operation_type",  
		InSuccess:"in_success",  
		InFailure:"in_failure",             
	}
	
// AllVirtualSecurityAuditRecord [...]		
type	AllVirtualSecurityAuditRecord	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
RecordTimestampUs	time.Time	`gorm:"primaryKey;column:record_timestamp_us" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
UserID	uint64	`gorm:"column:user_id" json:"user_id"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
EffectiveUserID	uint64	`gorm:"column:effective_user_id" json:"effective_user_id"`			
EffectiveUserName	string	`gorm:"column:effective_user_name" json:"effective_user_name"`			
ClientIP	string	`gorm:"column:client_ip" json:"client_ip"`			
UserClientIP	string	`gorm:"column:user_client_ip" json:"user_client_ip"`			
ProxySessionID	uint64	`gorm:"column:proxy_session_id" json:"proxy_session_id"`			
SessionID	uint64	`gorm:"column:session_id" json:"session_id"`			
EntryID	uint64	`gorm:"column:entry_id" json:"entry_id"`			
StatementID	uint64	`gorm:"column:statement_id" json:"statement_id"`			
TransID	string	`gorm:"column:trans_id" json:"trans_id"`			
CommitVersion	int64	`gorm:"column:commit_version" json:"commit_version"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
DbID	uint64	`gorm:"column:db_id" json:"db_id"`			
CurDbID	uint64	`gorm:"column:cur_db_id" json:"cur_db_id"`			
SQLTimestampUs	time.Time	`gorm:"column:sql_timestamp_us" json:"sql_timestamp_us"`			
AuditID	uint64	`gorm:"column:audit_id" json:"audit_id"`			
AuditType	uint64	`gorm:"column:audit_type" json:"audit_type"`			
OperationType	uint64	`gorm:"column:operation_type" json:"operation_type"`			
ActionID	uint64	`gorm:"column:action_id" json:"action_id"`			
ReturnCode	int64	`gorm:"column:return_code" json:"return_code"`			
ObjOwnerName	string	`gorm:"column:obj_owner_name" json:"obj_owner_name"`			
ObjName	string	`gorm:"column:obj_name" json:"obj_name"`			
NewObjOwnerName	string	`gorm:"column:new_obj_owner_name" json:"new_obj_owner_name"`			
NewObjName	string	`gorm:"column:new_obj_name" json:"new_obj_name"`			
AuthPrivileges	string	`gorm:"column:auth_privileges" json:"auth_privileges"`			
AuthGrantee	string	`gorm:"column:auth_grantee" json:"auth_grantee"`			
LogoffLogicalRead	uint64	`gorm:"column:logoff_logical_read" json:"logoff_logical_read"`			
LogoffPhysicalRead	uint64	`gorm:"column:logoff_physical_read" json:"logoff_physical_read"`			
LogoffLogicalWrite	uint64	`gorm:"column:logoff_logical_write" json:"logoff_logical_write"`			
LogoffLockCount	uint64	`gorm:"column:logoff_lock_count" json:"logoff_lock_count"`			
LogoffDeadLock	string	`gorm:"column:logoff_dead_lock" json:"logoff_dead_lock"`			
LogoffCPUTimeUs	uint64	`gorm:"column:logoff_cpu_time_us" json:"logoff_cpu_time_us"`			
LogoffExecTimeUs	uint64	`gorm:"column:logoff_exec_time_us" json:"logoff_exec_time_us"`			
LogoffAliveTimeUs	uint64	`gorm:"column:logoff_alive_time_us" json:"logoff_alive_time_us"`			
CommentText	string	`gorm:"column:comment_text" json:"comment_text"`			
SQLBind	string	`gorm:"column:sql_bind" json:"sql_bind"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSecurityAuditRecord) TableName() string {
	return "__all_virtual_security_audit_record"
}
	

// AllVirtualSecurityAuditRecordColumns get sql column name.获取数据库列名
var AllVirtualSecurityAuditRecordColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	RecordTimestampUs string
	GmtCreate string
	GmtModified string
	UserID string
	UserName string
	EffectiveUserID string
	EffectiveUserName string
	ClientIP string
	UserClientIP string
	ProxySessionID string
	SessionID string
	EntryID string
	StatementID string
	TransID string
	CommitVersion string
	TraceID string
	DbID string
	CurDbID string
	SQLTimestampUs string
	AuditID string
	AuditType string
	OperationType string
	ActionID string
	ReturnCode string
	ObjOwnerName string
	ObjName string
	NewObjOwnerName string
	NewObjName string
	AuthPrivileges string
	AuthGrantee string
	LogoffLogicalRead string
	LogoffPhysicalRead string
	LogoffLogicalWrite string
	LogoffLockCount string
	LogoffDeadLock string
	LogoffCPUTimeUs string
	LogoffExecTimeUs string
	LogoffAliveTimeUs string
	CommentText string
	SQLBind string
	SQLText string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		RecordTimestampUs:"record_timestamp_us",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		UserID:"user_id",  
		UserName:"user_name",  
		EffectiveUserID:"effective_user_id",  
		EffectiveUserName:"effective_user_name",  
		ClientIP:"client_ip",  
		UserClientIP:"user_client_ip",  
		ProxySessionID:"proxy_session_id",  
		SessionID:"session_id",  
		EntryID:"entry_id",  
		StatementID:"statement_id",  
		TransID:"trans_id",  
		CommitVersion:"commit_version",  
		TraceID:"trace_id",  
		DbID:"db_id",  
		CurDbID:"cur_db_id",  
		SQLTimestampUs:"sql_timestamp_us",  
		AuditID:"audit_id",  
		AuditType:"audit_type",  
		OperationType:"operation_type",  
		ActionID:"action_id",  
		ReturnCode:"return_code",  
		ObjOwnerName:"obj_owner_name",  
		ObjName:"obj_name",  
		NewObjOwnerName:"new_obj_owner_name",  
		NewObjName:"new_obj_name",  
		AuthPrivileges:"auth_privileges",  
		AuthGrantee:"auth_grantee",  
		LogoffLogicalRead:"logoff_logical_read",  
		LogoffPhysicalRead:"logoff_physical_read",  
		LogoffLogicalWrite:"logoff_logical_write",  
		LogoffLockCount:"logoff_lock_count",  
		LogoffDeadLock:"logoff_dead_lock",  
		LogoffCPUTimeUs:"logoff_cpu_time_us",  
		LogoffExecTimeUs:"logoff_exec_time_us",  
		LogoffAliveTimeUs:"logoff_alive_time_us",  
		CommentText:"comment_text",  
		SQLBind:"sql_bind",  
		SQLText:"sql_text",             
	}
	
// AllVirtualSequenceObject [...]		
type	AllVirtualSequenceObject	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SequenceID	int64	`gorm:"primaryKey;column:sequence_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SequenceName	string	`gorm:"column:sequence_name" json:"sequence_name"`			
MinValue	float64	`gorm:"column:min_value" json:"min_value"`			
MaxValue	float64	`gorm:"column:max_value" json:"max_value"`			
IncrementBy	float64	`gorm:"column:increment_by" json:"increment_by"`			
StartWith	float64	`gorm:"column:start_with" json:"start_with"`			
CacheSize	float64	`gorm:"column:cache_size" json:"cache_size"`			
OrderFlag	int8	`gorm:"column:order_flag" json:"order_flag"`			
CycleFlag	int8	`gorm:"column:cycle_flag" json:"cycle_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSequenceObject) TableName() string {
	return "__all_virtual_sequence_object"
}
	

// AllVirtualSequenceObjectColumns get sql column name.获取数据库列名
var AllVirtualSequenceObjectColumns = struct { 
	TenantID string
	SequenceID string
	GmtCreate string
	GmtModified string
	SchemaVersion string
	DatabaseID string
	SequenceName string
	MinValue string
	MaxValue string
	IncrementBy string
	StartWith string
	CacheSize string
	OrderFlag string
	CycleFlag string    
	}{ 
		TenantID:"tenant_id",  
		SequenceID:"sequence_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SchemaVersion:"schema_version",  
		DatabaseID:"database_id",  
		SequenceName:"sequence_name",  
		MinValue:"min_value",  
		MaxValue:"max_value",  
		IncrementBy:"increment_by",  
		StartWith:"start_with",  
		CacheSize:"cache_size",  
		OrderFlag:"order_flag",  
		CycleFlag:"cycle_flag",             
	}
	
// AllVirtualSequenceObjectHistory [...]		
type	AllVirtualSequenceObjectHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SequenceID	int64	`gorm:"primaryKey;column:sequence_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SequenceName	string	`gorm:"column:sequence_name" json:"sequence_name"`			
MinValue	float64	`gorm:"column:min_value" json:"min_value"`			
MaxValue	float64	`gorm:"column:max_value" json:"max_value"`			
IncrementBy	float64	`gorm:"column:increment_by" json:"increment_by"`			
StartWith	float64	`gorm:"column:start_with" json:"start_with"`			
CacheSize	float64	`gorm:"column:cache_size" json:"cache_size"`			
OrderFlag	int8	`gorm:"column:order_flag" json:"order_flag"`			
CycleFlag	int8	`gorm:"column:cycle_flag" json:"cycle_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSequenceObjectHistory) TableName() string {
	return "__all_virtual_sequence_object_history"
}
	

// AllVirtualSequenceObjectHistoryColumns get sql column name.获取数据库列名
var AllVirtualSequenceObjectHistoryColumns = struct { 
	TenantID string
	SequenceID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DatabaseID string
	SequenceName string
	MinValue string
	MaxValue string
	IncrementBy string
	StartWith string
	CacheSize string
	OrderFlag string
	CycleFlag string    
	}{ 
		TenantID:"tenant_id",  
		SequenceID:"sequence_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		SequenceName:"sequence_name",  
		MinValue:"min_value",  
		MaxValue:"max_value",  
		IncrementBy:"increment_by",  
		StartWith:"start_with",  
		CacheSize:"cache_size",  
		OrderFlag:"order_flag",  
		CycleFlag:"cycle_flag",             
	}
	
// AllVirtualSequenceV2 [...]		
type	AllVirtualSequenceV2	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SequenceKey	int64	`gorm:"primaryKey;column:sequence_key" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SequenceName	string	`gorm:"column:sequence_name" json:"sequence_name"`			
SequenceValue	uint64	`gorm:"column:sequence_value" json:"sequence_value"`			
SyncValue	uint64	`gorm:"column:sync_value" json:"sync_value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSequenceV2) TableName() string {
	return "__all_virtual_sequence_v2"
}
	

// AllVirtualSequenceV2Columns get sql column name.获取数据库列名
var AllVirtualSequenceV2Columns = struct { 
	TenantID string
	SequenceKey string
	ColumnID string
	GmtCreate string
	GmtModified string
	SequenceName string
	SequenceValue string
	SyncValue string    
	}{ 
		TenantID:"tenant_id",  
		SequenceKey:"sequence_key",  
		ColumnID:"column_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SequenceName:"sequence_name",  
		SequenceValue:"sequence_value",  
		SyncValue:"sync_value",             
	}
	
// AllVirtualSequenceValue [...]		
type	AllVirtualSequenceValue	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SequenceID	int64	`gorm:"primaryKey;column:sequence_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
NextValue	float64	`gorm:"column:next_value" json:"next_value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSequenceValue) TableName() string {
	return "__all_virtual_sequence_value"
}
	

// AllVirtualSequenceValueColumns get sql column name.获取数据库列名
var AllVirtualSequenceValueColumns = struct { 
	TenantID string
	SequenceID string
	GmtCreate string
	GmtModified string
	NextValue string    
	}{ 
		TenantID:"tenant_id",  
		SequenceID:"sequence_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		NextValue:"next_value",             
	}
	
// AllVirtualServerBackupLogArchiveStatus [...]		
type	AllVirtualServerBackupLogArchiveStatus	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Incarnation	int64	`gorm:"column:incarnation" json:"incarnation"`			
LogArchiveRound	int64	`gorm:"column:log_archive_round" json:"log_archive_round"`			
LogArchiveStartTs	int64	`gorm:"column:log_archive_start_ts" json:"log_archive_start_ts"`			
LogArchiveCurTs	int64	`gorm:"column:log_archive_cur_ts" json:"log_archive_cur_ts"`			
PgCount	int64	`gorm:"column:pg_count" json:"pg_count"`			
CurPieceID	int64	`gorm:"column:cur_piece_id" json:"cur_piece_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualServerBackupLogArchiveStatus) TableName() string {
	return "__all_virtual_server_backup_log_archive_status"
}
	

// AllVirtualServerBackupLogArchiveStatusColumns get sql column name.获取数据库列名
var AllVirtualServerBackupLogArchiveStatusColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	Incarnation string
	LogArchiveRound string
	LogArchiveStartTs string
	LogArchiveCurTs string
	PgCount string
	CurPieceID string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		Incarnation:"incarnation",  
		LogArchiveRound:"log_archive_round",  
		LogArchiveStartTs:"log_archive_start_ts",  
		LogArchiveCurTs:"log_archive_cur_ts",  
		PgCount:"pg_count",  
		CurPieceID:"cur_piece_id",             
	}
	
// AllVirtualServerBlacklist [...]		
type	AllVirtualServerBlacklist	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
DstIP	string	`gorm:"column:dst_ip" json:"dst_ip"`			
DstPort	int64	`gorm:"column:dst_port" json:"dst_port"`			
IsInBlacklist	int8	`gorm:"column:is_in_blacklist" json:"is_in_blacklist"`			
IsClockdiffError	int8	`gorm:"column:is_clockdiff_error" json:"is_clockdiff_error"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualServerBlacklist) TableName() string {
	return "__all_virtual_server_blacklist"
}
	

// AllVirtualServerBlacklistColumns get sql column name.获取数据库列名
var AllVirtualServerBlacklistColumns = struct { 
	SvrIP string
	SvrPort string
	DstIP string
	DstPort string
	IsInBlacklist string
	IsClockdiffError string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		DstIP:"dst_ip",  
		DstPort:"dst_port",  
		IsInBlacklist:"is_in_blacklist",  
		IsClockdiffError:"is_clockdiff_error",             
	}
	
// AllVirtualServerClogStat [...]		
type	AllVirtualServerClogStat	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
SystemClogMinUsingFileID	int64	`gorm:"column:system_clog_min_using_file_id" json:"system_clog_min_using_file_id"`			
UserClogMinUsingFileID	int64	`gorm:"column:user_clog_min_using_file_id" json:"user_clog_min_using_file_id"`			
SystemIlogMinUsingFileID	int64	`gorm:"column:system_ilog_min_using_file_id" json:"system_ilog_min_using_file_id"`			
UserIlogMinUsingFileID	int64	`gorm:"column:user_ilog_min_using_file_id" json:"user_ilog_min_using_file_id"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Region	string	`gorm:"column:region" json:"region"`			
IDc	string	`gorm:"column:idc" json:"idc"`			
ZoneType	string	`gorm:"column:zone_type" json:"zone_type"`			
MergeStatus	string	`gorm:"column:merge_status" json:"merge_status"`			
ZoneStatus	string	`gorm:"column:zone_status" json:"zone_status"`			
SvrMinLogTimestamp	int64	`gorm:"column:svr_min_log_timestamp" json:"svr_min_log_timestamp"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualServerClogStat) TableName() string {
	return "__all_virtual_server_clog_stat"
}
	

// AllVirtualServerClogStatColumns get sql column name.获取数据库列名
var AllVirtualServerClogStatColumns = struct { 
	SvrIP string
	SvrPort string
	SystemClogMinUsingFileID string
	UserClogMinUsingFileID string
	SystemIlogMinUsingFileID string
	UserIlogMinUsingFileID string
	Zone string
	Region string
	IDc string
	ZoneType string
	MergeStatus string
	ZoneStatus string
	SvrMinLogTimestamp string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SystemClogMinUsingFileID:"system_clog_min_using_file_id",  
		UserClogMinUsingFileID:"user_clog_min_using_file_id",  
		SystemIlogMinUsingFileID:"system_ilog_min_using_file_id",  
		UserIlogMinUsingFileID:"user_ilog_min_using_file_id",  
		Zone:"zone",  
		Region:"region",  
		IDc:"idc",  
		ZoneType:"zone_type",  
		MergeStatus:"merge_status",  
		ZoneStatus:"zone_status",  
		SvrMinLogTimestamp:"svr_min_log_timestamp",             
	}
	
// AllVirtualServerLogMeta [...]		
type	AllVirtualServerLogMeta	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	uint64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionIDx	int64	`gorm:"primaryKey;column:partition_idx" json:"-"`			
PartitionCnt	int64	`gorm:"primaryKey;column:partition_cnt" json:"-"`			
StartLogID	uint64	`gorm:"primaryKey;column:start_log_id" json:"-"`			
StartLogTimestamp	int64	`gorm:"primaryKey;column:start_log_timestamp" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
EndLogID	uint64	`gorm:"column:end_log_id" json:"end_log_id"`			
EndLogTimestamp	int64	`gorm:"column:end_log_timestamp" json:"end_log_timestamp"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualServerLogMeta) TableName() string {
	return "__all_virtual_server_log_meta"
}
	

// AllVirtualServerLogMetaColumns get sql column name.获取数据库列名
var AllVirtualServerLogMetaColumns = struct { 
	TenantID string
	TableID string
	PartitionIDx string
	PartitionCnt string
	StartLogID string
	StartLogTimestamp string
	SvrIP string
	SvrPort string
	GmtCreate string
	GmtModified string
	EndLogID string
	EndLogTimestamp string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		PartitionCnt:"partition_cnt",  
		StartLogID:"start_log_id",  
		StartLogTimestamp:"start_log_timestamp",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		EndLogID:"end_log_id",  
		EndLogTimestamp:"end_log_timestamp",             
	}
	
// AllVirtualServerMemoryInfo [...]		
type	AllVirtualServerMemoryInfo	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
ServerMemoryHold	int64	`gorm:"column:server_memory_hold" json:"server_memory_hold"`			
ServerMemoryLimit	int64	`gorm:"column:server_memory_limit" json:"server_memory_limit"`			
SystemReserved	int64	`gorm:"column:system_reserved" json:"system_reserved"`			
ActiveMemstoreUsed	int64	`gorm:"column:active_memstore_used" json:"active_memstore_used"`			
TotalMemstoreUsed	int64	`gorm:"column:total_memstore_used" json:"total_memstore_used"`			
MajorFreezeTrigger	int64	`gorm:"column:major_freeze_trigger" json:"major_freeze_trigger"`			
MemstoreLimit	int64	`gorm:"column:memstore_limit" json:"memstore_limit"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualServerMemoryInfo) TableName() string {
	return "__all_virtual_server_memory_info"
}
	

// AllVirtualServerMemoryInfoColumns get sql column name.获取数据库列名
var AllVirtualServerMemoryInfoColumns = struct { 
	SvrIP string
	SvrPort string
	ServerMemoryHold string
	ServerMemoryLimit string
	SystemReserved string
	ActiveMemstoreUsed string
	TotalMemstoreUsed string
	MajorFreezeTrigger string
	MemstoreLimit string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ServerMemoryHold:"server_memory_hold",  
		ServerMemoryLimit:"server_memory_limit",  
		SystemReserved:"system_reserved",  
		ActiveMemstoreUsed:"active_memstore_used",  
		TotalMemstoreUsed:"total_memstore_used",  
		MajorFreezeTrigger:"major_freeze_trigger",  
		MemstoreLimit:"memstore_limit",             
	}
	
// AllVirtualServerObjectPool [...]		
type	AllVirtualServerObjectPool	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
ObjectType	string	`gorm:"primaryKey;column:object_type" json:"-"`			
ArenaID	int64	`gorm:"primaryKey;column:arena_id" json:"-"`			
Lock	int64	`gorm:"column:lock" json:"lock"`			
BorrowCount	int64	`gorm:"column:borrow_count" json:"borrow_count"`			
ReturnCount	int64	`gorm:"column:return_count" json:"return_count"`			
MissCount	int64	`gorm:"column:miss_count" json:"miss_count"`			
MissReturnCount	int64	`gorm:"column:miss_return_count" json:"miss_return_count"`			
FreeNum	int64	`gorm:"column:free_num" json:"free_num"`			
LastBorrowTs	int64	`gorm:"column:last_borrow_ts" json:"last_borrow_ts"`			
LastReturnTs	int64	`gorm:"column:last_return_ts" json:"last_return_ts"`			
LastMissTs	int64	`gorm:"column:last_miss_ts" json:"last_miss_ts"`			
LastMissReturnTs	int64	`gorm:"column:last_miss_return_ts" json:"last_miss_return_ts"`			
Next	int64	`gorm:"column:next" json:"next"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualServerObjectPool) TableName() string {
	return "__all_virtual_server_object_pool"
}
	

// AllVirtualServerObjectPoolColumns get sql column name.获取数据库列名
var AllVirtualServerObjectPoolColumns = struct { 
	SvrIP string
	SvrPort string
	ObjectType string
	ArenaID string
	Lock string
	BorrowCount string
	ReturnCount string
	MissCount string
	MissReturnCount string
	FreeNum string
	LastBorrowTs string
	LastReturnTs string
	LastMissTs string
	LastMissReturnTs string
	Next string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ObjectType:"object_type",  
		ArenaID:"arena_id",  
		Lock:"lock",  
		BorrowCount:"borrow_count",  
		ReturnCount:"return_count",  
		MissCount:"miss_count",  
		MissReturnCount:"miss_return_count",  
		FreeNum:"free_num",  
		LastBorrowTs:"last_borrow_ts",  
		LastReturnTs:"last_return_ts",  
		LastMissTs:"last_miss_ts",  
		LastMissReturnTs:"last_miss_return_ts",  
		Next:"next",             
	}
	
// AllVirtualServerSchemaInfo [...]		
type	AllVirtualServerSchemaInfo	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
RefreshedSchemaVersion	int64	`gorm:"column:refreshed_schema_version" json:"refreshed_schema_version"`			
ReceivedSchemaVersion	int64	`gorm:"column:received_schema_version" json:"received_schema_version"`			
SchemaCount	int64	`gorm:"column:schema_count" json:"schema_count"`			
SchemaSize	int64	`gorm:"column:schema_size" json:"schema_size"`			
MinSstableSchemaVersion	int64	`gorm:"column:min_sstable_schema_version" json:"min_sstable_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualServerSchemaInfo) TableName() string {
	return "__all_virtual_server_schema_info"
}
	

// AllVirtualServerSchemaInfoColumns get sql column name.获取数据库列名
var AllVirtualServerSchemaInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	RefreshedSchemaVersion string
	ReceivedSchemaVersion string
	SchemaCount string
	SchemaSize string
	MinSstableSchemaVersion string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		RefreshedSchemaVersion:"refreshed_schema_version",  
		ReceivedSchemaVersion:"received_schema_version",  
		SchemaCount:"schema_count",  
		SchemaSize:"schema_size",  
		MinSstableSchemaVersion:"min_sstable_schema_version",             
	}
	
// AllVirtualServerStat [...]		
type	AllVirtualServerStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
CPUTotal	float64	`gorm:"column:cpu_total" json:"cpu_total"`			
CPUAssigned	float64	`gorm:"column:cpu_assigned" json:"cpu_assigned"`			
CPUAssignedPercent	int64	`gorm:"column:cpu_assigned_percent" json:"cpu_assigned_percent"`			
MemTotal	int64	`gorm:"column:mem_total" json:"mem_total"`			
MemAssigned	int64	`gorm:"column:mem_assigned" json:"mem_assigned"`			
MemAssignedPercent	int64	`gorm:"column:mem_assigned_percent" json:"mem_assigned_percent"`			
DiskTotal	int64	`gorm:"column:disk_total" json:"disk_total"`			
DiskAssigned	int64	`gorm:"column:disk_assigned" json:"disk_assigned"`			
DiskAssignedPercent	int64	`gorm:"column:disk_assigned_percent" json:"disk_assigned_percent"`			
UnitNum	int64	`gorm:"column:unit_num" json:"unit_num"`			
MigratingUnitNum	int64	`gorm:"column:migrating_unit_num" json:"migrating_unit_num"`			
MergedVersion	int64	`gorm:"column:merged_version" json:"merged_version"`			
LeaderCount	int64	`gorm:"column:leader_count" json:"leader_count"`			
Load	float64	`gorm:"column:load" json:"load"`			
CPUWeight	float64	`gorm:"column:cpu_weight" json:"cpu_weight"`			
MemoryWeight	float64	`gorm:"column:memory_weight" json:"memory_weight"`			
DiskWeight	float64	`gorm:"column:disk_weight" json:"disk_weight"`			
ID	int64	`gorm:"column:id" json:"id"`			
InnerPort	int64	`gorm:"column:inner_port" json:"inner_port"`			
BuildVersion	string	`gorm:"column:build_version" json:"build_version"`			
RegisterTime	int64	`gorm:"column:register_time" json:"register_time"`			
LastHeartbeatTime	int64	`gorm:"column:last_heartbeat_time" json:"last_heartbeat_time"`			
BlockMigrateInTime	int64	`gorm:"column:block_migrate_in_time" json:"block_migrate_in_time"`			
StartServiceTime	int64	`gorm:"column:start_service_time" json:"start_service_time"`			
LastOfflineTime	int64	`gorm:"column:last_offline_time" json:"last_offline_time"`			
StopTime	int64	`gorm:"column:stop_time" json:"stop_time"`			
ForceStopHeartbeat	int64	`gorm:"column:force_stop_heartbeat" json:"force_stop_heartbeat"`			
AdminStatus	string	`gorm:"column:admin_status" json:"admin_status"`			
HeartbeatStatus	string	`gorm:"column:heartbeat_status" json:"heartbeat_status"`			
WithRootserver	int64	`gorm:"column:with_rootserver" json:"with_rootserver"`			
WithPartition	int64	`gorm:"column:with_partition" json:"with_partition"`			
MemInUse	int64	`gorm:"column:mem_in_use" json:"mem_in_use"`			
DiskInUse	int64	`gorm:"column:disk_in_use" json:"disk_in_use"`			
ClockDeviation	int64	`gorm:"column:clock_deviation" json:"clock_deviation"`			
HeartbeatLatency	int64	`gorm:"column:heartbeat_latency" json:"heartbeat_latency"`			
ClockSyncStatus	string	`gorm:"column:clock_sync_status" json:"clock_sync_status"`			
CPUCapacity	float64	`gorm:"column:cpu_capacity" json:"cpu_capacity"`			
CPUMaxAssigned	float64	`gorm:"column:cpu_max_assigned" json:"cpu_max_assigned"`			
MemCapacity	int64	`gorm:"column:mem_capacity" json:"mem_capacity"`			
MemMaxAssigned	int64	`gorm:"column:mem_max_assigned" json:"mem_max_assigned"`			
SslKeyExpiredTime	int64	`gorm:"column:ssl_key_expired_time" json:"ssl_key_expired_time"`			
DiskActual	int64	`gorm:"column:disk_actual" json:"disk_actual"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualServerStat) TableName() string {
	return "__all_virtual_server_stat"
}
	

// AllVirtualServerStatColumns get sql column name.获取数据库列名
var AllVirtualServerStatColumns = struct { 
	SvrIP string
	SvrPort string
	Zone string
	CPUTotal string
	CPUAssigned string
	CPUAssignedPercent string
	MemTotal string
	MemAssigned string
	MemAssignedPercent string
	DiskTotal string
	DiskAssigned string
	DiskAssignedPercent string
	UnitNum string
	MigratingUnitNum string
	MergedVersion string
	LeaderCount string
	Load string
	CPUWeight string
	MemoryWeight string
	DiskWeight string
	ID string
	InnerPort string
	BuildVersion string
	RegisterTime string
	LastHeartbeatTime string
	BlockMigrateInTime string
	StartServiceTime string
	LastOfflineTime string
	StopTime string
	ForceStopHeartbeat string
	AdminStatus string
	HeartbeatStatus string
	WithRootserver string
	WithPartition string
	MemInUse string
	DiskInUse string
	ClockDeviation string
	HeartbeatLatency string
	ClockSyncStatus string
	CPUCapacity string
	CPUMaxAssigned string
	MemCapacity string
	MemMaxAssigned string
	SslKeyExpiredTime string
	DiskActual string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Zone:"zone",  
		CPUTotal:"cpu_total",  
		CPUAssigned:"cpu_assigned",  
		CPUAssignedPercent:"cpu_assigned_percent",  
		MemTotal:"mem_total",  
		MemAssigned:"mem_assigned",  
		MemAssignedPercent:"mem_assigned_percent",  
		DiskTotal:"disk_total",  
		DiskAssigned:"disk_assigned",  
		DiskAssignedPercent:"disk_assigned_percent",  
		UnitNum:"unit_num",  
		MigratingUnitNum:"migrating_unit_num",  
		MergedVersion:"merged_version",  
		LeaderCount:"leader_count",  
		Load:"load",  
		CPUWeight:"cpu_weight",  
		MemoryWeight:"memory_weight",  
		DiskWeight:"disk_weight",  
		ID:"id",  
		InnerPort:"inner_port",  
		BuildVersion:"build_version",  
		RegisterTime:"register_time",  
		LastHeartbeatTime:"last_heartbeat_time",  
		BlockMigrateInTime:"block_migrate_in_time",  
		StartServiceTime:"start_service_time",  
		LastOfflineTime:"last_offline_time",  
		StopTime:"stop_time",  
		ForceStopHeartbeat:"force_stop_heartbeat",  
		AdminStatus:"admin_status",  
		HeartbeatStatus:"heartbeat_status",  
		WithRootserver:"with_rootserver",  
		WithPartition:"with_partition",  
		MemInUse:"mem_in_use",  
		DiskInUse:"disk_in_use",  
		ClockDeviation:"clock_deviation",  
		HeartbeatLatency:"heartbeat_latency",  
		ClockSyncStatus:"clock_sync_status",  
		CPUCapacity:"cpu_capacity",  
		CPUMaxAssigned:"cpu_max_assigned",  
		MemCapacity:"mem_capacity",  
		MemMaxAssigned:"mem_max_assigned",  
		SslKeyExpiredTime:"ssl_key_expired_time",  
		DiskActual:"disk_actual",             
	}
	
// AllVirtualSessionEvent [...]		
type	AllVirtualSessionEvent	struct {		
SessionID	int64	`gorm:"primaryKey;column:session_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
EventID	int64	`gorm:"primaryKey;column:event_id" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Event	string	`gorm:"column:event" json:"event"`			
WaitClassID	int64	`gorm:"column:wait_class_id" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:wait_class#" json:"wait_class#"`			
WaitClass	string	`gorm:"column:wait_class" json:"wait_class"`			
TotalWaits	int64	`gorm:"column:total_waits" json:"total_waits"`			
TotalTimeouts	int64	`gorm:"column:total_timeouts" json:"total_timeouts"`			
TimeWaited	float64	`gorm:"column:time_waited" json:"time_waited"`			
MaxWait	float64	`gorm:"column:max_wait" json:"max_wait"`			
AverageWait	float64	`gorm:"column:average_wait" json:"average_wait"`			
TimeWaitedMicro	int64	`gorm:"column:time_waited_micro" json:"time_waited_micro"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSessionEvent) TableName() string {
	return "__all_virtual_session_event"
}
	

// AllVirtualSessionEventColumns get sql column name.获取数据库列名
var AllVirtualSessionEventColumns = struct { 
	SessionID string
	SvrIP string
	SvrPort string
	EventID string
	TenantID string
	Event string
	WaitClassID string
	WaitClass# string
	WaitClass string
	TotalWaits string
	TotalTimeouts string
	TimeWaited string
	MaxWait string
	AverageWait string
	TimeWaitedMicro string    
	}{ 
		SessionID:"session_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		EventID:"event_id",  
		TenantID:"tenant_id",  
		Event:"event",  
		WaitClassID:"wait_class_id",  
		WaitClass#:"wait_class#",  
		WaitClass:"wait_class",  
		TotalWaits:"total_waits",  
		TotalTimeouts:"total_timeouts",  
		TimeWaited:"time_waited",  
		MaxWait:"max_wait",  
		AverageWait:"average_wait",  
		TimeWaitedMicro:"time_waited_micro",             
	}
	
// AllVirtualSessionWait [...]		
type	AllVirtualSessionWait	struct {		
SessionID	int64	`gorm:"primaryKey;column:session_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Event	string	`gorm:"column:event" json:"event"`			
P1text	string	`gorm:"column:p1text" json:"p1text"`			
P1	uint64	`gorm:"column:p1" json:"p1"`			
P2text	string	`gorm:"column:p2text" json:"p2text"`			
P2	uint64	`gorm:"column:p2" json:"p2"`			
P3text	string	`gorm:"column:p3text" json:"p3text"`			
P3	uint64	`gorm:"column:p3" json:"p3"`			
Level	int64	`gorm:"column:level" json:"level"`			
WaitClassID	int64	`gorm:"column:wait_class_id" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:wait_class#" json:"wait_class#"`			
WaitClass	string	`gorm:"column:wait_class" json:"wait_class"`			
State	string	`gorm:"column:state" json:"state"`			
WaitTimeMicro	int64	`gorm:"column:wait_time_micro" json:"wait_time_micro"`			
TimeRemainingMicro	int64	`gorm:"column:time_remaining_micro" json:"time_remaining_micro"`			
TimeSinceLastWaitMicro	int64	`gorm:"column:time_since_last_wait_micro" json:"time_since_last_wait_micro"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSessionWait) TableName() string {
	return "__all_virtual_session_wait"
}
	

// AllVirtualSessionWaitColumns get sql column name.获取数据库列名
var AllVirtualSessionWaitColumns = struct { 
	SessionID string
	SvrIP string
	SvrPort string
	TenantID string
	Event string
	P1text string
	P1 string
	P2text string
	P2 string
	P3text string
	P3 string
	Level string
	WaitClassID string
	WaitClass# string
	WaitClass string
	State string
	WaitTimeMicro string
	TimeRemainingMicro string
	TimeSinceLastWaitMicro string    
	}{ 
		SessionID:"session_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		Event:"event",  
		P1text:"p1text",  
		P1:"p1",  
		P2text:"p2text",  
		P2:"p2",  
		P3text:"p3text",  
		P3:"p3",  
		Level:"level",  
		WaitClassID:"wait_class_id",  
		WaitClass#:"wait_class#",  
		WaitClass:"wait_class",  
		State:"state",  
		WaitTimeMicro:"wait_time_micro",  
		TimeRemainingMicro:"time_remaining_micro",  
		TimeSinceLastWaitMicro:"time_since_last_wait_micro",             
	}
	
// AllVirtualSessionWaitHistory [...]		
type	AllVirtualSessionWaitHistory	struct {		
SessionID	int64	`gorm:"primaryKey;column:session_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Seq#	int64	`gorm:"primaryKey;column:seq#" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Event#	int64	`gorm:"column:event#" json:"event#"`			
Event	string	`gorm:"column:event" json:"event"`			
P1text	string	`gorm:"column:p1text" json:"p1text"`			
P1	uint64	`gorm:"column:p1" json:"p1"`			
P2text	string	`gorm:"column:p2text" json:"p2text"`			
P2	uint64	`gorm:"column:p2" json:"p2"`			
P3text	string	`gorm:"column:p3text" json:"p3text"`			
P3	uint64	`gorm:"column:p3" json:"p3"`			
Level	int64	`gorm:"column:level" json:"level"`			
WaitTimeMicro	int64	`gorm:"column:wait_time_micro" json:"wait_time_micro"`			
TimeSinceLastWaitMicro	int64	`gorm:"column:time_since_last_wait_micro" json:"time_since_last_wait_micro"`			
WaitTime	float64	`gorm:"column:wait_time" json:"wait_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSessionWaitHistory) TableName() string {
	return "__all_virtual_session_wait_history"
}
	

// AllVirtualSessionWaitHistoryColumns get sql column name.获取数据库列名
var AllVirtualSessionWaitHistoryColumns = struct { 
	SessionID string
	SvrIP string
	SvrPort string
	Seq# string
	TenantID string
	Event# string
	Event string
	P1text string
	P1 string
	P2text string
	P2 string
	P3text string
	P3 string
	Level string
	WaitTimeMicro string
	TimeSinceLastWaitMicro string
	WaitTime string    
	}{ 
		SessionID:"session_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Seq#:"seq#",  
		TenantID:"tenant_id",  
		Event#:"event#",  
		Event:"event",  
		P1text:"p1text",  
		P1:"p1",  
		P2text:"p2text",  
		P2:"p2",  
		P3text:"p3text",  
		P3:"p3",  
		Level:"level",  
		WaitTimeMicro:"wait_time_micro",  
		TimeSinceLastWaitMicro:"time_since_last_wait_micro",  
		WaitTime:"wait_time",             
	}
	
// AllVirtualSesstat [...]		
type	AllVirtualSesstat	struct {		
SessionID	int64	`gorm:"primaryKey;column:session_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Statistic#	int64	`gorm:"primaryKey;column:statistic#" json:"-"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Value	int64	`gorm:"column:value" json:"value"`			
CanVisible	int8	`gorm:"column:can_visible" json:"can_visible"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSesstat) TableName() string {
	return "__all_virtual_sesstat"
}
	

// AllVirtualSesstatColumns get sql column name.获取数据库列名
var AllVirtualSesstatColumns = struct { 
	SessionID string
	SvrIP string
	SvrPort string
	Statistic# string
	TenantID string
	Value string
	CanVisible string    
	}{ 
		SessionID:"session_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Statistic#:"statistic#",  
		TenantID:"tenant_id",  
		Value:"value",  
		CanVisible:"can_visible",             
	}
	
// AllVirtualSQLAudit [...]		
type	AllVirtualSQLAudit	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
RequestID	int64	`gorm:"primaryKey;column:request_id" json:"-"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
ClientIP	string	`gorm:"column:client_ip" json:"client_ip"`			
ClientPort	int64	`gorm:"column:client_port" json:"client_port"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
EffectiveTenantID	int64	`gorm:"column:effective_tenant_id" json:"effective_tenant_id"`			
UserID	int64	`gorm:"column:user_id" json:"user_id"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
DbID	uint64	`gorm:"column:db_id" json:"db_id"`			
DbName	string	`gorm:"column:db_name" json:"db_name"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
QuerySQL	string	`gorm:"column:query_sql" json:"query_sql"`			
PlanID	int64	`gorm:"column:plan_id" json:"plan_id"`			
AffectedRows	int64	`gorm:"column:affected_rows" json:"affected_rows"`			
ReturnRows	int64	`gorm:"column:return_rows" json:"return_rows"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
RetCode	int64	`gorm:"column:ret_code" json:"ret_code"`			
QcID	uint64	`gorm:"column:qc_id" json:"qc_id"`			
DfoID	int64	`gorm:"column:dfo_id" json:"dfo_id"`			
SqcID	int64	`gorm:"column:sqc_id" json:"sqc_id"`			
WorkerID	int64	`gorm:"column:worker_id" json:"worker_id"`			
Event	string	`gorm:"column:event" json:"event"`			
P1text	string	`gorm:"column:p1text" json:"p1text"`			
P1	uint64	`gorm:"column:p1" json:"p1"`			
P2text	string	`gorm:"column:p2text" json:"p2text"`			
P2	uint64	`gorm:"column:p2" json:"p2"`			
P3text	string	`gorm:"column:p3text" json:"p3text"`			
P3	uint64	`gorm:"column:p3" json:"p3"`			
Level	int64	`gorm:"column:level" json:"level"`			
WaitClassID	int64	`gorm:"column:wait_class_id" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:wait_class#" json:"wait_class#"`			
WaitClass	string	`gorm:"column:wait_class" json:"wait_class"`			
State	string	`gorm:"column:state" json:"state"`			
WaitTimeMicro	int64	`gorm:"column:wait_time_micro" json:"wait_time_micro"`			
TotalWaitTimeMicro	int64	`gorm:"column:total_wait_time_micro" json:"total_wait_time_micro"`			
TotalWaits	int64	`gorm:"column:total_waits" json:"total_waits"`			
RPCCount	int64	`gorm:"column:rpc_count" json:"rpc_count"`			
PlanType	int64	`gorm:"column:plan_type" json:"plan_type"`			
IsInnerSQL	int8	`gorm:"column:is_inner_sql" json:"is_inner_sql"`			
IsExecutorRPC	int8	`gorm:"column:is_executor_rpc" json:"is_executor_rpc"`			
IsHitPlan	int8	`gorm:"column:is_hit_plan" json:"is_hit_plan"`			
RequestTime	int64	`gorm:"column:request_time" json:"request_time"`			
ElapsedTime	int64	`gorm:"column:elapsed_time" json:"elapsed_time"`			
NetTime	int64	`gorm:"column:net_time" json:"net_time"`			
NetWaitTime	int64	`gorm:"column:net_wait_time" json:"net_wait_time"`			
QueueTime	int64	`gorm:"column:queue_time" json:"queue_time"`			
DecodeTime	int64	`gorm:"column:decode_time" json:"decode_time"`			
GetPlanTime	int64	`gorm:"column:get_plan_time" json:"get_plan_time"`			
ExecuteTime	int64	`gorm:"column:execute_time" json:"execute_time"`			
ApplicationWaitTime	uint64	`gorm:"column:application_wait_time" json:"application_wait_time"`			
ConcurrencyWaitTime	uint64	`gorm:"column:concurrency_wait_time" json:"concurrency_wait_time"`			
UserIoWaitTime	uint64	`gorm:"column:user_io_wait_time" json:"user_io_wait_time"`			
ScheduleTime	uint64	`gorm:"column:schedule_time" json:"schedule_time"`			
RowCacheHit	int64	`gorm:"column:row_cache_hit" json:"row_cache_hit"`			
BloomFilterCacheHit	int64	`gorm:"column:bloom_filter_cache_hit" json:"bloom_filter_cache_hit"`			
BlockCacheHit	int64	`gorm:"column:block_cache_hit" json:"block_cache_hit"`			
BlockIndexCacheHit	int64	`gorm:"column:block_index_cache_hit" json:"block_index_cache_hit"`			
DiskReads	int64	`gorm:"column:disk_reads" json:"disk_reads"`			
ExecutionID	int64	`gorm:"column:execution_id" json:"execution_id"`			
SessionID	uint64	`gorm:"column:session_id" json:"session_id"`			
RetryCnt	int64	`gorm:"column:retry_cnt" json:"retry_cnt"`			
TableScan	int8	`gorm:"column:table_scan" json:"table_scan"`			
ConsistencyLevel	int64	`gorm:"column:consistency_level" json:"consistency_level"`			
MemstoreReadRowCount	int64	`gorm:"column:memstore_read_row_count" json:"memstore_read_row_count"`			
SsstoreReadRowCount	int64	`gorm:"column:ssstore_read_row_count" json:"ssstore_read_row_count"`			
RequestMemoryUsed	int64	`gorm:"column:request_memory_used" json:"request_memory_used"`			
ExpectedWorkerCount	int64	`gorm:"column:expected_worker_count" json:"expected_worker_count"`			
UsedWorkerCount	int64	`gorm:"column:used_worker_count" json:"used_worker_count"`			
SchedInfo	string	`gorm:"column:sched_info" json:"sched_info"`			
FuseRowCacheHit	int64	`gorm:"column:fuse_row_cache_hit" json:"fuse_row_cache_hit"`			
UserClientIP	string	`gorm:"column:user_client_ip" json:"user_client_ip"`			
PsStmtID	int64	`gorm:"column:ps_stmt_id" json:"ps_stmt_id"`			
TransactionHash	uint64	`gorm:"column:transaction_hash" json:"transaction_hash"`			
RequestType	int64	`gorm:"column:request_type" json:"request_type"`			
IsBatchedMultiStmt	int8	`gorm:"column:is_batched_multi_stmt" json:"is_batched_multi_stmt"`			
ObTraceInfo	string	`gorm:"column:ob_trace_info" json:"ob_trace_info"`			
PlanHash	uint64	`gorm:"column:plan_hash" json:"plan_hash"`			
UserGroup	int64	`gorm:"column:user_group" json:"user_group"`			
LockForReadTime	int64	`gorm:"column:lock_for_read_time" json:"lock_for_read_time"`			
WaitTrxMigrateTime	int64	`gorm:"column:wait_trx_migrate_time" json:"wait_trx_migrate_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSQLAudit) TableName() string {
	return "__all_virtual_sql_audit"
}
	

// AllVirtualSQLAuditColumns get sql column name.获取数据库列名
var AllVirtualSQLAuditColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	RequestID string
	TraceID string
	ClientIP string
	ClientPort string
	TenantName string
	EffectiveTenantID string
	UserID string
	UserName string
	DbID string
	DbName string
	SQLID string
	QuerySQL string
	PlanID string
	AffectedRows string
	ReturnRows string
	PartitionCnt string
	RetCode string
	QcID string
	DfoID string
	SqcID string
	WorkerID string
	Event string
	P1text string
	P1 string
	P2text string
	P2 string
	P3text string
	P3 string
	Level string
	WaitClassID string
	WaitClass# string
	WaitClass string
	State string
	WaitTimeMicro string
	TotalWaitTimeMicro string
	TotalWaits string
	RPCCount string
	PlanType string
	IsInnerSQL string
	IsExecutorRPC string
	IsHitPlan string
	RequestTime string
	ElapsedTime string
	NetTime string
	NetWaitTime string
	QueueTime string
	DecodeTime string
	GetPlanTime string
	ExecuteTime string
	ApplicationWaitTime string
	ConcurrencyWaitTime string
	UserIoWaitTime string
	ScheduleTime string
	RowCacheHit string
	BloomFilterCacheHit string
	BlockCacheHit string
	BlockIndexCacheHit string
	DiskReads string
	ExecutionID string
	SessionID string
	RetryCnt string
	TableScan string
	ConsistencyLevel string
	MemstoreReadRowCount string
	SsstoreReadRowCount string
	RequestMemoryUsed string
	ExpectedWorkerCount string
	UsedWorkerCount string
	SchedInfo string
	FuseRowCacheHit string
	UserClientIP string
	PsStmtID string
	TransactionHash string
	RequestType string
	IsBatchedMultiStmt string
	ObTraceInfo string
	PlanHash string
	UserGroup string
	LockForReadTime string
	WaitTrxMigrateTime string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		RequestID:"request_id",  
		TraceID:"trace_id",  
		ClientIP:"client_ip",  
		ClientPort:"client_port",  
		TenantName:"tenant_name",  
		EffectiveTenantID:"effective_tenant_id",  
		UserID:"user_id",  
		UserName:"user_name",  
		DbID:"db_id",  
		DbName:"db_name",  
		SQLID:"sql_id",  
		QuerySQL:"query_sql",  
		PlanID:"plan_id",  
		AffectedRows:"affected_rows",  
		ReturnRows:"return_rows",  
		PartitionCnt:"partition_cnt",  
		RetCode:"ret_code",  
		QcID:"qc_id",  
		DfoID:"dfo_id",  
		SqcID:"sqc_id",  
		WorkerID:"worker_id",  
		Event:"event",  
		P1text:"p1text",  
		P1:"p1",  
		P2text:"p2text",  
		P2:"p2",  
		P3text:"p3text",  
		P3:"p3",  
		Level:"level",  
		WaitClassID:"wait_class_id",  
		WaitClass#:"wait_class#",  
		WaitClass:"wait_class",  
		State:"state",  
		WaitTimeMicro:"wait_time_micro",  
		TotalWaitTimeMicro:"total_wait_time_micro",  
		TotalWaits:"total_waits",  
		RPCCount:"rpc_count",  
		PlanType:"plan_type",  
		IsInnerSQL:"is_inner_sql",  
		IsExecutorRPC:"is_executor_rpc",  
		IsHitPlan:"is_hit_plan",  
		RequestTime:"request_time",  
		ElapsedTime:"elapsed_time",  
		NetTime:"net_time",  
		NetWaitTime:"net_wait_time",  
		QueueTime:"queue_time",  
		DecodeTime:"decode_time",  
		GetPlanTime:"get_plan_time",  
		ExecuteTime:"execute_time",  
		ApplicationWaitTime:"application_wait_time",  
		ConcurrencyWaitTime:"concurrency_wait_time",  
		UserIoWaitTime:"user_io_wait_time",  
		ScheduleTime:"schedule_time",  
		RowCacheHit:"row_cache_hit",  
		BloomFilterCacheHit:"bloom_filter_cache_hit",  
		BlockCacheHit:"block_cache_hit",  
		BlockIndexCacheHit:"block_index_cache_hit",  
		DiskReads:"disk_reads",  
		ExecutionID:"execution_id",  
		SessionID:"session_id",  
		RetryCnt:"retry_cnt",  
		TableScan:"table_scan",  
		ConsistencyLevel:"consistency_level",  
		MemstoreReadRowCount:"memstore_read_row_count",  
		SsstoreReadRowCount:"ssstore_read_row_count",  
		RequestMemoryUsed:"request_memory_used",  
		ExpectedWorkerCount:"expected_worker_count",  
		UsedWorkerCount:"used_worker_count",  
		SchedInfo:"sched_info",  
		FuseRowCacheHit:"fuse_row_cache_hit",  
		UserClientIP:"user_client_ip",  
		PsStmtID:"ps_stmt_id",  
		TransactionHash:"transaction_hash",  
		RequestType:"request_type",  
		IsBatchedMultiStmt:"is_batched_multi_stmt",  
		ObTraceInfo:"ob_trace_info",  
		PlanHash:"plan_hash",  
		UserGroup:"user_group",  
		LockForReadTime:"lock_for_read_time",  
		WaitTrxMigrateTime:"wait_trx_migrate_time",             
	}
	
// AllVirtualSQLMonitor [...]		
type	AllVirtualSQLMonitor	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
RequestID	int64	`gorm:"primaryKey;column:request_id" json:"-"`			
JobID	int64	`gorm:"primaryKey;column:job_id" json:"-"`			
TaskID	int64	`gorm:"primaryKey;column:task_id" json:"-"`			
PlanID	int64	`gorm:"column:plan_id" json:"plan_id"`			
SchedulerIP	string	`gorm:"column:scheduler_ip" json:"scheduler_ip"`			
SchedulerPort	int64	`gorm:"column:scheduler_port" json:"scheduler_port"`			
MonitorInfo	string	`gorm:"column:monitor_info" json:"monitor_info"`			
ExtendInfo	string	`gorm:"column:extend_info" json:"extend_info"`			
SQLExecStart	time.Time	`gorm:"column:sql_exec_start" json:"sql_exec_start"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSQLMonitor) TableName() string {
	return "__all_virtual_sql_monitor"
}
	

// AllVirtualSQLMonitorColumns get sql column name.获取数据库列名
var AllVirtualSQLMonitorColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	RequestID string
	JobID string
	TaskID string
	PlanID string
	SchedulerIP string
	SchedulerPort string
	MonitorInfo string
	ExtendInfo string
	SQLExecStart string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		RequestID:"request_id",  
		JobID:"job_id",  
		TaskID:"task_id",  
		PlanID:"plan_id",  
		SchedulerIP:"scheduler_ip",  
		SchedulerPort:"scheduler_port",  
		MonitorInfo:"monitor_info",  
		ExtendInfo:"extend_info",  
		SQLExecStart:"sql_exec_start",             
	}
	
// AllVirtualSQLMonitorStatname [...]		
type	AllVirtualSQLMonitorStatname	struct {		
ID	int64	`gorm:"column:ID" json:"id"`			
GroupID	int64	`gorm:"column:GROUP_ID" json:"group_id"`			
Name	string	`gorm:"column:NAME" json:"name"`			
Description	string	`gorm:"column:DESCRIPTION" json:"descr_ip_tion"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSQLMonitorStatname) TableName() string {
	return "__all_virtual_sql_monitor_statname"
}
	

// AllVirtualSQLMonitorStatnameColumns get sql column name.获取数据库列名
var AllVirtualSQLMonitorStatnameColumns = struct { 
	ID string
	GroupID string
	Name string
	Description string    
	}{ 
		ID:"ID",  
		GroupID:"GROUP_ID",  
		Name:"NAME",  
		Description:"DESCRIPTION",             
	}
	
// AllVirtualSQLPlanMonitor [...]		
type	AllVirtualSQLPlanMonitor	struct {		
SvrIP	string	`gorm:"primaryKey;column:SVR_IP" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:SVR_PORT" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:TENANT_ID" json:"-"`			
RequestID	int64	`gorm:"primaryKey;column:REQUEST_ID" json:"-"`			
TraceID	string	`gorm:"column:TRACE_ID" json:"trace_id"`			
FirstRefreshTime	time.Time	`gorm:"column:FIRST_REFRESH_TIME" json:"first_refresh_time"`			
LastRefreshTime	time.Time	`gorm:"column:LAST_REFRESH_TIME" json:"last_refresh_time"`			
FirstChangeTime	time.Time	`gorm:"column:FIRST_CHANGE_TIME" json:"first_change_time"`			
LastChangeTime	time.Time	`gorm:"column:LAST_CHANGE_TIME" json:"last_change_time"`			
Otherstat1ID	int64	`gorm:"column:OTHERSTAT_1_ID" json:"otherstat_1_id"`			
Otherstat1Value	int64	`gorm:"column:OTHERSTAT_1_VALUE" json:"otherstat_1_value"`			
Otherstat2ID	int64	`gorm:"column:OTHERSTAT_2_ID" json:"otherstat_2_id"`			
Otherstat2Value	int64	`gorm:"column:OTHERSTAT_2_VALUE" json:"otherstat_2_value"`			
Otherstat3ID	int64	`gorm:"column:OTHERSTAT_3_ID" json:"otherstat_3_id"`			
Otherstat3Value	int64	`gorm:"column:OTHERSTAT_3_VALUE" json:"otherstat_3_value"`			
Otherstat4ID	int64	`gorm:"column:OTHERSTAT_4_ID" json:"otherstat_4_id"`			
Otherstat4Value	int64	`gorm:"column:OTHERSTAT_4_VALUE" json:"otherstat_4_value"`			
Otherstat5ID	int64	`gorm:"column:OTHERSTAT_5_ID" json:"otherstat_5_id"`			
Otherstat5Value	int64	`gorm:"column:OTHERSTAT_5_VALUE" json:"otherstat_5_value"`			
Otherstat6ID	int64	`gorm:"column:OTHERSTAT_6_ID" json:"otherstat_6_id"`			
Otherstat6Value	int64	`gorm:"column:OTHERSTAT_6_VALUE" json:"otherstat_6_value"`			
Otherstat7ID	int64	`gorm:"column:OTHERSTAT_7_ID" json:"otherstat_7_id"`			
Otherstat7Value	int64	`gorm:"column:OTHERSTAT_7_VALUE" json:"otherstat_7_value"`			
Otherstat8ID	int64	`gorm:"column:OTHERSTAT_8_ID" json:"otherstat_8_id"`			
Otherstat8Value	int64	`gorm:"column:OTHERSTAT_8_VALUE" json:"otherstat_8_value"`			
Otherstat9ID	int64	`gorm:"column:OTHERSTAT_9_ID" json:"otherstat_9_id"`			
Otherstat9Value	int64	`gorm:"column:OTHERSTAT_9_VALUE" json:"otherstat_9_value"`			
Otherstat10ID	int64	`gorm:"column:OTHERSTAT_10_ID" json:"otherstat_10_id"`			
Otherstat10Value	int64	`gorm:"column:OTHERSTAT_10_VALUE" json:"otherstat_10_value"`			
ThreadID	int64	`gorm:"column:THREAD_ID" json:"thread_id"`			
PlanOperation	string	`gorm:"column:PLAN_OPERATION" json:"plan_operation"`			
Starts	int64	`gorm:"column:STARTS" json:"starts"`			
OutputRows	int64	`gorm:"column:OUTPUT_ROWS" json:"output_rows"`			
PlanLineID	int64	`gorm:"column:PLAN_LINE_ID" json:"plan_line_id"`			
PlanDepth	int64	`gorm:"column:PLAN_DEPTH" json:"plan_depth"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSQLPlanMonitor) TableName() string {
	return "__all_virtual_sql_plan_monitor"
}
	

// AllVirtualSQLPlanMonitorColumns get sql column name.获取数据库列名
var AllVirtualSQLPlanMonitorColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	RequestID string
	TraceID string
	FirstRefreshTime string
	LastRefreshTime string
	FirstChangeTime string
	LastChangeTime string
	Otherstat1ID string
	Otherstat1Value string
	Otherstat2ID string
	Otherstat2Value string
	Otherstat3ID string
	Otherstat3Value string
	Otherstat4ID string
	Otherstat4Value string
	Otherstat5ID string
	Otherstat5Value string
	Otherstat6ID string
	Otherstat6Value string
	Otherstat7ID string
	Otherstat7Value string
	Otherstat8ID string
	Otherstat8Value string
	Otherstat9ID string
	Otherstat9Value string
	Otherstat10ID string
	Otherstat10Value string
	ThreadID string
	PlanOperation string
	Starts string
	OutputRows string
	PlanLineID string
	PlanDepth string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		RequestID:"REQUEST_ID",  
		TraceID:"TRACE_ID",  
		FirstRefreshTime:"FIRST_REFRESH_TIME",  
		LastRefreshTime:"LAST_REFRESH_TIME",  
		FirstChangeTime:"FIRST_CHANGE_TIME",  
		LastChangeTime:"LAST_CHANGE_TIME",  
		Otherstat1ID:"OTHERSTAT_1_ID",  
		Otherstat1Value:"OTHERSTAT_1_VALUE",  
		Otherstat2ID:"OTHERSTAT_2_ID",  
		Otherstat2Value:"OTHERSTAT_2_VALUE",  
		Otherstat3ID:"OTHERSTAT_3_ID",  
		Otherstat3Value:"OTHERSTAT_3_VALUE",  
		Otherstat4ID:"OTHERSTAT_4_ID",  
		Otherstat4Value:"OTHERSTAT_4_VALUE",  
		Otherstat5ID:"OTHERSTAT_5_ID",  
		Otherstat5Value:"OTHERSTAT_5_VALUE",  
		Otherstat6ID:"OTHERSTAT_6_ID",  
		Otherstat6Value:"OTHERSTAT_6_VALUE",  
		Otherstat7ID:"OTHERSTAT_7_ID",  
		Otherstat7Value:"OTHERSTAT_7_VALUE",  
		Otherstat8ID:"OTHERSTAT_8_ID",  
		Otherstat8Value:"OTHERSTAT_8_VALUE",  
		Otherstat9ID:"OTHERSTAT_9_ID",  
		Otherstat9Value:"OTHERSTAT_9_VALUE",  
		Otherstat10ID:"OTHERSTAT_10_ID",  
		Otherstat10Value:"OTHERSTAT_10_VALUE",  
		ThreadID:"THREAD_ID",  
		PlanOperation:"PLAN_OPERATION",  
		Starts:"STARTS",  
		OutputRows:"OUTPUT_ROWS",  
		PlanLineID:"PLAN_LINE_ID",  
		PlanDepth:"PLAN_DEPTH",             
	}
	
// AllVirtualSQLPlanStatistics [...]		
type	AllVirtualSQLPlanStatistics	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
PlanID	int64	`gorm:"primaryKey;column:plan_id" json:"-"`			
OperationID	int64	`gorm:"primaryKey;column:operation_id" json:"-"`			
Executions	int64	`gorm:"column:executions" json:"executions"`			
OutputRows	int64	`gorm:"column:output_rows" json:"output_rows"`			
InputRows	int64	`gorm:"column:input_rows" json:"input_rows"`			
RescanTimes	int64	`gorm:"column:rescan_times" json:"rescan_times"`			
BufferGets	int64	`gorm:"column:buffer_gets" json:"buffer_gets"`			
DiskReads	int64	`gorm:"column:disk_reads" json:"disk_reads"`			
DiskWrites	int64	`gorm:"column:disk_writes" json:"disk_writes"`			
ElapsedTime	int64	`gorm:"column:elapsed_time" json:"elapsed_time"`			
ExtendInfo1	string	`gorm:"column:extend_info1" json:"extend_info1"`			
ExtendInfo2	string	`gorm:"column:extend_info2" json:"extend_info2"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSQLPlanStatistics) TableName() string {
	return "__all_virtual_sql_plan_statistics"
}
	

// AllVirtualSQLPlanStatisticsColumns get sql column name.获取数据库列名
var AllVirtualSQLPlanStatisticsColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	PlanID string
	OperationID string
	Executions string
	OutputRows string
	InputRows string
	RescanTimes string
	BufferGets string
	DiskReads string
	DiskWrites string
	ElapsedTime string
	ExtendInfo1 string
	ExtendInfo2 string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		PlanID:"plan_id",  
		OperationID:"operation_id",  
		Executions:"executions",  
		OutputRows:"output_rows",  
		InputRows:"input_rows",  
		RescanTimes:"rescan_times",  
		BufferGets:"buffer_gets",  
		DiskReads:"disk_reads",  
		DiskWrites:"disk_writes",  
		ElapsedTime:"elapsed_time",  
		ExtendInfo1:"extend_info1",  
		ExtendInfo2:"extend_info2",             
	}
	
// AllVirtualSQLWorkareaActive [...]		
type	AllVirtualSQLWorkareaActive	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
PlanID	int64	`gorm:"column:plan_id" json:"plan_id"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
SQLExecID	int64	`gorm:"column:sql_exec_id" json:"sql_exec_id"`			
OperationType	string	`gorm:"column:operation_type" json:"operation_type"`			
OperationID	int64	`gorm:"column:operation_id" json:"operation_id"`			
Sid	int64	`gorm:"column:sid" json:"sid"`			
ActiveTime	int64	`gorm:"column:active_time" json:"active_time"`			
WorkAreaSize	int64	`gorm:"column:work_area_size" json:"work_area_size"`			
ExpectSize	int64	`gorm:"column:expect_size" json:"expect_size"`			
ActualMemUsed	int64	`gorm:"column:actual_mem_used" json:"actual_mem_used"`			
MaxMemUsed	int64	`gorm:"column:max_mem_used" json:"max_mem_used"`			
NumberPasses	int64	`gorm:"column:number_passes" json:"number_passes"`			
TempsegSize	int64	`gorm:"column:tempseg_size" json:"tempseg_size"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Policy	string	`gorm:"column:policy" json:"policy"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSQLWorkareaActive) TableName() string {
	return "__all_virtual_sql_workarea_active"
}
	

// AllVirtualSQLWorkareaActiveColumns get sql column name.获取数据库列名
var AllVirtualSQLWorkareaActiveColumns = struct { 
	SvrIP string
	SvrPort string
	PlanID string
	SQLID string
	SQLExecID string
	OperationType string
	OperationID string
	Sid string
	ActiveTime string
	WorkAreaSize string
	ExpectSize string
	ActualMemUsed string
	MaxMemUsed string
	NumberPasses string
	TempsegSize string
	TenantID string
	Policy string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		PlanID:"plan_id",  
		SQLID:"sql_id",  
		SQLExecID:"sql_exec_id",  
		OperationType:"operation_type",  
		OperationID:"operation_id",  
		Sid:"sid",  
		ActiveTime:"active_time",  
		WorkAreaSize:"work_area_size",  
		ExpectSize:"expect_size",  
		ActualMemUsed:"actual_mem_used",  
		MaxMemUsed:"max_mem_used",  
		NumberPasses:"number_passes",  
		TempsegSize:"tempseg_size",  
		TenantID:"tenant_id",  
		Policy:"policy",             
	}
	
// AllVirtualSQLWorkareaHistogram [...]		
type	AllVirtualSQLWorkareaHistogram	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
LowOptimalSize	int64	`gorm:"column:low_optimal_size" json:"low_optimal_size"`			
HighOptimalSize	int64	`gorm:"column:high_optimal_size" json:"high_optimal_size"`			
OptimalExecutions	int64	`gorm:"column:optimal_executions" json:"optimal_executions"`			
OnepassExecutions	int64	`gorm:"column:onepass_executions" json:"onepass_executions"`			
MultipassesExecutions	int64	`gorm:"column:multipasses_executions" json:"multipasses_executions"`			
TotalExecutions	int64	`gorm:"column:total_executions" json:"total_executions"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSQLWorkareaHistogram) TableName() string {
	return "__all_virtual_sql_workarea_histogram"
}
	

// AllVirtualSQLWorkareaHistogramColumns get sql column name.获取数据库列名
var AllVirtualSQLWorkareaHistogramColumns = struct { 
	SvrIP string
	SvrPort string
	LowOptimalSize string
	HighOptimalSize string
	OptimalExecutions string
	OnepassExecutions string
	MultipassesExecutions string
	TotalExecutions string
	TenantID string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		LowOptimalSize:"low_optimal_size",  
		HighOptimalSize:"high_optimal_size",  
		OptimalExecutions:"optimal_executions",  
		OnepassExecutions:"onepass_executions",  
		MultipassesExecutions:"multipasses_executions",  
		TotalExecutions:"total_executions",  
		TenantID:"tenant_id",             
	}
	
// AllVirtualSQLWorkareaHistoryStat [...]		
type	AllVirtualSQLWorkareaHistoryStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
PlanID	int64	`gorm:"column:plan_id" json:"plan_id"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
OperationType	string	`gorm:"column:operation_type" json:"operation_type"`			
OperationID	int64	`gorm:"column:operation_id" json:"operation_id"`			
EstimatedOptimalSize	int64	`gorm:"column:estimated_optimal_size" json:"estimated_optimal_size"`			
EstimatedOnepassSize	int64	`gorm:"column:estimated_onepass_size" json:"estimated_onepass_size"`			
LastMemoryUsed	int64	`gorm:"column:last_memory_used" json:"last_memory_used"`			
LastExecution	string	`gorm:"column:last_execution" json:"last_execution"`			
LastDegree	int64	`gorm:"column:last_degree" json:"last_degree"`			
TotalExecutions	int64	`gorm:"column:total_executions" json:"total_executions"`			
OptimalExecutions	int64	`gorm:"column:optimal_executions" json:"optimal_executions"`			
OnepassExecutions	int64	`gorm:"column:onepass_executions" json:"onepass_executions"`			
MultipassesExecutions	int64	`gorm:"column:multipasses_executions" json:"multipasses_executions"`			
ActiveTime	int64	`gorm:"column:active_time" json:"active_time"`			
MaxTempsegSize	int64	`gorm:"column:max_tempseg_size" json:"max_tempseg_size"`			
LastTempsegSize	int64	`gorm:"column:last_tempseg_size" json:"last_tempseg_size"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Policy	string	`gorm:"column:policy" json:"policy"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSQLWorkareaHistoryStat) TableName() string {
	return "__all_virtual_sql_workarea_history_stat"
}
	

// AllVirtualSQLWorkareaHistoryStatColumns get sql column name.获取数据库列名
var AllVirtualSQLWorkareaHistoryStatColumns = struct { 
	SvrIP string
	SvrPort string
	PlanID string
	SQLID string
	OperationType string
	OperationID string
	EstimatedOptimalSize string
	EstimatedOnepassSize string
	LastMemoryUsed string
	LastExecution string
	LastDegree string
	TotalExecutions string
	OptimalExecutions string
	OnepassExecutions string
	MultipassesExecutions string
	ActiveTime string
	MaxTempsegSize string
	LastTempsegSize string
	TenantID string
	Policy string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		PlanID:"plan_id",  
		SQLID:"sql_id",  
		OperationType:"operation_type",  
		OperationID:"operation_id",  
		EstimatedOptimalSize:"estimated_optimal_size",  
		EstimatedOnepassSize:"estimated_onepass_size",  
		LastMemoryUsed:"last_memory_used",  
		LastExecution:"last_execution",  
		LastDegree:"last_degree",  
		TotalExecutions:"total_executions",  
		OptimalExecutions:"optimal_executions",  
		OnepassExecutions:"onepass_executions",  
		MultipassesExecutions:"multipasses_executions",  
		ActiveTime:"active_time",  
		MaxTempsegSize:"max_tempseg_size",  
		LastTempsegSize:"last_tempseg_size",  
		TenantID:"tenant_id",  
		Policy:"policy",             
	}
	
// AllVirtualSQLWorkareaMemoryInfo [...]		
type	AllVirtualSQLWorkareaMemoryInfo	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
MaxWorkareaSize	int64	`gorm:"column:max_workarea_size" json:"max_workarea_size"`			
WorkareaHoldSize	int64	`gorm:"column:workarea_hold_size" json:"workarea_hold_size"`			
MaxAutoWorkareaSize	int64	`gorm:"column:max_auto_workarea_size" json:"max_auto_workarea_size"`			
MemTarget	int64	`gorm:"column:mem_target" json:"mem_target"`			
TotalMemUsed	int64	`gorm:"column:total_mem_used" json:"total_mem_used"`			
GlobalMemBound	int64	`gorm:"column:global_mem_bound" json:"global_mem_bound"`			
DriftSize	int64	`gorm:"column:drift_size" json:"drift_size"`			
WorkareaCount	int64	`gorm:"column:workarea_count" json:"workarea_count"`			
ManualCalcCount	int64	`gorm:"column:manual_calc_count" json:"manual_calc_count"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSQLWorkareaMemoryInfo) TableName() string {
	return "__all_virtual_sql_workarea_memory_info"
}
	

// AllVirtualSQLWorkareaMemoryInfoColumns get sql column name.获取数据库列名
var AllVirtualSQLWorkareaMemoryInfoColumns = struct { 
	SvrIP string
	SvrPort string
	MaxWorkareaSize string
	WorkareaHoldSize string
	MaxAutoWorkareaSize string
	MemTarget string
	TotalMemUsed string
	GlobalMemBound string
	DriftSize string
	WorkareaCount string
	ManualCalcCount string
	TenantID string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		MaxWorkareaSize:"max_workarea_size",  
		WorkareaHoldSize:"workarea_hold_size",  
		MaxAutoWorkareaSize:"max_auto_workarea_size",  
		MemTarget:"mem_target",  
		TotalMemUsed:"total_mem_used",  
		GlobalMemBound:"global_mem_bound",  
		DriftSize:"drift_size",  
		WorkareaCount:"workarea_count",  
		ManualCalcCount:"manual_calc_count",  
		TenantID:"tenant_id",             
	}
	
// AllVirtualSstableColumnChecksum [...]		
type	AllVirtualSstableColumnChecksum	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
DataTableID	int64	`gorm:"primaryKey;column:data_table_id" json:"-"`			
IndexID	int64	`gorm:"primaryKey;column:index_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SstableType	int64	`gorm:"primaryKey;column:sstable_type" json:"-"`			
ColumnID	int64	`gorm:"primaryKey;column:column_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ColumnChecksum	int64	`gorm:"column:column_checksum" json:"column_checksum"`			
ChecksumMethod	int64	`gorm:"column:checksum_method" json:"checksum_method"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
MajorVersion	int64	`gorm:"column:major_version" json:"major_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSstableColumnChecksum) TableName() string {
	return "__all_virtual_sstable_column_checksum"
}
	

// AllVirtualSstableColumnChecksumColumns get sql column name.获取数据库列名
var AllVirtualSstableColumnChecksumColumns = struct { 
	TenantID string
	DataTableID string
	IndexID string
	PartitionID string
	SstableType string
	ColumnID string
	SvrIP string
	SvrPort string
	GmtCreate string
	GmtModified string
	ColumnChecksum string
	ChecksumMethod string
	SnapshotVersion string
	ReplicaType string
	MajorVersion string    
	}{ 
		TenantID:"tenant_id",  
		DataTableID:"data_table_id",  
		IndexID:"index_id",  
		PartitionID:"partition_id",  
		SstableType:"sstable_type",  
		ColumnID:"column_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ColumnChecksum:"column_checksum",  
		ChecksumMethod:"checksum_method",  
		SnapshotVersion:"snapshot_version",  
		ReplicaType:"replica_type",  
		MajorVersion:"major_version",             
	}
	
// AllVirtualStorageStat [...]		
type	AllVirtualStorageStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
MajorVersion	int64	`gorm:"column:major_version" json:"major_version"`			
MinorVersion	int64	`gorm:"column:minor_version" json:"minor_version"`			
SstableID	int64	`gorm:"column:sstable_id" json:"sstable_id"`			
Role	int64	`gorm:"column:role" json:"role"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
MacroBlocks	string	`gorm:"column:macro_blocks" json:"macro_blocks"`			
OccupySize	int64	`gorm:"column:occupy_size" json:"occupy_size"`			
UsedSize	int64	`gorm:"column:used_size" json:"used_size"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
StoreType	int64	`gorm:"column:store_type" json:"store_type"`			
ProgressiveMergeStartVersion	int64	`gorm:"column:progressive_merge_start_version" json:"progressive_merge_start_version"`			
ProgressiveMergeEndVersion	int64	`gorm:"column:progressive_merge_end_version" json:"progressive_merge_end_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualStorageStat) TableName() string {
	return "__all_virtual_storage_stat"
}
	

// AllVirtualStorageStatColumns get sql column name.获取数据库列名
var AllVirtualStorageStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	TableID string
	PartitionCnt string
	PartitionID string
	MajorVersion string
	MinorVersion string
	SstableID string
	Role string
	DataChecksum string
	ColumnChecksum string
	MacroBlocks string
	OccupySize string
	UsedSize string
	RowCount string
	StoreType string
	ProgressiveMergeStartVersion string
	ProgressiveMergeEndVersion string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TableID:"table_id",  
		PartitionCnt:"partition_cnt",  
		PartitionID:"partition_id",  
		MajorVersion:"major_version",  
		MinorVersion:"minor_version",  
		SstableID:"sstable_id",  
		Role:"role",  
		DataChecksum:"data_checksum",  
		ColumnChecksum:"column_checksum",  
		MacroBlocks:"macro_blocks",  
		OccupySize:"occupy_size",  
		UsedSize:"used_size",  
		RowCount:"row_count",  
		StoreType:"store_type",  
		ProgressiveMergeStartVersion:"progressive_merge_start_version",  
		ProgressiveMergeEndVersion:"progressive_merge_end_version",             
	}
	
// AllVirtualSubPart [...]		
type	AllVirtualSubPart	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
SubPartID	int64	`gorm:"primaryKey;column:sub_part_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SubPartName	string	`gorm:"column:sub_part_name" json:"sub_part_name"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
SubPartIDx	int64	`gorm:"column:sub_part_idx" json:"sub_part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgSubPartID	int64	`gorm:"column:mapping_pg_sub_part_id" json:"mapping_pg_sub_part_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSubPart) TableName() string {
	return "__all_virtual_sub_part"
}
	

// AllVirtualSubPartColumns get sql column name.获取数据库列名
var AllVirtualSubPartColumns = struct { 
	TenantID string
	TableID string
	PartID string
	SubPartID string
	GmtCreate string
	GmtModified string
	SubPartName string
	SchemaVersion string
	HighBoundVal string
	BHighBoundVal string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Status string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	TablespaceID string
	SubPartIDx string
	SourcePartitionID string
	MappingPgSubPartID string
	DropSchemaVersion string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartID:"part_id",  
		SubPartID:"sub_part_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SubPartName:"sub_part_name",  
		SchemaVersion:"schema_version",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Status:"status",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		TablespaceID:"tablespace_id",  
		SubPartIDx:"sub_part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgSubPartID:"mapping_pg_sub_part_id",  
		DropSchemaVersion:"drop_schema_version",             
	}
	
// AllVirtualSubPartHistory [...]		
type	AllVirtualSubPartHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartID	int64	`gorm:"primaryKey;column:part_id" json:"-"`			
SubPartID	int64	`gorm:"primaryKey;column:sub_part_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
SubPartName	string	`gorm:"column:sub_part_name" json:"sub_part_name"`			
HighBoundVal	string	`gorm:"column:high_bound_val" json:"high_bound_val"`			
BHighBoundVal	string	`gorm:"column:b_high_bound_val" json:"b_high_bound_val"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
Status	int64	`gorm:"column:status" json:"status"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	string	`gorm:"column:spare3" json:"spare3"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ListVal	string	`gorm:"column:list_val" json:"list_val"`			
BListVal	string	`gorm:"column:b_list_val" json:"b_list_val"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
SubPartIDx	int64	`gorm:"column:sub_part_idx" json:"sub_part_idx"`			
SourcePartitionID	string	`gorm:"column:source_partition_id" json:"source_partition_id"`			
MappingPgSubPartID	int64	`gorm:"column:mapping_pg_sub_part_id" json:"mapping_pg_sub_part_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSubPartHistory) TableName() string {
	return "__all_virtual_sub_part_history"
}
	

// AllVirtualSubPartHistoryColumns get sql column name.获取数据库列名
var AllVirtualSubPartHistoryColumns = struct { 
	TenantID string
	TableID string
	PartID string
	SubPartID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	SubPartName string
	HighBoundVal string
	BHighBoundVal string
	BlockSize string
	ReplicaNum string
	CompressFuncName string
	Status string
	Spare1 string
	Spare2 string
	Spare3 string
	Comment string
	ListVal string
	BListVal string
	TablespaceID string
	SubPartIDx string
	SourcePartitionID string
	MappingPgSubPartID string
	DropSchemaVersion string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartID:"part_id",  
		SubPartID:"sub_part_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		SubPartName:"sub_part_name",  
		HighBoundVal:"high_bound_val",  
		BHighBoundVal:"b_high_bound_val",  
		BlockSize:"block_size",  
		ReplicaNum:"replica_num",  
		CompressFuncName:"compress_func_name",  
		Status:"status",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Comment:"comment",  
		ListVal:"list_val",  
		BListVal:"b_list_val",  
		TablespaceID:"tablespace_id",  
		SubPartIDx:"sub_part_idx",  
		SourcePartitionID:"source_partition_id",  
		MappingPgSubPartID:"mapping_pg_sub_part_id",  
		DropSchemaVersion:"drop_schema_version",             
	}
	
// AllVirtualSynonym [...]		
type	AllVirtualSynonym	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SynonymID	int64	`gorm:"primaryKey;column:synonym_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
SynonymName	string	`gorm:"column:synonym_name" json:"synonym_name"`			
ObjectName	string	`gorm:"column:object_name" json:"object_name"`			
ObjectDatabaseID	int64	`gorm:"column:object_database_id" json:"object_database_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSynonym) TableName() string {
	return "__all_virtual_synonym"
}
	

// AllVirtualSynonymColumns get sql column name.获取数据库列名
var AllVirtualSynonymColumns = struct { 
	TenantID string
	SynonymID string
	GmtCreate string
	GmtModified string
	DatabaseID string
	SchemaVersion string
	SynonymName string
	ObjectName string
	ObjectDatabaseID string    
	}{ 
		TenantID:"tenant_id",  
		SynonymID:"synonym_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		SynonymName:"synonym_name",  
		ObjectName:"object_name",  
		ObjectDatabaseID:"object_database_id",             
	}
	
// AllVirtualSynonymHistory [...]		
type	AllVirtualSynonymHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SynonymID	int64	`gorm:"primaryKey;column:synonym_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SynonymName	string	`gorm:"column:synonym_name" json:"synonym_name"`			
ObjectName	string	`gorm:"column:object_name" json:"object_name"`			
ObjectDatabaseID	int64	`gorm:"column:object_database_id" json:"object_database_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSynonymHistory) TableName() string {
	return "__all_virtual_synonym_history"
}
	

// AllVirtualSynonymHistoryColumns get sql column name.获取数据库列名
var AllVirtualSynonymHistoryColumns = struct { 
	TenantID string
	SynonymID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DatabaseID string
	SynonymName string
	ObjectName string
	ObjectDatabaseID string    
	}{ 
		TenantID:"tenant_id",  
		SynonymID:"synonym_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		SynonymName:"synonym_name",  
		ObjectName:"object_name",  
		ObjectDatabaseID:"object_database_id",             
	}
	
// AllVirtualSysParameterStat [...]		
type	AllVirtualSysParameterStat	struct {		
Zone	string	`gorm:"column:zone" json:"zone"`			
SvrType	string	`gorm:"column:svr_type" json:"svr_type"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Name	string	`gorm:"column:name" json:"name"`			
DataType	string	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
ValueStrict	string	`gorm:"column:value_strict" json:"value_strict"`			
Info	string	`gorm:"column:info" json:"info"`			
NeedReboot	int64	`gorm:"column:need_reboot" json:"need_reboot"`			
Section	string	`gorm:"column:section" json:"section"`			
VisibleLevel	string	`gorm:"column:visible_level" json:"visible_level"`			
Scope	string	`gorm:"column:scope" json:"scope"`			
Source	string	`gorm:"column:source" json:"source"`			
EditLevel	string	`gorm:"column:edit_level" json:"edit_level"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSysParameterStat) TableName() string {
	return "__all_virtual_sys_parameter_stat"
}
	

// AllVirtualSysParameterStatColumns get sql column name.获取数据库列名
var AllVirtualSysParameterStatColumns = struct { 
	Zone string
	SvrType string
	SvrIP string
	SvrPort string
	Name string
	DataType string
	Value string
	ValueStrict string
	Info string
	NeedReboot string
	Section string
	VisibleLevel string
	Scope string
	Source string
	EditLevel string    
	}{ 
		Zone:"zone",  
		SvrType:"svr_type",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Name:"name",  
		DataType:"data_type",  
		Value:"value",  
		ValueStrict:"value_strict",  
		Info:"info",  
		NeedReboot:"need_reboot",  
		Section:"section",  
		VisibleLevel:"visible_level",  
		Scope:"scope",  
		Source:"source",  
		EditLevel:"edit_level",             
	}
	
// AllVirtualSysStat [...]		
type	AllVirtualSysStat	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSysStat) TableName() string {
	return "__all_virtual_sys_stat"
}
	

// AllVirtualSysStatColumns get sql column name.获取数据库列名
var AllVirtualSysStatColumns = struct { 
	TenantID string
	Zone string
	Name string
	GmtCreate string
	GmtModified string
	DataType string
	Value string
	Info string    
	}{ 
		TenantID:"tenant_id",  
		Zone:"zone",  
		Name:"name",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",             
	}
	
// AllVirtualSysTaskStatus [...]		
type	AllVirtualSysTaskStatus	struct {		
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
TaskType	string	`gorm:"column:task_type" json:"task_type"`			
TaskID	string	`gorm:"column:task_id" json:"task_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
IsCancel	int64	`gorm:"column:is_cancel" json:"is_cancel"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSysTaskStatus) TableName() string {
	return "__all_virtual_sys_task_status"
}
	

// AllVirtualSysTaskStatusColumns get sql column name.获取数据库列名
var AllVirtualSysTaskStatusColumns = struct { 
	StartTime string
	TaskType string
	TaskID string
	SvrIP string
	SvrPort string
	TenantID string
	Comment string
	IsCancel string    
	}{ 
		StartTime:"start_time",  
		TaskType:"task_type",  
		TaskID:"task_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		Comment:"comment",  
		IsCancel:"is_cancel",             
	}
	
// AllVirtualSysVariable [...]		
type	AllVirtualSysVariable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
Flags	int64	`gorm:"column:flags" json:"flags"`			
MinVal	string	`gorm:"column:min_val" json:"min_val"`			
MaxVal	string	`gorm:"column:max_val" json:"max_val"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSysVariable) TableName() string {
	return "__all_virtual_sys_variable"
}
	

// AllVirtualSysVariableColumns get sql column name.获取数据库列名
var AllVirtualSysVariableColumns = struct { 
	TenantID string
	Zone string
	Name string
	GmtCreate string
	GmtModified string
	DataType string
	Value string
	Info string
	Flags string
	MinVal string
	MaxVal string    
	}{ 
		TenantID:"tenant_id",  
		Zone:"zone",  
		Name:"name",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",  
		Flags:"flags",  
		MinVal:"min_val",  
		MaxVal:"max_val",             
	}
	
// AllVirtualSysVariableHistory [...]		
type	AllVirtualSysVariableHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DataType	int64	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
Flags	int64	`gorm:"column:flags" json:"flags"`			
MinVal	string	`gorm:"column:min_val" json:"min_val"`			
MaxVal	string	`gorm:"column:max_val" json:"max_val"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSysVariableHistory) TableName() string {
	return "__all_virtual_sys_variable_history"
}
	

// AllVirtualSysVariableHistoryColumns get sql column name.获取数据库列名
var AllVirtualSysVariableHistoryColumns = struct { 
	TenantID string
	Zone string
	Name string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DataType string
	Value string
	Info string
	Flags string
	MinVal string
	MaxVal string    
	}{ 
		TenantID:"tenant_id",  
		Zone:"zone",  
		Name:"name",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",  
		Flags:"flags",  
		MinVal:"min_val",  
		MaxVal:"max_val",             
	}
	
// AllVirtualSysauth [...]		
type	AllVirtualSysauth	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
PrivID	int64	`gorm:"primaryKey;column:priv_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
PrivOption	int64	`gorm:"column:priv_option" json:"priv_option"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSysauth) TableName() string {
	return "__all_virtual_sysauth"
}
	

// AllVirtualSysauthColumns get sql column name.获取数据库列名
var AllVirtualSysauthColumns = struct { 
	TenantID string
	GranteeID string
	PrivID string
	GmtCreate string
	GmtModified string
	PrivOption string    
	}{ 
		TenantID:"tenant_id",  
		GranteeID:"grantee_id",  
		PrivID:"priv_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		PrivOption:"priv_option",             
	}
	
// AllVirtualSysauthHistory [...]		
type	AllVirtualSysauthHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
PrivID	int64	`gorm:"primaryKey;column:priv_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PrivOption	int64	`gorm:"column:priv_option" json:"priv_option"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSysauthHistory) TableName() string {
	return "__all_virtual_sysauth_history"
}
	

// AllVirtualSysauthHistoryColumns get sql column name.获取数据库列名
var AllVirtualSysauthHistoryColumns = struct { 
	TenantID string
	GranteeID string
	PrivID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	PrivOption string    
	}{ 
		TenantID:"tenant_id",  
		GranteeID:"grantee_id",  
		PrivID:"priv_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		PrivOption:"priv_option",             
	}
	
// AllVirtualSysstat [...]		
type	AllVirtualSysstat	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Statistic#	int64	`gorm:"primaryKey;column:statistic#" json:"-"`			
Value	int64	`gorm:"column:value" json:"value"`			
StatID	int64	`gorm:"column:stat_id" json:"stat_id"`			
Name	string	`gorm:"column:name" json:"name"`			
Class	int64	`gorm:"column:class" json:"class"`			
CanVisible	int8	`gorm:"column:can_visible" json:"can_visible"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSysstat) TableName() string {
	return "__all_virtual_sysstat"
}
	

// AllVirtualSysstatColumns get sql column name.获取数据库列名
var AllVirtualSysstatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	Statistic# string
	Value string
	StatID string
	Name string
	Class string
	CanVisible string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Statistic#:"statistic#",  
		Value:"value",  
		StatID:"stat_id",  
		Name:"name",  
		Class:"class",  
		CanVisible:"can_visible",             
	}
	
// AllVirtualSystemEvent [...]		
type	AllVirtualSystemEvent	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
EventID	int64	`gorm:"primaryKey;column:event_id" json:"-"`			
Event	string	`gorm:"column:event" json:"event"`			
WaitClassID	int64	`gorm:"column:wait_class_id" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:wait_class#" json:"wait_class#"`			
WaitClass	string	`gorm:"column:wait_class" json:"wait_class"`			
TotalWaits	int64	`gorm:"column:total_waits" json:"total_waits"`			
TotalTimeouts	int64	`gorm:"column:total_timeouts" json:"total_timeouts"`			
TimeWaited	float64	`gorm:"column:time_waited" json:"time_waited"`			
MaxWait	float64	`gorm:"column:max_wait" json:"max_wait"`			
AverageWait	float64	`gorm:"column:average_wait" json:"average_wait"`			
TimeWaitedMicro	int64	`gorm:"column:time_waited_micro" json:"time_waited_micro"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualSystemEvent) TableName() string {
	return "__all_virtual_system_event"
}
	

// AllVirtualSystemEventColumns get sql column name.获取数据库列名
var AllVirtualSystemEventColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	EventID string
	Event string
	WaitClassID string
	WaitClass# string
	WaitClass string
	TotalWaits string
	TotalTimeouts string
	TimeWaited string
	MaxWait string
	AverageWait string
	TimeWaitedMicro string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		EventID:"event_id",  
		Event:"event",  
		WaitClassID:"wait_class_id",  
		WaitClass#:"wait_class#",  
		WaitClass:"wait_class",  
		TotalWaits:"total_waits",  
		TotalTimeouts:"total_timeouts",  
		TimeWaited:"time_waited",  
		MaxWait:"max_wait",  
		AverageWait:"average_wait",  
		TimeWaitedMicro:"time_waited_micro",             
	}
	
// AllVirtualTable [...]		
type	AllVirtualTable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
LoadType	int64	`gorm:"column:load_type" json:"load_type"`			
DefType	int64	`gorm:"column:def_type" json:"def_type"`			
RowkeyColumnNum	int64	`gorm:"column:rowkey_column_num" json:"rowkey_column_num"`			
IndexColumnNum	int64	`gorm:"column:index_column_num" json:"index_column_num"`			
MaxUsedColumnID	int64	`gorm:"column:max_used_column_id" json:"max_used_column_id"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
AutoincColumnID	int64	`gorm:"column:autoinc_column_id" json:"autoinc_column_id"`			
AutoIncrement	uint64	`gorm:"column:auto_increment" json:"auto_increment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
RowkeySplitPos	int64	`gorm:"column:rowkey_split_pos" json:"rowkey_split_pos"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
ExpireCondition	string	`gorm:"column:expire_condition" json:"expire_condition"`			
IsUseBloomfilter	int64	`gorm:"column:is_use_bloomfilter" json:"is_use_bloomfilter"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
DataTableID	int64	`gorm:"column:data_table_id" json:"data_table_id"`			
IndexStatus	int64	`gorm:"column:index_status" json:"index_status"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
ProgressiveMergeNum	int64	`gorm:"column:progressive_merge_num" json:"progressive_merge_num"`			
IndexType	int64	`gorm:"column:index_type" json:"index_type"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExpr	string	`gorm:"column:part_func_expr" json:"part_func_expr"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExpr	string	`gorm:"column:sub_part_func_expr" json:"sub_part_func_expr"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
CreateMemVersion	int64	`gorm:"column:create_mem_version" json:"create_mem_version"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ViewDefinition	string	`gorm:"column:view_definition" json:"view_definition"`			
ViewCheckOption	int64	`gorm:"column:view_check_option" json:"view_check_option"`			
ViewIsUpdatable	int64	`gorm:"column:view_is_updatable" json:"view_is_updatable"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
IndexUsingType	int64	`gorm:"column:index_using_type" json:"index_using_type"`			
ParserName	string	`gorm:"column:parser_name" json:"parser_name"`			
IndexAttributesSet	int64	`gorm:"column:index_attributes_set" json:"index_attributes_set"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
TabletSize	int64	`gorm:"column:tablet_size" json:"tablet_size"`			
Pctfree	int64	`gorm:"column:pctfree" json:"pctfree"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
PartitionCntWithinPartitionTable	int64	`gorm:"column:partition_cnt_within_partition_table" json:"partition_cnt_within_partition_table"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
MaxUsedConstraintID	int64	`gorm:"column:max_used_constraint_id" json:"max_used_constraint_id"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
PkComment	string	`gorm:"column:pk_comment" json:"pk_comment"`			
SessActiveTime	int64	`gorm:"column:sess_active_time" json:"sess_active_time"`			
RowStoreType	string	`gorm:"column:row_store_type" json:"row_store_type"`			
StoreFormat	string	`gorm:"column:store_format" json:"store_format"`			
DuplicateScope	int64	`gorm:"column:duplicate_scope" json:"duplicate_scope"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
ProgressiveMergeRound	int64	`gorm:"column:progressive_merge_round" json:"progressive_merge_round"`			
StorageFormatVersion	int64	`gorm:"column:storage_format_version" json:"storage_format_version"`			
TableMode	int64	`gorm:"column:table_mode" json:"table_mode"`			
Encryption	string	`gorm:"column:encryption" json:"encryption"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
Dop	int64	`gorm:"column:dop" json:"dop"`			
CharacterSetClient	int64	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	int64	`gorm:"column:collation_connection" json:"collation_connection"`			
AutoPartSize	int64	`gorm:"column:auto_part_size" json:"auto_part_size"`			
AutoPart	int8	`gorm:"column:auto_part" json:"auto_part"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTable) TableName() string {
	return "__all_virtual_table"
}
	

// AllVirtualTableColumns get sql column name.获取数据库列名
var AllVirtualTableColumns = struct { 
	TenantID string
	TableID string
	GmtCreate string
	GmtModified string
	TableName string
	DatabaseID string
	TableType string
	LoadType string
	DefType string
	RowkeyColumnNum string
	IndexColumnNum string
	MaxUsedColumnID string
	ReplicaNum string
	AutoincColumnID string
	AutoIncrement string
	ReadOnly string
	RowkeySplitPos string
	CompressFuncName string
	ExpireCondition string
	IsUseBloomfilter string
	Comment string
	BlockSize string
	CollationType string
	DataTableID string
	IndexStatus string
	TablegroupID string
	ProgressiveMergeNum string
	IndexType string
	PartLevel string
	PartFuncType string
	PartFuncExpr string
	PartNum string
	SubPartFuncType string
	SubPartFuncExpr string
	SubPartNum string
	CreateMemVersion string
	SchemaVersion string
	ViewDefinition string
	ViewCheckOption string
	ViewIsUpdatable string
	ZoneList string
	PrimaryZone string
	IndexUsingType string
	ParserName string
	IndexAttributesSet string
	Locality string
	TabletSize string
	Pctfree string
	PreviousLocality string
	MaxUsedPartID string
	PartitionCntWithinPartitionTable string
	PartitionStatus string
	PartitionSchemaVersion string
	MaxUsedConstraintID string
	SessionID string
	PkComment string
	SessActiveTime string
	RowStoreType string
	StoreFormat string
	DuplicateScope string
	Binding string
	ProgressiveMergeRound string
	StorageFormatVersion string
	TableMode string
	Encryption string
	TablespaceID string
	DropSchemaVersion string
	IsSubPartTemplate string
	Dop string
	CharacterSetClient string
	CollationConnection string
	AutoPartSize string
	AutoPart string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TableName:"table_name",  
		DatabaseID:"database_id",  
		TableType:"table_type",  
		LoadType:"load_type",  
		DefType:"def_type",  
		RowkeyColumnNum:"rowkey_column_num",  
		IndexColumnNum:"index_column_num",  
		MaxUsedColumnID:"max_used_column_id",  
		ReplicaNum:"replica_num",  
		AutoincColumnID:"autoinc_column_id",  
		AutoIncrement:"auto_increment",  
		ReadOnly:"read_only",  
		RowkeySplitPos:"rowkey_split_pos",  
		CompressFuncName:"compress_func_name",  
		ExpireCondition:"expire_condition",  
		IsUseBloomfilter:"is_use_bloomfilter",  
		Comment:"comment",  
		BlockSize:"block_size",  
		CollationType:"collation_type",  
		DataTableID:"data_table_id",  
		IndexStatus:"index_status",  
		TablegroupID:"tablegroup_id",  
		ProgressiveMergeNum:"progressive_merge_num",  
		IndexType:"index_type",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExpr:"part_func_expr",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExpr:"sub_part_func_expr",  
		SubPartNum:"sub_part_num",  
		CreateMemVersion:"create_mem_version",  
		SchemaVersion:"schema_version",  
		ViewDefinition:"view_definition",  
		ViewCheckOption:"view_check_option",  
		ViewIsUpdatable:"view_is_updatable",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		IndexUsingType:"index_using_type",  
		ParserName:"parser_name",  
		IndexAttributesSet:"index_attributes_set",  
		Locality:"locality",  
		TabletSize:"tablet_size",  
		Pctfree:"pctfree",  
		PreviousLocality:"previous_locality",  
		MaxUsedPartID:"max_used_part_id",  
		PartitionCntWithinPartitionTable:"partition_cnt_within_partition_table",  
		PartitionStatus:"partition_status",  
		PartitionSchemaVersion:"partition_schema_version",  
		MaxUsedConstraintID:"max_used_constraint_id",  
		SessionID:"session_id",  
		PkComment:"pk_comment",  
		SessActiveTime:"sess_active_time",  
		RowStoreType:"row_store_type",  
		StoreFormat:"store_format",  
		DuplicateScope:"duplicate_scope",  
		Binding:"binding",  
		ProgressiveMergeRound:"progressive_merge_round",  
		StorageFormatVersion:"storage_format_version",  
		TableMode:"table_mode",  
		Encryption:"encryption",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",  
		Dop:"dop",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",  
		AutoPartSize:"auto_part_size",  
		AutoPart:"auto_part",             
	}
	
// AllVirtualTableHistory [...]		
type	AllVirtualTableHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
LoadType	int64	`gorm:"column:load_type" json:"load_type"`			
DefType	int64	`gorm:"column:def_type" json:"def_type"`			
RowkeyColumnNum	int64	`gorm:"column:rowkey_column_num" json:"rowkey_column_num"`			
IndexColumnNum	int64	`gorm:"column:index_column_num" json:"index_column_num"`			
MaxUsedColumnID	int64	`gorm:"column:max_used_column_id" json:"max_used_column_id"`			
ReplicaNum	int64	`gorm:"column:replica_num" json:"replica_num"`			
AutoincColumnID	int64	`gorm:"column:autoinc_column_id" json:"autoinc_column_id"`			
AutoIncrement	uint64	`gorm:"column:auto_increment" json:"auto_increment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
RowkeySplitPos	int64	`gorm:"column:rowkey_split_pos" json:"rowkey_split_pos"`			
CompressFuncName	string	`gorm:"column:compress_func_name" json:"compress_func_name"`			
ExpireCondition	string	`gorm:"column:expire_condition" json:"expire_condition"`			
IsUseBloomfilter	int64	`gorm:"column:is_use_bloomfilter" json:"is_use_bloomfilter"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
DataTableID	int64	`gorm:"column:data_table_id" json:"data_table_id"`			
IndexStatus	int64	`gorm:"column:index_status" json:"index_status"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
ProgressiveMergeNum	int64	`gorm:"column:progressive_merge_num" json:"progressive_merge_num"`			
IndexType	int64	`gorm:"column:index_type" json:"index_type"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExpr	string	`gorm:"column:part_func_expr" json:"part_func_expr"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExpr	string	`gorm:"column:sub_part_func_expr" json:"sub_part_func_expr"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
CreateMemVersion	int64	`gorm:"column:create_mem_version" json:"create_mem_version"`			
ViewDefinition	string	`gorm:"column:view_definition" json:"view_definition"`			
ViewCheckOption	int64	`gorm:"column:view_check_option" json:"view_check_option"`			
ViewIsUpdatable	int64	`gorm:"column:view_is_updatable" json:"view_is_updatable"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
IndexUsingType	int64	`gorm:"column:index_using_type" json:"index_using_type"`			
ParserName	string	`gorm:"column:parser_name" json:"parser_name"`			
IndexAttributesSet	int64	`gorm:"column:index_attributes_set" json:"index_attributes_set"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
TabletSize	int64	`gorm:"column:tablet_size" json:"tablet_size"`			
Pctfree	int64	`gorm:"column:pctfree" json:"pctfree"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
PartitionCntWithinPartitionTable	int64	`gorm:"column:partition_cnt_within_partition_table" json:"partition_cnt_within_partition_table"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
MaxUsedConstraintID	int64	`gorm:"column:max_used_constraint_id" json:"max_used_constraint_id"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
PkComment	string	`gorm:"column:pk_comment" json:"pk_comment"`			
SessActiveTime	int64	`gorm:"column:sess_active_time" json:"sess_active_time"`			
RowStoreType	string	`gorm:"column:row_store_type" json:"row_store_type"`			
StoreFormat	string	`gorm:"column:store_format" json:"store_format"`			
DuplicateScope	int64	`gorm:"column:duplicate_scope" json:"duplicate_scope"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
ProgressiveMergeRound	int64	`gorm:"column:progressive_merge_round" json:"progressive_merge_round"`			
StorageFormatVersion	int64	`gorm:"column:storage_format_version" json:"storage_format_version"`			
TableMode	int64	`gorm:"column:table_mode" json:"table_mode"`			
Encryption	string	`gorm:"column:encryption" json:"encryption"`			
TablespaceID	int64	`gorm:"column:tablespace_id" json:"tablespace_id"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
Dop	int64	`gorm:"column:dop" json:"dop"`			
CharacterSetClient	int64	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	int64	`gorm:"column:collation_connection" json:"collation_connection"`			
AutoPartSize	int64	`gorm:"column:auto_part_size" json:"auto_part_size"`			
AutoPart	int8	`gorm:"column:auto_part" json:"auto_part"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTableHistory) TableName() string {
	return "__all_virtual_table_history"
}
	

// AllVirtualTableHistoryColumns get sql column name.获取数据库列名
var AllVirtualTableHistoryColumns = struct { 
	TenantID string
	TableID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	TableName string
	DatabaseID string
	TableType string
	LoadType string
	DefType string
	RowkeyColumnNum string
	IndexColumnNum string
	MaxUsedColumnID string
	ReplicaNum string
	AutoincColumnID string
	AutoIncrement string
	ReadOnly string
	RowkeySplitPos string
	CompressFuncName string
	ExpireCondition string
	IsUseBloomfilter string
	Comment string
	BlockSize string
	CollationType string
	DataTableID string
	IndexStatus string
	TablegroupID string
	ProgressiveMergeNum string
	IndexType string
	PartLevel string
	PartFuncType string
	PartFuncExpr string
	PartNum string
	SubPartFuncType string
	SubPartFuncExpr string
	SubPartNum string
	CreateMemVersion string
	ViewDefinition string
	ViewCheckOption string
	ViewIsUpdatable string
	ZoneList string
	PrimaryZone string
	IndexUsingType string
	ParserName string
	IndexAttributesSet string
	Locality string
	TabletSize string
	Pctfree string
	PreviousLocality string
	MaxUsedPartID string
	PartitionCntWithinPartitionTable string
	PartitionStatus string
	PartitionSchemaVersion string
	MaxUsedConstraintID string
	SessionID string
	PkComment string
	SessActiveTime string
	RowStoreType string
	StoreFormat string
	DuplicateScope string
	Binding string
	ProgressiveMergeRound string
	StorageFormatVersion string
	TableMode string
	Encryption string
	TablespaceID string
	DropSchemaVersion string
	IsSubPartTemplate string
	Dop string
	CharacterSetClient string
	CollationConnection string
	AutoPartSize string
	AutoPart string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		TableName:"table_name",  
		DatabaseID:"database_id",  
		TableType:"table_type",  
		LoadType:"load_type",  
		DefType:"def_type",  
		RowkeyColumnNum:"rowkey_column_num",  
		IndexColumnNum:"index_column_num",  
		MaxUsedColumnID:"max_used_column_id",  
		ReplicaNum:"replica_num",  
		AutoincColumnID:"autoinc_column_id",  
		AutoIncrement:"auto_increment",  
		ReadOnly:"read_only",  
		RowkeySplitPos:"rowkey_split_pos",  
		CompressFuncName:"compress_func_name",  
		ExpireCondition:"expire_condition",  
		IsUseBloomfilter:"is_use_bloomfilter",  
		Comment:"comment",  
		BlockSize:"block_size",  
		CollationType:"collation_type",  
		DataTableID:"data_table_id",  
		IndexStatus:"index_status",  
		TablegroupID:"tablegroup_id",  
		ProgressiveMergeNum:"progressive_merge_num",  
		IndexType:"index_type",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExpr:"part_func_expr",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExpr:"sub_part_func_expr",  
		SubPartNum:"sub_part_num",  
		CreateMemVersion:"create_mem_version",  
		ViewDefinition:"view_definition",  
		ViewCheckOption:"view_check_option",  
		ViewIsUpdatable:"view_is_updatable",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		IndexUsingType:"index_using_type",  
		ParserName:"parser_name",  
		IndexAttributesSet:"index_attributes_set",  
		Locality:"locality",  
		TabletSize:"tablet_size",  
		Pctfree:"pctfree",  
		PreviousLocality:"previous_locality",  
		MaxUsedPartID:"max_used_part_id",  
		PartitionCntWithinPartitionTable:"partition_cnt_within_partition_table",  
		PartitionStatus:"partition_status",  
		PartitionSchemaVersion:"partition_schema_version",  
		MaxUsedConstraintID:"max_used_constraint_id",  
		SessionID:"session_id",  
		PkComment:"pk_comment",  
		SessActiveTime:"sess_active_time",  
		RowStoreType:"row_store_type",  
		StoreFormat:"store_format",  
		DuplicateScope:"duplicate_scope",  
		Binding:"binding",  
		ProgressiveMergeRound:"progressive_merge_round",  
		StorageFormatVersion:"storage_format_version",  
		TableMode:"table_mode",  
		Encryption:"encryption",  
		TablespaceID:"tablespace_id",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",  
		Dop:"dop",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",  
		AutoPartSize:"auto_part_size",  
		AutoPart:"auto_part",             
	}
	
// AllVirtualTableMgr [...]		
type	AllVirtualTableMgr	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
IndexID	int64	`gorm:"column:index_id" json:"index_id"`			
BaseVersion	int64	`gorm:"column:base_version" json:"base_version"`			
MultiVersionStart	int64	`gorm:"column:multi_version_start" json:"multi_version_start"`			
SnapshotVersion	int64	`gorm:"column:snapshot_version" json:"snapshot_version"`			
MaxMergedVersion	int64	`gorm:"column:max_merged_version" json:"max_merged_version"`			
UpperTransVersion	int64	`gorm:"column:upper_trans_version" json:"upper_trans_version"`			
StartLogTs	uint64	`gorm:"column:start_log_ts" json:"start_log_ts"`			
EndLogTs	uint64	`gorm:"column:end_log_ts" json:"end_log_ts"`			
MaxLogTs	uint64	`gorm:"column:max_log_ts" json:"max_log_ts"`			
Version	int64	`gorm:"column:version" json:"version"`			
LogicalDataVersion	int64	`gorm:"column:logical_data_version" json:"logical_data_version"`			
Size	int64	`gorm:"column:size" json:"size"`			
CompactRow	int64	`gorm:"column:compact_row" json:"compact_row"`			
IsActive	int64	`gorm:"column:is_active" json:"is_active"`			
Timestamp	int64	`gorm:"column:timestamp" json:"timestamp"`			
Ref	int64	`gorm:"column:ref" json:"ref"`			
WriteRef	int64	`gorm:"column:write_ref" json:"write_ref"`			
TrxCount	int64	`gorm:"column:trx_count" json:"trx_count"`			
PendingLogPersistingRowCnt	int64	`gorm:"column:pending_log_persisting_row_cnt" json:"pending_log_persisting_row_cnt"`			
ContainUncommittedRow	int8	`gorm:"column:contain_uncommitted_row" json:"contain_uncommitted_row"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTableMgr) TableName() string {
	return "__all_virtual_table_mgr"
}
	

// AllVirtualTableMgrColumns get sql column name.获取数据库列名
var AllVirtualTableMgrColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableType string
	TableID string
	PartitionID string
	IndexID string
	BaseVersion string
	MultiVersionStart string
	SnapshotVersion string
	MaxMergedVersion string
	UpperTransVersion string
	StartLogTs string
	EndLogTs string
	MaxLogTs string
	Version string
	LogicalDataVersion string
	Size string
	CompactRow string
	IsActive string
	Timestamp string
	Ref string
	WriteRef string
	TrxCount string
	PendingLogPersistingRowCnt string
	ContainUncommittedRow string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableType:"table_type",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		IndexID:"index_id",  
		BaseVersion:"base_version",  
		MultiVersionStart:"multi_version_start",  
		SnapshotVersion:"snapshot_version",  
		MaxMergedVersion:"max_merged_version",  
		UpperTransVersion:"upper_trans_version",  
		StartLogTs:"start_log_ts",  
		EndLogTs:"end_log_ts",  
		MaxLogTs:"max_log_ts",  
		Version:"version",  
		LogicalDataVersion:"logical_data_version",  
		Size:"size",  
		CompactRow:"compact_row",  
		IsActive:"is_active",  
		Timestamp:"timestamp",  
		Ref:"ref",  
		WriteRef:"write_ref",  
		TrxCount:"trx_count",  
		PendingLogPersistingRowCnt:"pending_log_persisting_row_cnt",  
		ContainUncommittedRow:"contain_uncommitted_row",             
	}
	
// AllVirtualTableModifications [...]		
type	AllVirtualTableModifications	struct {		
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
InsertRowCount	int64	`gorm:"column:insert_row_count" json:"insert_row_count"`			
UpdateRowCount	int64	`gorm:"column:update_row_count" json:"update_row_count"`			
DeleteRowCount	int64	`gorm:"column:delete_row_count" json:"delete_row_count"`			
MaxSnapshotVersion	int64	`gorm:"column:max_snapshot_version" json:"max_snapshot_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTableModifications) TableName() string {
	return "__all_virtual_table_modifications"
}
	

// AllVirtualTableModificationsColumns get sql column name.获取数据库列名
var AllVirtualTableModificationsColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	InsertRowCount string
	UpdateRowCount string
	DeleteRowCount string
	MaxSnapshotVersion string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		InsertRowCount:"insert_row_count",  
		UpdateRowCount:"update_row_count",  
		DeleteRowCount:"delete_row_count",  
		MaxSnapshotVersion:"max_snapshot_version",             
	}
	
// AllVirtualTablePrivilege [...]		
type	AllVirtualTablePrivilege	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
TableName	string	`gorm:"primaryKey;column:table_name" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTablePrivilege) TableName() string {
	return "__all_virtual_table_privilege"
}
	

// AllVirtualTablePrivilegeColumns get sql column name.获取数据库列名
var AllVirtualTablePrivilegeColumns = struct { 
	TenantID string
	UserID string
	DatabaseName string
	TableName string
	GmtCreate string
	GmtModified string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string    
	}{ 
		TenantID:"tenant_id",  
		UserID:"user_id",  
		DatabaseName:"database_name",  
		TableName:"table_name",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",             
	}
	
// AllVirtualTablePrivilegeHistory [...]		
type	AllVirtualTablePrivilegeHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
DatabaseName	string	`gorm:"primaryKey;column:database_name" json:"-"`			
TableName	string	`gorm:"primaryKey;column:table_name" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTablePrivilegeHistory) TableName() string {
	return "__all_virtual_table_privilege_history"
}
	

// AllVirtualTablePrivilegeHistoryColumns get sql column name.获取数据库列名
var AllVirtualTablePrivilegeHistoryColumns = struct { 
	TenantID string
	UserID string
	DatabaseName string
	TableName string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string    
	}{ 
		TenantID:"tenant_id",  
		UserID:"user_id",  
		DatabaseName:"database_name",  
		TableName:"table_name",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",             
	}
	
// AllVirtualTableStat [...]		
type	AllVirtualTableStat	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ObjectType	int64	`gorm:"column:object_type" json:"object_type"`			
LastAnalyzed	time.Time	`gorm:"column:last_analyzed" json:"last_analyzed"`			
SstableRowCnt	int64	`gorm:"column:sstable_row_cnt" json:"sstable_row_cnt"`			
SstableAvgRowLen	int64	`gorm:"column:sstable_avg_row_len" json:"sstable_avg_row_len"`			
MacroBlkCnt	int64	`gorm:"column:macro_blk_cnt" json:"macro_blk_cnt"`			
MicroBlkCnt	int64	`gorm:"column:micro_blk_cnt" json:"micro_blk_cnt"`			
MemtableRowCnt	int64	`gorm:"column:memtable_row_cnt" json:"memtable_row_cnt"`			
MemtableAvgRowLen	int64	`gorm:"column:memtable_avg_row_len" json:"memtable_avg_row_len"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTableStat) TableName() string {
	return "__all_virtual_table_stat"
}
	

// AllVirtualTableStatColumns get sql column name.获取数据库列名
var AllVirtualTableStatColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	GmtCreate string
	GmtModified string
	ObjectType string
	LastAnalyzed string
	SstableRowCnt string
	SstableAvgRowLen string
	MacroBlkCnt string
	MicroBlkCnt string
	MemtableRowCnt string
	MemtableAvgRowLen string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ObjectType:"object_type",  
		LastAnalyzed:"last_analyzed",  
		SstableRowCnt:"sstable_row_cnt",  
		SstableAvgRowLen:"sstable_avg_row_len",  
		MacroBlkCnt:"macro_blk_cnt",  
		MicroBlkCnt:"micro_blk_cnt",  
		MemtableRowCnt:"memtable_row_cnt",  
		MemtableAvgRowLen:"memtable_avg_row_len",             
	}
	
// AllVirtualTablegroup [...]		
type	AllVirtualTablegroup	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TablegroupID	int64	`gorm:"primaryKey;column:tablegroup_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TablegroupName	string	`gorm:"column:tablegroup_name" json:"tablegroup_name"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExprNum	int64	`gorm:"column:part_func_expr_num" json:"part_func_expr_num"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExprNum	int64	`gorm:"column:sub_part_func_expr_num" json:"sub_part_func_expr_num"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTablegroup) TableName() string {
	return "__all_virtual_tablegroup"
}
	

// AllVirtualTablegroupColumns get sql column name.获取数据库列名
var AllVirtualTablegroupColumns = struct { 
	TenantID string
	TablegroupID string
	GmtCreate string
	GmtModified string
	TablegroupName string
	Comment string
	PrimaryZone string
	Locality string
	PartLevel string
	PartFuncType string
	PartFuncExprNum string
	PartNum string
	SubPartFuncType string
	SubPartFuncExprNum string
	SubPartNum string
	MaxUsedPartID string
	SchemaVersion string
	PartitionStatus string
	PreviousLocality string
	PartitionSchemaVersion string
	Binding string
	DropSchemaVersion string
	IsSubPartTemplate string    
	}{ 
		TenantID:"tenant_id",  
		TablegroupID:"tablegroup_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TablegroupName:"tablegroup_name",  
		Comment:"comment",  
		PrimaryZone:"primary_zone",  
		Locality:"locality",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExprNum:"part_func_expr_num",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExprNum:"sub_part_func_expr_num",  
		SubPartNum:"sub_part_num",  
		MaxUsedPartID:"max_used_part_id",  
		SchemaVersion:"schema_version",  
		PartitionStatus:"partition_status",  
		PreviousLocality:"previous_locality",  
		PartitionSchemaVersion:"partition_schema_version",  
		Binding:"binding",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",             
	}
	
// AllVirtualTablegroupHistory [...]		
type	AllVirtualTablegroupHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TablegroupID	int64	`gorm:"primaryKey;column:tablegroup_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TablegroupName	string	`gorm:"column:tablegroup_name" json:"tablegroup_name"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExprNum	int64	`gorm:"column:part_func_expr_num" json:"part_func_expr_num"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExprNum	int64	`gorm:"column:sub_part_func_expr_num" json:"sub_part_func_expr_num"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
MaxUsedPartID	int64	`gorm:"column:max_used_part_id" json:"max_used_part_id"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
PreviousLocality	string	`gorm:"column:previous_locality" json:"previous_locality"`			
PartitionSchemaVersion	int64	`gorm:"column:partition_schema_version" json:"partition_schema_version"`			
Binding	int8	`gorm:"column:binding" json:"binding"`			
DropSchemaVersion	int64	`gorm:"column:drop_schema_version" json:"drop_schema_version"`			
IsSubPartTemplate	int8	`gorm:"column:is_sub_part_template" json:"is_sub_part_template"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTablegroupHistory) TableName() string {
	return "__all_virtual_tablegroup_history"
}
	

// AllVirtualTablegroupHistoryColumns get sql column name.获取数据库列名
var AllVirtualTablegroupHistoryColumns = struct { 
	TenantID string
	TablegroupID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	TablegroupName string
	Comment string
	PrimaryZone string
	Locality string
	PartLevel string
	PartFuncType string
	PartFuncExprNum string
	PartNum string
	SubPartFuncType string
	SubPartFuncExprNum string
	SubPartNum string
	MaxUsedPartID string
	PartitionStatus string
	PreviousLocality string
	PartitionSchemaVersion string
	Binding string
	DropSchemaVersion string
	IsSubPartTemplate string    
	}{ 
		TenantID:"tenant_id",  
		TablegroupID:"tablegroup_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		TablegroupName:"tablegroup_name",  
		Comment:"comment",  
		PrimaryZone:"primary_zone",  
		Locality:"locality",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExprNum:"part_func_expr_num",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExprNum:"sub_part_func_expr_num",  
		SubPartNum:"sub_part_num",  
		MaxUsedPartID:"max_used_part_id",  
		PartitionStatus:"partition_status",  
		PreviousLocality:"previous_locality",  
		PartitionSchemaVersion:"partition_schema_version",  
		Binding:"binding",  
		DropSchemaVersion:"drop_schema_version",  
		IsSubPartTemplate:"is_sub_part_template",             
	}
	
// AllVirtualTempTable [...]		
type	AllVirtualTempTable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
CreateHost	string	`gorm:"column:create_host" json:"create_host"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTempTable) TableName() string {
	return "__all_virtual_temp_table"
}
	

// AllVirtualTempTableColumns get sql column name.获取数据库列名
var AllVirtualTempTableColumns = struct { 
	TenantID string
	TableID string
	CreateHost string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		CreateHost:"create_host",             
	}
	
// AllVirtualTenantDiskStat [...]		
type	AllVirtualTenantDiskStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
BlockType	string	`gorm:"column:block_type" json:"block_type"`			
BlockSize	int64	`gorm:"column:block_size" json:"block_size"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantDiskStat) TableName() string {
	return "__all_virtual_tenant_disk_stat"
}
	

// AllVirtualTenantDiskStatColumns get sql column name.获取数据库列名
var AllVirtualTenantDiskStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	Zone string
	BlockType string
	BlockSize string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Zone:"zone",  
		BlockType:"block_type",  
		BlockSize:"block_size",             
	}
	
// AllVirtualTenantGcPartitionInfo [...]		
type	AllVirtualTenantGcPartitionInfo	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantGcPartitionInfo) TableName() string {
	return "__all_virtual_tenant_gc_partition_info"
}
	

// AllVirtualTenantGcPartitionInfoColumns get sql column name.获取数据库列名
var AllVirtualTenantGcPartitionInfoColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	GmtCreate string
	GmtModified string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",             
	}
	
// AllVirtualTenantKeystore [...]		
type	AllVirtualTenantKeystore	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
KeystoreID	int64	`gorm:"primaryKey;column:keystore_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
KeystoreName	string	`gorm:"column:keystore_name" json:"keystore_name"`			
Password	string	`gorm:"column:password" json:"password"`			
Status	int64	`gorm:"column:status" json:"status"`			
MasterKeyID	int64	`gorm:"column:master_key_id" json:"master_key_id"`			
MasterKey	string	`gorm:"column:master_key" json:"master_key"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantKeystore) TableName() string {
	return "__all_virtual_tenant_keystore"
}
	

// AllVirtualTenantKeystoreColumns get sql column name.获取数据库列名
var AllVirtualTenantKeystoreColumns = struct { 
	TenantID string
	KeystoreID string
	GmtCreate string
	GmtModified string
	KeystoreName string
	Password string
	Status string
	MasterKeyID string
	MasterKey string    
	}{ 
		TenantID:"tenant_id",  
		KeystoreID:"keystore_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		KeystoreName:"keystore_name",  
		Password:"password",  
		Status:"status",  
		MasterKeyID:"master_key_id",  
		MasterKey:"master_key",             
	}
	
// AllVirtualTenantKeystoreHistory [...]		
type	AllVirtualTenantKeystoreHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
KeystoreID	int64	`gorm:"primaryKey;column:keystore_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
KeystoreName	string	`gorm:"column:keystore_name" json:"keystore_name"`			
Password	string	`gorm:"column:password" json:"password"`			
Status	int64	`gorm:"column:status" json:"status"`			
MasterKeyID	int64	`gorm:"column:master_key_id" json:"master_key_id"`			
MasterKey	string	`gorm:"column:master_key" json:"master_key"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantKeystoreHistory) TableName() string {
	return "__all_virtual_tenant_keystore_history"
}
	

// AllVirtualTenantKeystoreHistoryColumns get sql column name.获取数据库列名
var AllVirtualTenantKeystoreHistoryColumns = struct { 
	TenantID string
	KeystoreID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	KeystoreName string
	Password string
	Status string
	MasterKeyID string
	MasterKey string    
	}{ 
		TenantID:"tenant_id",  
		KeystoreID:"keystore_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		KeystoreName:"keystore_name",  
		Password:"password",  
		Status:"status",  
		MasterKeyID:"master_key_id",  
		MasterKey:"master_key",             
	}
	
// AllVirtualTenantMemstoreAllocatorInfo [...]		
type	AllVirtualTenantMemstoreAllocatorInfo	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
MtBaseVersion	int64	`gorm:"column:mt_base_version" json:"mt_base_version"`			
RetireClock	int64	`gorm:"column:retire_clock" json:"retire_clock"`			
MtIsFrozen	int64	`gorm:"column:mt_is_frozen" json:"mt_is_frozen"`			
MtProtectionClock	int64	`gorm:"column:mt_protection_clock" json:"mt_protection_clock"`			
MtSnapshotVersion	int64	`gorm:"column:mt_snapshot_version" json:"mt_snapshot_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantMemstoreAllocatorInfo) TableName() string {
	return "__all_virtual_tenant_memstore_allocator_info"
}
	

// AllVirtualTenantMemstoreAllocatorInfoColumns get sql column name.获取数据库列名
var AllVirtualTenantMemstoreAllocatorInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	MtBaseVersion string
	RetireClock string
	MtIsFrozen string
	MtProtectionClock string
	MtSnapshotVersion string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		MtBaseVersion:"mt_base_version",  
		RetireClock:"retire_clock",  
		MtIsFrozen:"mt_is_frozen",  
		MtProtectionClock:"mt_protection_clock",  
		MtSnapshotVersion:"mt_snapshot_version",             
	}
	
// AllVirtualTenantMemstoreInfo [...]		
type	AllVirtualTenantMemstoreInfo	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
ActiveMemstoreUsed	int64	`gorm:"column:active_memstore_used" json:"active_memstore_used"`			
TotalMemstoreUsed	int64	`gorm:"column:total_memstore_used" json:"total_memstore_used"`			
MajorFreezeTrigger	int64	`gorm:"column:major_freeze_trigger" json:"major_freeze_trigger"`			
MemstoreLimit	int64	`gorm:"column:memstore_limit" json:"memstore_limit"`			
FreezeCnt	int64	`gorm:"column:freeze_cnt" json:"freeze_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantMemstoreInfo) TableName() string {
	return "__all_virtual_tenant_memstore_info"
}
	

// AllVirtualTenantMemstoreInfoColumns get sql column name.获取数据库列名
var AllVirtualTenantMemstoreInfoColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	ActiveMemstoreUsed string
	TotalMemstoreUsed string
	MajorFreezeTrigger string
	MemstoreLimit string
	FreezeCnt string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ActiveMemstoreUsed:"active_memstore_used",  
		TotalMemstoreUsed:"total_memstore_used",  
		MajorFreezeTrigger:"major_freeze_trigger",  
		MemstoreLimit:"memstore_limit",  
		FreezeCnt:"freeze_cnt",             
	}
	
// AllVirtualTenantParameterInfo [...]		
type	AllVirtualTenantParameterInfo	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
SvrType	string	`gorm:"primaryKey;column:svr_type" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
DataType	string	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
Section	string	`gorm:"column:section" json:"section"`			
Scope	string	`gorm:"column:scope" json:"scope"`			
Source	string	`gorm:"column:source" json:"source"`			
EditLevel	string	`gorm:"column:edit_level" json:"edit_level"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantParameterInfo) TableName() string {
	return "__all_virtual_tenant_parameter_info"
}
	

// AllVirtualTenantParameterInfoColumns get sql column name.获取数据库列名
var AllVirtualTenantParameterInfoColumns = struct { 
	TenantID string
	Zone string
	SvrType string
	SvrIP string
	SvrPort string
	Name string
	DataType string
	Value string
	Info string
	Section string
	Scope string
	Source string
	EditLevel string    
	}{ 
		TenantID:"tenant_id",  
		Zone:"zone",  
		SvrType:"svr_type",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Name:"name",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",  
		Section:"section",  
		Scope:"scope",  
		Source:"source",  
		EditLevel:"edit_level",             
	}
	
// AllVirtualTenantParameterStat [...]		
type	AllVirtualTenantParameterStat	struct {		
Zone	string	`gorm:"column:zone" json:"zone"`			
SvrType	string	`gorm:"column:svr_type" json:"svr_type"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Name	string	`gorm:"column:name" json:"name"`			
DataType	string	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
Section	string	`gorm:"column:section" json:"section"`			
Scope	string	`gorm:"column:scope" json:"scope"`			
Source	string	`gorm:"column:source" json:"source"`			
EditLevel	string	`gorm:"column:edit_level" json:"edit_level"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantParameterStat) TableName() string {
	return "__all_virtual_tenant_parameter_stat"
}
	

// AllVirtualTenantParameterStatColumns get sql column name.获取数据库列名
var AllVirtualTenantParameterStatColumns = struct { 
	Zone string
	SvrType string
	SvrIP string
	SvrPort string
	Name string
	DataType string
	Value string
	Info string
	Section string
	Scope string
	Source string
	EditLevel string    
	}{ 
		Zone:"zone",  
		SvrType:"svr_type",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Name:"name",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",  
		Section:"section",  
		Scope:"scope",  
		Source:"source",  
		EditLevel:"edit_level",             
	}
	
// AllVirtualTenantPartitionMetaTable [...]		
type	AllVirtualTenantPartitionMetaTable	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
PartitionID	int64	`gorm:"primaryKey;column:partition_id" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Role	int64	`gorm:"column:role" json:"role"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
Status	string	`gorm:"column:status" json:"status"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantPartitionMetaTable) TableName() string {
	return "__all_virtual_tenant_partition_meta_table"
}
	

// AllVirtualTenantPartitionMetaTableColumns get sql column name.获取数据库列名
var AllVirtualTenantPartitionMetaTableColumns = struct { 
	TenantID string
	TableID string
	PartitionID string
	SvrIP string
	SvrPort string
	GmtCreate string
	GmtModified string
	Role string
	RowCount string
	DataSize string
	DataVersion string
	RequiredSize string
	ReplicaType string
	Status string
	DataChecksum string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Role:"role",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		RequiredSize:"required_size",  
		ReplicaType:"replica_type",  
		Status:"status",  
		DataChecksum:"data_checksum",             
	}
	
// AllVirtualTenantPlanBaseline [...]		
type	AllVirtualTenantPlanBaseline	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
PlanBaselineID	int64	`gorm:"primaryKey;column:plan_baseline_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DatabaseID	uint64	`gorm:"column:database_id" json:"database_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
SQLID	[]byte	`gorm:"column:sql_id" json:"sql_id"`			
PlanHashValue	uint64	`gorm:"column:plan_hash_value" json:"plan_hash_value"`			
ParamsInfo	[]byte	`gorm:"column:params_info" json:"params_info"`			
OutlineData	string	`gorm:"column:outline_data" json:"outline_data"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
Fixed	int8	`gorm:"column:fixed" json:"fixed"`			
Enabled	int8	`gorm:"column:enabled" json:"enabled"`			
HintsInfo	string	`gorm:"column:hints_info" json:"hints_info"`			
HintsAllWorked	int8	`gorm:"column:hints_all_worked" json:"hints_all_worked"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantPlanBaseline) TableName() string {
	return "__all_virtual_tenant_plan_baseline"
}
	

// AllVirtualTenantPlanBaselineColumns get sql column name.获取数据库列名
var AllVirtualTenantPlanBaselineColumns = struct { 
	TenantID string
	PlanBaselineID string
	GmtCreate string
	GmtModified string
	DatabaseID string
	SchemaVersion string
	SQLID string
	PlanHashValue string
	ParamsInfo string
	OutlineData string
	SQLText string
	Fixed string
	Enabled string
	HintsInfo string
	HintsAllWorked string    
	}{ 
		TenantID:"tenant_id",  
		PlanBaselineID:"plan_baseline_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		SQLID:"sql_id",  
		PlanHashValue:"plan_hash_value",  
		ParamsInfo:"params_info",  
		OutlineData:"outline_data",  
		SQLText:"sql_text",  
		Fixed:"fixed",  
		Enabled:"enabled",  
		HintsInfo:"hints_info",  
		HintsAllWorked:"hints_all_worked",             
	}
	
// AllVirtualTenantPlanBaselineHistory [...]		
type	AllVirtualTenantPlanBaselineHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
PlanBaselineID	int64	`gorm:"primaryKey;column:plan_baseline_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	uint64	`gorm:"column:database_id" json:"database_id"`			
SQLID	[]byte	`gorm:"column:sql_id" json:"sql_id"`			
PlanHashValue	uint64	`gorm:"column:plan_hash_value" json:"plan_hash_value"`			
ParamsInfo	[]byte	`gorm:"column:params_info" json:"params_info"`			
OutlineData	string	`gorm:"column:outline_data" json:"outline_data"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
Fixed	int8	`gorm:"column:fixed" json:"fixed"`			
Enabled	int8	`gorm:"column:enabled" json:"enabled"`			
HintsInfo	string	`gorm:"column:hints_info" json:"hints_info"`			
HintsAllWorked	int8	`gorm:"column:hints_all_worked" json:"hints_all_worked"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantPlanBaselineHistory) TableName() string {
	return "__all_virtual_tenant_plan_baseline_history"
}
	

// AllVirtualTenantPlanBaselineHistoryColumns get sql column name.获取数据库列名
var AllVirtualTenantPlanBaselineHistoryColumns = struct { 
	TenantID string
	PlanBaselineID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DatabaseID string
	SQLID string
	PlanHashValue string
	ParamsInfo string
	OutlineData string
	SQLText string
	Fixed string
	Enabled string
	HintsInfo string
	HintsAllWorked string    
	}{ 
		TenantID:"tenant_id",  
		PlanBaselineID:"plan_baseline_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		SQLID:"sql_id",  
		PlanHashValue:"plan_hash_value",  
		ParamsInfo:"params_info",  
		OutlineData:"outline_data",  
		SQLText:"sql_text",  
		Fixed:"fixed",  
		Enabled:"enabled",  
		HintsInfo:"hints_info",  
		HintsAllWorked:"hints_all_worked",             
	}
	
// AllVirtualTenantProfile [...]		
type	AllVirtualTenantProfile	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ProfileID	int64	`gorm:"primaryKey;column:profile_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
ProfileName	string	`gorm:"column:profile_name" json:"profile_name"`			
FailedLoginAttempts	int64	`gorm:"column:failed_login_attempts" json:"failed_login_attempts"`			
PasswordLockTime	int64	`gorm:"column:password_lock_time" json:"password_lock_time"`			
PasswordVerifyFunction	string	`gorm:"column:password_verify_function" json:"password_verify_function"`			
PasswordLifeTime	int64	`gorm:"column:password_life_time" json:"password_life_time"`			
PasswordGraceTime	int64	`gorm:"column:password_grace_time" json:"password_grace_time"`			
PasswordReuseTime	int64	`gorm:"column:password_reuse_time" json:"password_reuse_time"`			
PasswordReuseMax	int64	`gorm:"column:password_reuse_max" json:"password_reuse_max"`			
InactiveAccountTime	int64	`gorm:"column:inactive_account_time" json:"inactive_account_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantProfile) TableName() string {
	return "__all_virtual_tenant_profile"
}
	

// AllVirtualTenantProfileColumns get sql column name.获取数据库列名
var AllVirtualTenantProfileColumns = struct { 
	TenantID string
	ProfileID string
	GmtCreate string
	GmtModified string
	ProfileName string
	FailedLoginAttempts string
	PasswordLockTime string
	PasswordVerifyFunction string
	PasswordLifeTime string
	PasswordGraceTime string
	PasswordReuseTime string
	PasswordReuseMax string
	InactiveAccountTime string    
	}{ 
		TenantID:"tenant_id",  
		ProfileID:"profile_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		ProfileName:"profile_name",  
		FailedLoginAttempts:"failed_login_attempts",  
		PasswordLockTime:"password_lock_time",  
		PasswordVerifyFunction:"password_verify_function",  
		PasswordLifeTime:"password_life_time",  
		PasswordGraceTime:"password_grace_time",  
		PasswordReuseTime:"password_reuse_time",  
		PasswordReuseMax:"password_reuse_max",  
		InactiveAccountTime:"inactive_account_time",             
	}
	
// AllVirtualTenantProfileHistory [...]		
type	AllVirtualTenantProfileHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
ProfileID	int64	`gorm:"primaryKey;column:profile_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
ProfileName	string	`gorm:"column:profile_name" json:"profile_name"`			
FailedLoginAttempts	int64	`gorm:"column:failed_login_attempts" json:"failed_login_attempts"`			
PasswordLockTime	int64	`gorm:"column:password_lock_time" json:"password_lock_time"`			
PasswordVerifyFunction	string	`gorm:"column:password_verify_function" json:"password_verify_function"`			
PasswordLifeTime	int64	`gorm:"column:password_life_time" json:"password_life_time"`			
PasswordGraceTime	int64	`gorm:"column:password_grace_time" json:"password_grace_time"`			
PasswordReuseTime	int64	`gorm:"column:password_reuse_time" json:"password_reuse_time"`			
PasswordReuseMax	int64	`gorm:"column:password_reuse_max" json:"password_reuse_max"`			
InactiveAccountTime	int64	`gorm:"column:inactive_account_time" json:"inactive_account_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantProfileHistory) TableName() string {
	return "__all_virtual_tenant_profile_history"
}
	

// AllVirtualTenantProfileHistoryColumns get sql column name.获取数据库列名
var AllVirtualTenantProfileHistoryColumns = struct { 
	TenantID string
	ProfileID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	ProfileName string
	FailedLoginAttempts string
	PasswordLockTime string
	PasswordVerifyFunction string
	PasswordLifeTime string
	PasswordGraceTime string
	PasswordReuseTime string
	PasswordReuseMax string
	InactiveAccountTime string    
	}{ 
		TenantID:"tenant_id",  
		ProfileID:"profile_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		ProfileName:"profile_name",  
		FailedLoginAttempts:"failed_login_attempts",  
		PasswordLockTime:"password_lock_time",  
		PasswordVerifyFunction:"password_verify_function",  
		PasswordLifeTime:"password_life_time",  
		PasswordGraceTime:"password_grace_time",  
		PasswordReuseTime:"password_reuse_time",  
		PasswordReuseMax:"password_reuse_max",  
		InactiveAccountTime:"inactive_account_time",             
	}
	
// AllVirtualTenantRoleGranteeMap [...]		
type	AllVirtualTenantRoleGranteeMap	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
RoleID	int64	`gorm:"primaryKey;column:role_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
AdminOption	int64	`gorm:"column:admin_option" json:"admin_option"`			
DisableFlag	int64	`gorm:"column:disable_flag" json:"disable_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantRoleGranteeMap) TableName() string {
	return "__all_virtual_tenant_role_grantee_map"
}
	

// AllVirtualTenantRoleGranteeMapColumns get sql column name.获取数据库列名
var AllVirtualTenantRoleGranteeMapColumns = struct { 
	TenantID string
	GranteeID string
	RoleID string
	GmtCreate string
	GmtModified string
	AdminOption string
	DisableFlag string    
	}{ 
		TenantID:"tenant_id",  
		GranteeID:"grantee_id",  
		RoleID:"role_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		AdminOption:"admin_option",  
		DisableFlag:"disable_flag",             
	}
	
// AllVirtualTenantRoleGranteeMapHistory [...]		
type	AllVirtualTenantRoleGranteeMapHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
GranteeID	int64	`gorm:"primaryKey;column:grantee_id" json:"-"`			
RoleID	int64	`gorm:"primaryKey;column:role_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
AdminOption	int64	`gorm:"column:admin_option" json:"admin_option"`			
DisableFlag	int64	`gorm:"column:disable_flag" json:"disable_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantRoleGranteeMapHistory) TableName() string {
	return "__all_virtual_tenant_role_grantee_map_history"
}
	

// AllVirtualTenantRoleGranteeMapHistoryColumns get sql column name.获取数据库列名
var AllVirtualTenantRoleGranteeMapHistoryColumns = struct { 
	TenantID string
	GranteeID string
	RoleID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	AdminOption string
	DisableFlag string    
	}{ 
		TenantID:"tenant_id",  
		GranteeID:"grantee_id",  
		RoleID:"role_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		AdminOption:"admin_option",  
		DisableFlag:"disable_flag",             
	}
	
// AllVirtualTenantStat [...]		
type	AllVirtualTenantStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableCount	int64	`gorm:"column:table_count" json:"table_count"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
TotalSize	int64	`gorm:"column:total_size" json:"total_size"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantStat) TableName() string {
	return "__all_virtual_tenant_stat"
}
	

// AllVirtualTenantStatColumns get sql column name.获取数据库列名
var AllVirtualTenantStatColumns = struct { 
	TenantID string
	TableCount string
	RowCount string
	TotalSize string    
	}{ 
		TenantID:"tenant_id",  
		TableCount:"table_count",  
		RowCount:"row_count",  
		TotalSize:"total_size",             
	}
	
// AllVirtualTenantTablespace [...]		
type	AllVirtualTenantTablespace	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TablespaceID	int64	`gorm:"primaryKey;column:tablespace_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TablespaceName	string	`gorm:"column:tablespace_name" json:"tablespace_name"`			
EncryptionName	string	`gorm:"column:encryption_name" json:"encryption_name"`			
EncryptKey	[]byte	`gorm:"column:encrypt_key" json:"encrypt_key"`			
MasterKeyID	uint64	`gorm:"column:master_key_id" json:"master_key_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantTablespace) TableName() string {
	return "__all_virtual_tenant_tablespace"
}
	

// AllVirtualTenantTablespaceColumns get sql column name.获取数据库列名
var AllVirtualTenantTablespaceColumns = struct { 
	TenantID string
	TablespaceID string
	GmtCreate string
	GmtModified string
	TablespaceName string
	EncryptionName string
	EncryptKey string
	MasterKeyID string    
	}{ 
		TenantID:"tenant_id",  
		TablespaceID:"tablespace_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TablespaceName:"tablespace_name",  
		EncryptionName:"encryption_name",  
		EncryptKey:"encrypt_key",  
		MasterKeyID:"master_key_id",             
	}
	
// AllVirtualTenantTablespaceHistory [...]		
type	AllVirtualTenantTablespaceHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TablespaceID	int64	`gorm:"primaryKey;column:tablespace_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TablespaceName	string	`gorm:"column:tablespace_name" json:"tablespace_name"`			
EncryptionName	string	`gorm:"column:encryption_name" json:"encryption_name"`			
EncryptKey	[]byte	`gorm:"column:encrypt_key" json:"encrypt_key"`			
MasterKeyID	uint64	`gorm:"column:master_key_id" json:"master_key_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantTablespaceHistory) TableName() string {
	return "__all_virtual_tenant_tablespace_history"
}
	

// AllVirtualTenantTablespaceHistoryColumns get sql column name.获取数据库列名
var AllVirtualTenantTablespaceHistoryColumns = struct { 
	TenantID string
	TablespaceID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	TablespaceName string
	EncryptionName string
	EncryptKey string
	MasterKeyID string    
	}{ 
		TenantID:"tenant_id",  
		TablespaceID:"tablespace_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		TablespaceName:"tablespace_name",  
		EncryptionName:"encryption_name",  
		EncryptKey:"encrypt_key",  
		MasterKeyID:"master_key_id",             
	}
	
// AllVirtualTenantUserFailedLoginStat [...]		
type	AllVirtualTenantUserFailedLoginStat	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
FailedLoginAttempts	int64	`gorm:"column:failed_login_attempts" json:"failed_login_attempts"`			
LastFailedLoginSvrIP	string	`gorm:"column:last_failed_login_svr_ip" json:"last_failed_login_svr_ip"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTenantUserFailedLoginStat) TableName() string {
	return "__all_virtual_tenant_user_failed_login_stat"
}
	

// AllVirtualTenantUserFailedLoginStatColumns get sql column name.获取数据库列名
var AllVirtualTenantUserFailedLoginStatColumns = struct { 
	TenantID string
	UserID string
	GmtCreate string
	GmtModified string
	UserName string
	FailedLoginAttempts string
	LastFailedLoginSvrIP string    
	}{ 
		TenantID:"tenant_id",  
		UserID:"user_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		UserName:"user_name",  
		FailedLoginAttempts:"failed_login_attempts",  
		LastFailedLoginSvrIP:"last_failed_login_svr_ip",             
	}
	
// AllVirtualTimeZone [...]		
type	AllVirtualTimeZone	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TimeZoneID	int64	`gorm:"primaryKey;column:time_zone_id" json:"-"`			
UseLeapSeconds	string	`gorm:"column:use_leap_seconds" json:"use_leap_seconds"`			
Version	int64	`gorm:"column:version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTimeZone) TableName() string {
	return "__all_virtual_time_zone"
}
	

// AllVirtualTimeZoneColumns get sql column name.获取数据库列名
var AllVirtualTimeZoneColumns = struct { 
	TenantID string
	TimeZoneID string
	UseLeapSeconds string
	Version string    
	}{ 
		TenantID:"tenant_id",  
		TimeZoneID:"time_zone_id",  
		UseLeapSeconds:"use_leap_seconds",  
		Version:"version",             
	}
	
// AllVirtualTimeZoneName [...]		
type	AllVirtualTimeZoneName	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
TimeZoneID	int64	`gorm:"column:time_zone_id" json:"time_zone_id"`			
Version	int64	`gorm:"column:version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTimeZoneName) TableName() string {
	return "__all_virtual_time_zone_name"
}
	

// AllVirtualTimeZoneNameColumns get sql column name.获取数据库列名
var AllVirtualTimeZoneNameColumns = struct { 
	TenantID string
	Name string
	TimeZoneID string
	Version string    
	}{ 
		TenantID:"tenant_id",  
		Name:"name",  
		TimeZoneID:"time_zone_id",  
		Version:"version",             
	}
	
// AllVirtualTimeZoneTransition [...]		
type	AllVirtualTimeZoneTransition	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TimeZoneID	int64	`gorm:"primaryKey;column:time_zone_id" json:"-"`			
TransitionTime	int64	`gorm:"primaryKey;column:transition_time" json:"-"`			
TransitionTypeID	int64	`gorm:"column:transition_type_id" json:"transition_type_id"`			
Version	int64	`gorm:"column:version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTimeZoneTransition) TableName() string {
	return "__all_virtual_time_zone_transition"
}
	

// AllVirtualTimeZoneTransitionColumns get sql column name.获取数据库列名
var AllVirtualTimeZoneTransitionColumns = struct { 
	TenantID string
	TimeZoneID string
	TransitionTime string
	TransitionTypeID string
	Version string    
	}{ 
		TenantID:"tenant_id",  
		TimeZoneID:"time_zone_id",  
		TransitionTime:"transition_time",  
		TransitionTypeID:"transition_type_id",  
		Version:"version",             
	}
	
// AllVirtualTimeZoneTransitionType [...]		
type	AllVirtualTimeZoneTransitionType	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TimeZoneID	int64	`gorm:"primaryKey;column:time_zone_id" json:"-"`			
TransitionTypeID	int64	`gorm:"primaryKey;column:transition_type_id" json:"-"`			
Offset	int64	`gorm:"column:offset" json:"offset"`			
IsDst	int64	`gorm:"column:is_dst" json:"is_dst"`			
Abbreviation	string	`gorm:"column:abbreviation" json:"abbreviation"`			
Version	int64	`gorm:"column:version" json:"version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTimeZoneTransitionType) TableName() string {
	return "__all_virtual_time_zone_transition_type"
}
	

// AllVirtualTimeZoneTransitionTypeColumns get sql column name.获取数据库列名
var AllVirtualTimeZoneTransitionTypeColumns = struct { 
	TenantID string
	TimeZoneID string
	TransitionTypeID string
	Offset string
	IsDst string
	Abbreviation string
	Version string    
	}{ 
		TenantID:"tenant_id",  
		TimeZoneID:"time_zone_id",  
		TransitionTypeID:"transition_type_id",  
		Offset:"offset",  
		IsDst:"is_dst",  
		Abbreviation:"abbreviation",  
		Version:"version",             
	}
	
// AllVirtualTimestampService [...]		
type	AllVirtualTimestampService	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TsType	int64	`gorm:"column:ts_type" json:"ts_type"`			
TsValue	int64	`gorm:"column:ts_value" json:"ts_value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTimestampService) TableName() string {
	return "__all_virtual_timestamp_service"
}
	

// AllVirtualTimestampServiceColumns get sql column name.获取数据库列名
var AllVirtualTimestampServiceColumns = struct { 
	TenantID string
	TsType string
	TsValue string    
	}{ 
		TenantID:"tenant_id",  
		TsType:"ts_type",  
		TsValue:"ts_value",             
	}
	
// AllVirtualTraceLog [...]		
type	AllVirtualTraceLog	struct {		
Title	string	`gorm:"column:title" json:"title"`			
KeyValue	string	`gorm:"column:key_value" json:"key_value"`			
Time	string	`gorm:"column:time" json:"time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTraceLog) TableName() string {
	return "__all_virtual_trace_log"
}
	

// AllVirtualTraceLogColumns get sql column name.获取数据库列名
var AllVirtualTraceLogColumns = struct { 
	Title string
	KeyValue string
	Time string    
	}{ 
		Title:"title",  
		KeyValue:"key_value",  
		Time:"time",             
	}
	
// AllVirtualTransAudit [...]		
type	AllVirtualTransAudit	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TransID	string	`gorm:"column:trans_id" json:"trans_id"`			
Pkey	string	`gorm:"column:pkey" json:"pkey"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
ProxyID	string	`gorm:"column:proxy_id" json:"proxy_id"`			
TransType	int64	`gorm:"column:trans_type" json:"trans_type"`			
CtxCreateTime	time.Time	`gorm:"column:ctx_create_time" json:"ctx_create_time"`			
ExpiredTime	time.Time	`gorm:"column:expired_time" json:"expired_time"`			
TransParam	string	`gorm:"column:trans_param" json:"trans_param"`			
TotalSQLNo	int64	`gorm:"column:total_sql_no" json:"total_sql_no"`			
Refer	int64	`gorm:"column:refer" json:"refer"`			
PrevTransArr	string	`gorm:"column:prev_trans_arr" json:"prev_trans_arr"`			
NextTransArr	string	`gorm:"column:next_trans_arr" json:"next_trans_arr"`			
CtxAddr	int64	`gorm:"column:ctx_addr" json:"ctx_addr"`			
CtxType	int64	`gorm:"column:ctx_type" json:"ctx_type"`			
TraceLog	string	`gorm:"column:trace_log" json:"trace_log"`			
Status	int64	`gorm:"column:status" json:"status"`			
ForReplay	int8	`gorm:"column:for_replay" json:"for_replay"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTransAudit) TableName() string {
	return "__all_virtual_trans_audit"
}
	

// AllVirtualTransAuditColumns get sql column name.获取数据库列名
var AllVirtualTransAuditColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	TransID string
	Pkey string
	SessionID string
	ProxyID string
	TransType string
	CtxCreateTime string
	ExpiredTime string
	TransParam string
	TotalSQLNo string
	Refer string
	PrevTransArr string
	NextTransArr string
	CtxAddr string
	CtxType string
	TraceLog string
	Status string
	ForReplay string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TransID:"trans_id",  
		Pkey:"pkey",  
		SessionID:"session_id",  
		ProxyID:"proxy_id",  
		TransType:"trans_type",  
		CtxCreateTime:"ctx_create_time",  
		ExpiredTime:"expired_time",  
		TransParam:"trans_param",  
		TotalSQLNo:"total_sql_no",  
		Refer:"refer",  
		PrevTransArr:"prev_trans_arr",  
		NextTransArr:"next_trans_arr",  
		CtxAddr:"ctx_addr",  
		CtxType:"ctx_type",  
		TraceLog:"trace_log",  
		Status:"status",  
		ForReplay:"for_replay",             
	}
	
// AllVirtualTransLockStat [...]		
type	AllVirtualTransLockStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TransID	string	`gorm:"column:trans_id" json:"trans_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Partition	string	`gorm:"column:partition" json:"partition"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
Rowkey	string	`gorm:"column:rowkey" json:"rowkey"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
ProxyID	string	`gorm:"column:proxy_id" json:"proxy_id"`			
CtxCreateTime	time.Time	`gorm:"column:ctx_create_time" json:"ctx_create_time"`			
ExpiredTime	time.Time	`gorm:"column:expired_time" json:"expired_time"`			
RowLockAddr	uint64	`gorm:"column:row_lock_addr" json:"row_lock_addr"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTransLockStat) TableName() string {
	return "__all_virtual_trans_lock_stat"
}
	

// AllVirtualTransLockStatColumns get sql column name.获取数据库列名
var AllVirtualTransLockStatColumns = struct { 
	TenantID string
	TransID string
	SvrIP string
	SvrPort string
	Partition string
	TableID string
	Rowkey string
	SessionID string
	ProxyID string
	CtxCreateTime string
	ExpiredTime string
	RowLockAddr string    
	}{ 
		TenantID:"tenant_id",  
		TransID:"trans_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Partition:"partition",  
		TableID:"table_id",  
		Rowkey:"rowkey",  
		SessionID:"session_id",  
		ProxyID:"proxy_id",  
		CtxCreateTime:"ctx_create_time",  
		ExpiredTime:"expired_time",  
		RowLockAddr:"row_lock_addr",             
	}
	
// AllVirtualTransMemStat [...]		
type	AllVirtualTransMemStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Type	string	`gorm:"column:type" json:"type"`			
AllocCount	int64	`gorm:"column:alloc_count" json:"alloc_count"`			
ReleaseCount	int64	`gorm:"column:release_count" json:"release_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTransMemStat) TableName() string {
	return "__all_virtual_trans_mem_stat"
}
	

// AllVirtualTransMemStatColumns get sql column name.获取数据库列名
var AllVirtualTransMemStatColumns = struct { 
	SvrIP string
	SvrPort string
	Type string
	AllocCount string
	ReleaseCount string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Type:"type",  
		AllocCount:"alloc_count",  
		ReleaseCount:"release_count",             
	}
	
// AllVirtualTransMgrStat [...]		
type	AllVirtualTransMgrStat	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionIDx	int64	`gorm:"column:partition_idx" json:"partition_idx"`			
CtxType	int64	`gorm:"column:ctx_type" json:"ctx_type"`			
IsMaster	int64	`gorm:"column:is_master" json:"is_master"`			
IsFrozen	int64	`gorm:"column:is_frozen" json:"is_frozen"`			
IsStopped	int64	`gorm:"column:is_stopped" json:"is_stopped"`			
ReadOnlyCount	int64	`gorm:"column:read_only_count" json:"read_only_count"`			
ActiveReadWriteCount	int64	`gorm:"column:active_read_write_count" json:"active_read_write_count"`			
ActiveMemstoreVersion	string	`gorm:"column:active_memstore_version" json:"active_memstore_version"`			
TotalCtxCount	int64	`gorm:"column:total_ctx_count" json:"total_ctx_count"`			
WithDepTransCount	int64	`gorm:"column:with_dep_trans_count" json:"with_dep_trans_count"`			
WithoutDepTransCount	int64	`gorm:"column:without_dep_trans_count" json:"without_dep_trans_count"`			
EndtransByPrevCount	int64	`gorm:"column:endtrans_by_prev_count" json:"endtrans_by_prev_count"`			
EndtransByCheckpointCount	int64	`gorm:"column:endtrans_by_checkpoint_count" json:"endtrans_by_checkpoint_count"`			
EndtransBySelfCount	int64	`gorm:"column:endtrans_by_self_count" json:"endtrans_by_self_count"`			
MgrAddr	int64	`gorm:"column:mgr_addr" json:"mgr_addr"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTransMgrStat) TableName() string {
	return "__all_virtual_trans_mgr_stat"
}
	

// AllVirtualTransMgrStatColumns get sql column name.获取数据库列名
var AllVirtualTransMgrStatColumns = struct { 
	SvrIP string
	SvrPort string
	TableID string
	PartitionIDx string
	CtxType string
	IsMaster string
	IsFrozen string
	IsStopped string
	ReadOnlyCount string
	ActiveReadWriteCount string
	ActiveMemstoreVersion string
	TotalCtxCount string
	WithDepTransCount string
	WithoutDepTransCount string
	EndtransByPrevCount string
	EndtransByCheckpointCount string
	EndtransBySelfCount string
	MgrAddr string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TableID:"table_id",  
		PartitionIDx:"partition_idx",  
		CtxType:"ctx_type",  
		IsMaster:"is_master",  
		IsFrozen:"is_frozen",  
		IsStopped:"is_stopped",  
		ReadOnlyCount:"read_only_count",  
		ActiveReadWriteCount:"active_read_write_count",  
		ActiveMemstoreVersion:"active_memstore_version",  
		TotalCtxCount:"total_ctx_count",  
		WithDepTransCount:"with_dep_trans_count",  
		WithoutDepTransCount:"without_dep_trans_count",  
		EndtransByPrevCount:"endtrans_by_prev_count",  
		EndtransByCheckpointCount:"endtrans_by_checkpoint_count",  
		EndtransBySelfCount:"endtrans_by_self_count",  
		MgrAddr:"mgr_addr",             
	}
	
// AllVirtualTransResultInfoStat [...]		
type	AllVirtualTransResultInfoStat	struct {		
TransID	string	`gorm:"column:trans_id" json:"trans_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Partition	string	`gorm:"column:partition" json:"partition"`			
State	int64	`gorm:"column:state" json:"state"`			
CommitVersion	int64	`gorm:"column:commit_version" json:"commit_version"`			
MinLogID	int64	`gorm:"column:min_log_id" json:"min_log_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTransResultInfoStat) TableName() string {
	return "__all_virtual_trans_result_info_stat"
}
	

// AllVirtualTransResultInfoStatColumns get sql column name.获取数据库列名
var AllVirtualTransResultInfoStatColumns = struct { 
	TransID string
	SvrIP string
	SvrPort string
	Partition string
	State string
	CommitVersion string
	MinLogID string    
	}{ 
		TransID:"trans_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Partition:"partition",  
		State:"state",  
		CommitVersion:"commit_version",  
		MinLogID:"min_log_id",             
	}
	
// AllVirtualTransSQLAudit [...]		
type	AllVirtualTransSQLAudit	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TransID	string	`gorm:"column:trans_id" json:"trans_id"`			
Pkey	string	`gorm:"column:pkey" json:"pkey"`			
SQLNo	int64	`gorm:"column:sql_no" json:"sql_no"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
PhyPlanType	int64	`gorm:"column:phy_plan_type" json:"phy_plan_type"`			
ProxyReceiveUs	int64	`gorm:"column:proxy_receive_us" json:"proxy_receive_us"`			
ServerReceiveUs	int64	`gorm:"column:server_receive_us" json:"server_receive_us"`			
TransReceiveUs	int64	`gorm:"column:trans_receive_us" json:"trans_receive_us"`			
TransExecuteUs	int64	`gorm:"column:trans_execute_us" json:"trans_execute_us"`			
LockForReadCnt	int64	`gorm:"column:lock_for_read_cnt" json:"lock_for_read_cnt"`			
CtxAddr	int64	`gorm:"column:ctx_addr" json:"ctx_addr"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTransSQLAudit) TableName() string {
	return "__all_virtual_trans_sql_audit"
}
	

// AllVirtualTransSQLAuditColumns get sql column name.获取数据库列名
var AllVirtualTransSQLAuditColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	TransID string
	Pkey string
	SQLNo string
	TraceID string
	PhyPlanType string
	ProxyReceiveUs string
	ServerReceiveUs string
	TransReceiveUs string
	TransExecuteUs string
	LockForReadCnt string
	CtxAddr string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TransID:"trans_id",  
		Pkey:"pkey",  
		SQLNo:"sql_no",  
		TraceID:"trace_id",  
		PhyPlanType:"phy_plan_type",  
		ProxyReceiveUs:"proxy_receive_us",  
		ServerReceiveUs:"server_receive_us",  
		TransReceiveUs:"trans_receive_us",  
		TransExecuteUs:"trans_execute_us",  
		LockForReadCnt:"lock_for_read_cnt",  
		CtxAddr:"ctx_addr",             
	}
	
// AllVirtualTransStat [...]		
type	AllVirtualTransStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
IncNum	int64	`gorm:"column:inc_num" json:"inc_num"`			
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
ProxyID	string	`gorm:"column:proxy_id" json:"proxy_id"`			
TransType	int64	`gorm:"column:trans_type" json:"trans_type"`			
TransID	string	`gorm:"column:trans_id" json:"trans_id"`			
IsExiting	int64	`gorm:"column:is_exiting" json:"is_exiting"`			
IsReadonly	int64	`gorm:"column:is_readonly" json:"is_readonly"`			
IsDecided	int64	`gorm:"column:is_decided" json:"is_decided"`			
TransMode	string	`gorm:"column:trans_mode" json:"trans_mode"`			
ActiveMemstoreVersion	string	`gorm:"column:active_memstore_version" json:"active_memstore_version"`			
Partition	string	`gorm:"column:partition" json:"partition"`			
Participants	string	`gorm:"column:participants" json:"participants"`			
Autocommit	int64	`gorm:"column:autocommit" json:"autocommit"`			
TransConsistency	int64	`gorm:"column:trans_consistency" json:"trans_consistency"`			
CtxCreateTime	time.Time	`gorm:"column:ctx_create_time" json:"ctx_create_time"`			
ExpiredTime	time.Time	`gorm:"column:expired_time" json:"expired_time"`			
Refer	int64	`gorm:"column:refer" json:"refer"`			
SQLNo	int64	`gorm:"column:sql_no" json:"sql_no"`			
State	int64	`gorm:"column:state" json:"state"`			
PartTransAction	int64	`gorm:"column:part_trans_action" json:"part_trans_action"`			
LockForReadRetryCount	int64	`gorm:"column:lock_for_read_retry_count" json:"lock_for_read_retry_count"`			
CtxAddr	int64	`gorm:"column:ctx_addr" json:"ctx_addr"`			
PrevTransArr	string	`gorm:"column:prev_trans_arr" json:"prev_trans_arr"`			
PrevTransCount	int64	`gorm:"column:prev_trans_count" json:"prev_trans_count"`			
NextTransArr	string	`gorm:"column:next_trans_arr" json:"next_trans_arr"`			
NextTransCount	int64	`gorm:"column:next_trans_count" json:"next_trans_count"`			
PrevTransCommitCount	int64	`gorm:"column:prev_trans_commit_count" json:"prev_trans_commit_count"`			
CtxID	int64	`gorm:"column:ctx_id" json:"ctx_id"`			
PendingLogSize	int64	`gorm:"column:pending_log_size" json:"pending_log_size"`			
FlushedLogSize	int64	`gorm:"column:flushed_log_size" json:"flushed_log_size"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTransStat) TableName() string {
	return "__all_virtual_trans_stat"
}
	

// AllVirtualTransStatColumns get sql column name.获取数据库列名
var AllVirtualTransStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	IncNum string
	SessionID string
	ProxyID string
	TransType string
	TransID string
	IsExiting string
	IsReadonly string
	IsDecided string
	TransMode string
	ActiveMemstoreVersion string
	Partition string
	Participants string
	Autocommit string
	TransConsistency string
	CtxCreateTime string
	ExpiredTime string
	Refer string
	SQLNo string
	State string
	PartTransAction string
	LockForReadRetryCount string
	CtxAddr string
	PrevTransArr string
	PrevTransCount string
	NextTransArr string
	NextTransCount string
	PrevTransCommitCount string
	CtxID string
	PendingLogSize string
	FlushedLogSize string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		IncNum:"inc_num",  
		SessionID:"session_id",  
		ProxyID:"proxy_id",  
		TransType:"trans_type",  
		TransID:"trans_id",  
		IsExiting:"is_exiting",  
		IsReadonly:"is_readonly",  
		IsDecided:"is_decided",  
		TransMode:"trans_mode",  
		ActiveMemstoreVersion:"active_memstore_version",  
		Partition:"partition",  
		Participants:"participants",  
		Autocommit:"autocommit",  
		TransConsistency:"trans_consistency",  
		CtxCreateTime:"ctx_create_time",  
		ExpiredTime:"expired_time",  
		Refer:"refer",  
		SQLNo:"sql_no",  
		State:"state",  
		PartTransAction:"part_trans_action",  
		LockForReadRetryCount:"lock_for_read_retry_count",  
		CtxAddr:"ctx_addr",  
		PrevTransArr:"prev_trans_arr",  
		PrevTransCount:"prev_trans_count",  
		NextTransArr:"next_trans_arr",  
		NextTransCount:"next_trans_count",  
		PrevTransCommitCount:"prev_trans_commit_count",  
		CtxID:"ctx_id",  
		PendingLogSize:"pending_log_size",  
		FlushedLogSize:"flushed_log_size",             
	}
	
// AllVirtualTransTableStatus [...]		
type	AllVirtualTransTableStatus	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
EndLogID	int64	`gorm:"column:end_log_id" json:"end_log_id"`			
TransCnt	int64	`gorm:"column:trans_cnt" json:"trans_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTransTableStatus) TableName() string {
	return "__all_virtual_trans_table_status"
}
	

// AllVirtualTransTableStatusColumns get sql column name.获取数据库列名
var AllVirtualTransTableStatusColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	Zone string
	TableID string
	PartitionID string
	EndLogID string
	TransCnt string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Zone:"zone",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		EndLogID:"end_log_id",  
		TransCnt:"trans_cnt",             
	}
	
// AllVirtualTrigger [...]		
type	AllVirtualTrigger	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TriggerID	int64	`gorm:"primaryKey;column:trigger_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
TriggerName	string	`gorm:"column:trigger_name" json:"trigger_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
TriggerType	int64	`gorm:"column:trigger_type" json:"trigger_type"`			
TriggerEvents	int64	`gorm:"column:trigger_events" json:"trigger_events"`			
TimingPoints	int64	`gorm:"column:timing_points" json:"timing_points"`			
BaseObjectType	int64	`gorm:"column:base_object_type" json:"base_object_type"`			
BaseObjectID	int64	`gorm:"column:base_object_id" json:"base_object_id"`			
TriggerFlags	int64	`gorm:"column:trigger_flags" json:"trigger_flags"`			
UpdateColumns	string	`gorm:"column:update_columns" json:"update_columns"`			
RefOldName	string	`gorm:"column:ref_old_name" json:"ref_old_name"`			
RefNewName	string	`gorm:"column:ref_new_name" json:"ref_new_name"`			
RefParentName	string	`gorm:"column:ref_parent_name" json:"ref_parent_name"`			
WhenCondition	string	`gorm:"column:when_condition" json:"when_condition"`			
TriggerBody	string	`gorm:"column:trigger_body" json:"trigger_body"`			
PackageSpecSource	string	`gorm:"column:package_spec_source" json:"package_spec_source"`			
PackageBodySource	string	`gorm:"column:package_body_source" json:"package_body_source"`			
PackageFlag	int64	`gorm:"column:package_flag" json:"package_flag"`			
PackageCompFlag	int64	`gorm:"column:package_comp_flag" json:"package_comp_flag"`			
PackageExecEnv	string	`gorm:"column:package_exec_env" json:"package_exec_env"`			
SQLMode	int64	`gorm:"column:sql_mode" json:"sql_mode"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTrigger) TableName() string {
	return "__all_virtual_trigger"
}
	

// AllVirtualTriggerColumns get sql column name.获取数据库列名
var AllVirtualTriggerColumns = struct { 
	TenantID string
	TriggerID string
	GmtCreate string
	GmtModified string
	TriggerName string
	DatabaseID string
	OwnerID string
	SchemaVersion string
	TriggerType string
	TriggerEvents string
	TimingPoints string
	BaseObjectType string
	BaseObjectID string
	TriggerFlags string
	UpdateColumns string
	RefOldName string
	RefNewName string
	RefParentName string
	WhenCondition string
	TriggerBody string
	PackageSpecSource string
	PackageBodySource string
	PackageFlag string
	PackageCompFlag string
	PackageExecEnv string
	SQLMode string    
	}{ 
		TenantID:"tenant_id",  
		TriggerID:"trigger_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		TriggerName:"trigger_name",  
		DatabaseID:"database_id",  
		OwnerID:"owner_id",  
		SchemaVersion:"schema_version",  
		TriggerType:"trigger_type",  
		TriggerEvents:"trigger_events",  
		TimingPoints:"timing_points",  
		BaseObjectType:"base_object_type",  
		BaseObjectID:"base_object_id",  
		TriggerFlags:"trigger_flags",  
		UpdateColumns:"update_columns",  
		RefOldName:"ref_old_name",  
		RefNewName:"ref_new_name",  
		RefParentName:"ref_parent_name",  
		WhenCondition:"when_condition",  
		TriggerBody:"trigger_body",  
		PackageSpecSource:"package_spec_source",  
		PackageBodySource:"package_body_source",  
		PackageFlag:"package_flag",  
		PackageCompFlag:"package_comp_flag",  
		PackageExecEnv:"package_exec_env",  
		SQLMode:"sql_mode",             
	}
	
// AllVirtualTriggerHistory [...]		
type	AllVirtualTriggerHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TriggerID	int64	`gorm:"primaryKey;column:trigger_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TriggerName	string	`gorm:"column:trigger_name" json:"trigger_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
OwnerID	int64	`gorm:"column:owner_id" json:"owner_id"`			
TriggerType	int64	`gorm:"column:trigger_type" json:"trigger_type"`			
TriggerEvents	int64	`gorm:"column:trigger_events" json:"trigger_events"`			
TimingPoints	int64	`gorm:"column:timing_points" json:"timing_points"`			
BaseObjectType	int64	`gorm:"column:base_object_type" json:"base_object_type"`			
BaseObjectID	int64	`gorm:"column:base_object_id" json:"base_object_id"`			
TriggerFlags	int64	`gorm:"column:trigger_flags" json:"trigger_flags"`			
UpdateColumns	string	`gorm:"column:update_columns" json:"update_columns"`			
RefOldName	string	`gorm:"column:ref_old_name" json:"ref_old_name"`			
RefNewName	string	`gorm:"column:ref_new_name" json:"ref_new_name"`			
RefParentName	string	`gorm:"column:ref_parent_name" json:"ref_parent_name"`			
WhenCondition	string	`gorm:"column:when_condition" json:"when_condition"`			
TriggerBody	string	`gorm:"column:trigger_body" json:"trigger_body"`			
PackageSpecSource	string	`gorm:"column:package_spec_source" json:"package_spec_source"`			
PackageBodySource	string	`gorm:"column:package_body_source" json:"package_body_source"`			
PackageFlag	int64	`gorm:"column:package_flag" json:"package_flag"`			
PackageCompFlag	int64	`gorm:"column:package_comp_flag" json:"package_comp_flag"`			
PackageExecEnv	string	`gorm:"column:package_exec_env" json:"package_exec_env"`			
SQLMode	int64	`gorm:"column:sql_mode" json:"sql_mode"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTriggerHistory) TableName() string {
	return "__all_virtual_trigger_history"
}
	

// AllVirtualTriggerHistoryColumns get sql column name.获取数据库列名
var AllVirtualTriggerHistoryColumns = struct { 
	TenantID string
	TriggerID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	TriggerName string
	DatabaseID string
	OwnerID string
	TriggerType string
	TriggerEvents string
	TimingPoints string
	BaseObjectType string
	BaseObjectID string
	TriggerFlags string
	UpdateColumns string
	RefOldName string
	RefNewName string
	RefParentName string
	WhenCondition string
	TriggerBody string
	PackageSpecSource string
	PackageBodySource string
	PackageFlag string
	PackageCompFlag string
	PackageExecEnv string
	SQLMode string    
	}{ 
		TenantID:"tenant_id",  
		TriggerID:"trigger_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		TriggerName:"trigger_name",  
		DatabaseID:"database_id",  
		OwnerID:"owner_id",  
		TriggerType:"trigger_type",  
		TriggerEvents:"trigger_events",  
		TimingPoints:"timing_points",  
		BaseObjectType:"base_object_type",  
		BaseObjectID:"base_object_id",  
		TriggerFlags:"trigger_flags",  
		UpdateColumns:"update_columns",  
		RefOldName:"ref_old_name",  
		RefNewName:"ref_new_name",  
		RefParentName:"ref_parent_name",  
		WhenCondition:"when_condition",  
		TriggerBody:"trigger_body",  
		PackageSpecSource:"package_spec_source",  
		PackageBodySource:"package_body_source",  
		PackageFlag:"package_flag",  
		PackageCompFlag:"package_comp_flag",  
		PackageExecEnv:"package_exec_env",  
		SQLMode:"sql_mode",             
	}
	
// AllVirtualType [...]		
type	AllVirtualType	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TypeID	int64	`gorm:"primaryKey;column:type_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
Typecode	int64	`gorm:"column:typecode" json:"typecode"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
Attributes	int64	`gorm:"column:attributes" json:"attributes"`			
Methods	int64	`gorm:"column:methods" json:"methods"`			
Hiddenmethods	int64	`gorm:"column:hiddenmethods" json:"hiddenmethods"`			
Supertypes	int64	`gorm:"column:supertypes" json:"supertypes"`			
Subtypes	int64	`gorm:"column:subtypes" json:"subtypes"`			
Externtype	int64	`gorm:"column:externtype" json:"externtype"`			
Externname	string	`gorm:"column:externname" json:"externname"`			
Helperclassname	string	`gorm:"column:helperclassname" json:"helperclassname"`			
LocalAttrs	int64	`gorm:"column:local_attrs" json:"local_attrs"`			
LocalMethods	int64	`gorm:"column:local_methods" json:"local_methods"`			
Supertypeid	int64	`gorm:"column:supertypeid" json:"supertypeid"`			
TypeName	string	`gorm:"column:type_name" json:"type_name"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualType) TableName() string {
	return "__all_virtual_type"
}
	

// AllVirtualTypeColumns get sql column name.获取数据库列名
var AllVirtualTypeColumns = struct { 
	TenantID string
	TypeID string
	GmtCreate string
	GmtModified string
	DatabaseID string
	SchemaVersion string
	Typecode string
	Properties string
	Attributes string
	Methods string
	Hiddenmethods string
	Supertypes string
	Subtypes string
	Externtype string
	Externname string
	Helperclassname string
	LocalAttrs string
	LocalMethods string
	Supertypeid string
	TypeName string
	PackageID string    
	}{ 
		TenantID:"tenant_id",  
		TypeID:"type_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		DatabaseID:"database_id",  
		SchemaVersion:"schema_version",  
		Typecode:"typecode",  
		Properties:"properties",  
		Attributes:"attributes",  
		Methods:"methods",  
		Hiddenmethods:"hiddenmethods",  
		Supertypes:"supertypes",  
		Subtypes:"subtypes",  
		Externtype:"externtype",  
		Externname:"externname",  
		Helperclassname:"helperclassname",  
		LocalAttrs:"local_attrs",  
		LocalMethods:"local_methods",  
		Supertypeid:"supertypeid",  
		TypeName:"type_name",  
		PackageID:"package_id",             
	}
	
// AllVirtualTypeAttr [...]		
type	AllVirtualTypeAttr	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TypeID	int64	`gorm:"primaryKey;column:type_id" json:"-"`			
Attribute	int64	`gorm:"primaryKey;column:attribute" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
TypeAttrID	int64	`gorm:"column:type_attr_id" json:"type_attr_id"`			
Name	string	`gorm:"column:name" json:"name"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
Externname	string	`gorm:"column:externname" json:"externname"`			
Xflags	int64	`gorm:"column:xflags" json:"xflags"`			
Setter	int64	`gorm:"column:setter" json:"setter"`			
Getter	int64	`gorm:"column:getter" json:"getter"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTypeAttr) TableName() string {
	return "__all_virtual_type_attr"
}
	

// AllVirtualTypeAttrColumns get sql column name.获取数据库列名
var AllVirtualTypeAttrColumns = struct { 
	TenantID string
	TypeID string
	Attribute string
	GmtCreate string
	GmtModified string
	SchemaVersion string
	TypeAttrID string
	Name string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	Externname string
	Xflags string
	Setter string
	Getter string    
	}{ 
		TenantID:"tenant_id",  
		TypeID:"type_id",  
		Attribute:"attribute",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SchemaVersion:"schema_version",  
		TypeAttrID:"type_attr_id",  
		Name:"name",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		Externname:"externname",  
		Xflags:"xflags",  
		Setter:"setter",  
		Getter:"getter",             
	}
	
// AllVirtualTypeAttrHistory [...]		
type	AllVirtualTypeAttrHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TypeID	int64	`gorm:"primaryKey;column:type_id" json:"-"`			
Attribute	int64	`gorm:"primaryKey;column:attribute" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
TypeAttrID	int64	`gorm:"column:type_attr_id" json:"type_attr_id"`			
Name	string	`gorm:"column:name" json:"name"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
CharsetID	int64	`gorm:"column:charset_id" json:"charset_id"`			
CharsetForm	int64	`gorm:"column:charset_form" json:"charset_form"`			
Length	int64	`gorm:"column:length" json:"length"`			
NumberPrecision	int64	`gorm:"column:number_precision" json:"number_precision"`			
Scale	int64	`gorm:"column:scale" json:"scale"`			
ZeroFill	int64	`gorm:"column:zero_fill" json:"zero_fill"`			
CollType	int64	`gorm:"column:coll_type" json:"coll_type"`			
Externname	string	`gorm:"column:externname" json:"externname"`			
Xflags	int64	`gorm:"column:xflags" json:"xflags"`			
Setter	int64	`gorm:"column:setter" json:"setter"`			
Getter	int64	`gorm:"column:getter" json:"getter"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTypeAttrHistory) TableName() string {
	return "__all_virtual_type_attr_history"
}
	

// AllVirtualTypeAttrHistoryColumns get sql column name.获取数据库列名
var AllVirtualTypeAttrHistoryColumns = struct { 
	TenantID string
	TypeID string
	Attribute string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	TypeAttrID string
	Name string
	Properties string
	CharsetID string
	CharsetForm string
	Length string
	NumberPrecision string
	Scale string
	ZeroFill string
	CollType string
	Externname string
	Xflags string
	Setter string
	Getter string    
	}{ 
		TenantID:"tenant_id",  
		TypeID:"type_id",  
		Attribute:"attribute",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		TypeAttrID:"type_attr_id",  
		Name:"name",  
		Properties:"properties",  
		CharsetID:"charset_id",  
		CharsetForm:"charset_form",  
		Length:"length",  
		NumberPrecision:"number_precision",  
		Scale:"scale",  
		ZeroFill:"zero_fill",  
		CollType:"coll_type",  
		Externname:"externname",  
		Xflags:"xflags",  
		Setter:"setter",  
		Getter:"getter",             
	}
	
// AllVirtualTypeHistory [...]		
type	AllVirtualTypeHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TypeID	int64	`gorm:"primaryKey;column:type_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
Typecode	int64	`gorm:"column:typecode" json:"typecode"`			
Properties	int64	`gorm:"column:properties" json:"properties"`			
Attributes	int64	`gorm:"column:attributes" json:"attributes"`			
Methods	int64	`gorm:"column:methods" json:"methods"`			
Hiddenmethods	int64	`gorm:"column:hiddenmethods" json:"hiddenmethods"`			
Supertypes	int64	`gorm:"column:supertypes" json:"supertypes"`			
Subtypes	int64	`gorm:"column:subtypes" json:"subtypes"`			
Externtype	int64	`gorm:"column:externtype" json:"externtype"`			
Externname	string	`gorm:"column:externname" json:"externname"`			
Helperclassname	string	`gorm:"column:helperclassname" json:"helperclassname"`			
LocalAttrs	int64	`gorm:"column:local_attrs" json:"local_attrs"`			
LocalMethods	int64	`gorm:"column:local_methods" json:"local_methods"`			
Supertypeid	int64	`gorm:"column:supertypeid" json:"supertypeid"`			
TypeName	string	`gorm:"column:type_name" json:"type_name"`			
PackageID	int64	`gorm:"column:package_id" json:"package_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualTypeHistory) TableName() string {
	return "__all_virtual_type_history"
}
	

// AllVirtualTypeHistoryColumns get sql column name.获取数据库列名
var AllVirtualTypeHistoryColumns = struct { 
	TenantID string
	TypeID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	DatabaseID string
	Typecode string
	Properties string
	Attributes string
	Methods string
	Hiddenmethods string
	Supertypes string
	Subtypes string
	Externtype string
	Externname string
	Helperclassname string
	LocalAttrs string
	LocalMethods string
	Supertypeid string
	TypeName string
	PackageID string    
	}{ 
		TenantID:"tenant_id",  
		TypeID:"type_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		DatabaseID:"database_id",  
		Typecode:"typecode",  
		Properties:"properties",  
		Attributes:"attributes",  
		Methods:"methods",  
		Hiddenmethods:"hiddenmethods",  
		Supertypes:"supertypes",  
		Subtypes:"subtypes",  
		Externtype:"externtype",  
		Externname:"externname",  
		Helperclassname:"helperclassname",  
		LocalAttrs:"local_attrs",  
		LocalMethods:"local_methods",  
		Supertypeid:"supertypeid",  
		TypeName:"type_name",  
		PackageID:"package_id",             
	}
	
// AllVirtualUpgradeInspection [...]		
type	AllVirtualUpgradeInspection	struct {		
Name	string	`gorm:"column:name" json:"name"`			
Info	string	`gorm:"column:info" json:"info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualUpgradeInspection) TableName() string {
	return "__all_virtual_upgrade_inspection"
}
	

// AllVirtualUpgradeInspectionColumns get sql column name.获取数据库列名
var AllVirtualUpgradeInspectionColumns = struct { 
	Name string
	Info string    
	}{ 
		Name:"name",  
		Info:"info",             
	}
	
// AllVirtualUser [...]		
type	AllVirtualUser	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
Host	string	`gorm:"column:host" json:"host"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
Info	string	`gorm:"column:info" json:"info"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
PrivShowDb	int64	`gorm:"column:priv_show_db" json:"priv_show_db"`			
PrivCreateUser	int64	`gorm:"column:priv_create_user" json:"priv_create_user"`			
PrivSuper	int64	`gorm:"column:priv_super" json:"priv_super"`			
IsLocked	int64	`gorm:"column:is_locked" json:"is_locked"`			
PrivProcess	int64	`gorm:"column:priv_process" json:"priv_process"`			
PrivCreateSynonym	int64	`gorm:"column:priv_create_synonym" json:"priv_create_synonym"`			
SslType	int64	`gorm:"column:ssl_type" json:"ssl_type"`			
SslCipher	string	`gorm:"column:ssl_cipher" json:"ssl_cipher"`			
X509Issuer	string	`gorm:"column:x509_issuer" json:"x509_issuer"`			
X509Subject	string	`gorm:"column:x509_subject" json:"x509_subject"`			
Type	int64	`gorm:"column:type" json:"type"`			
ProfileID	int64	`gorm:"column:profile_id" json:"profile_id"`			
PasswordLastChanged	time.Time	`gorm:"column:password_last_changed" json:"password_last_changed"`			
PrivFile	int64	`gorm:"column:priv_file" json:"priv_file"`			
PrivAlterTenant	int64	`gorm:"column:priv_alter_tenant" json:"priv_alter_tenant"`			
PrivAlterSystem	int64	`gorm:"column:priv_alter_system" json:"priv_alter_system"`			
PrivCreateResourcePool	int64	`gorm:"column:priv_create_resource_pool" json:"priv_create_resource_pool"`			
PrivCreateResourceUnit	int64	`gorm:"column:priv_create_resource_unit" json:"priv_create_resource_unit"`			
MaxConnections	int64	`gorm:"column:max_connections" json:"max_connections"`			
MaxUserConnections	int64	`gorm:"column:max_user_connections" json:"max_user_connections"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualUser) TableName() string {
	return "__all_virtual_user"
}
	

// AllVirtualUserColumns get sql column name.获取数据库列名
var AllVirtualUserColumns = struct { 
	TenantID string
	UserID string
	GmtCreate string
	GmtModified string
	UserName string
	Host string
	Passwd string
	Info string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string
	PrivShowDb string
	PrivCreateUser string
	PrivSuper string
	IsLocked string
	PrivProcess string
	PrivCreateSynonym string
	SslType string
	SslCipher string
	X509Issuer string
	X509Subject string
	Type string
	ProfileID string
	PasswordLastChanged string
	PrivFile string
	PrivAlterTenant string
	PrivAlterSystem string
	PrivCreateResourcePool string
	PrivCreateResourceUnit string
	MaxConnections string
	MaxUserConnections string    
	}{ 
		TenantID:"tenant_id",  
		UserID:"user_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		UserName:"user_name",  
		Host:"host",  
		Passwd:"passwd",  
		Info:"info",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",  
		PrivShowDb:"priv_show_db",  
		PrivCreateUser:"priv_create_user",  
		PrivSuper:"priv_super",  
		IsLocked:"is_locked",  
		PrivProcess:"priv_process",  
		PrivCreateSynonym:"priv_create_synonym",  
		SslType:"ssl_type",  
		SslCipher:"ssl_cipher",  
		X509Issuer:"x509_issuer",  
		X509Subject:"x509_subject",  
		Type:"type",  
		ProfileID:"profile_id",  
		PasswordLastChanged:"password_last_changed",  
		PrivFile:"priv_file",  
		PrivAlterTenant:"priv_alter_tenant",  
		PrivAlterSystem:"priv_alter_system",  
		PrivCreateResourcePool:"priv_create_resource_pool",  
		PrivCreateResourceUnit:"priv_create_resource_unit",  
		MaxConnections:"max_connections",  
		MaxUserConnections:"max_user_connections",             
	}
	
// AllVirtualUserHistory [...]		
type	AllVirtualUserHistory	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
SchemaVersion	int64	`gorm:"primaryKey;column:schema_version" json:"-"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
IsDeleted	int64	`gorm:"column:is_deleted" json:"is_deleted"`			
UserName	string	`gorm:"column:user_name" json:"user_name"`			
Host	string	`gorm:"column:host" json:"host"`			
Passwd	string	`gorm:"column:passwd" json:"passwd"`			
Info	string	`gorm:"column:info" json:"info"`			
PrivAlter	int64	`gorm:"column:priv_alter" json:"priv_alter"`			
PrivCreate	int64	`gorm:"column:priv_create" json:"priv_create"`			
PrivDelete	int64	`gorm:"column:priv_delete" json:"priv_delete"`			
PrivDrop	int64	`gorm:"column:priv_drop" json:"priv_drop"`			
PrivGrantOption	int64	`gorm:"column:priv_grant_option" json:"priv_grant_option"`			
PrivInsert	int64	`gorm:"column:priv_insert" json:"priv_insert"`			
PrivUpdate	int64	`gorm:"column:priv_update" json:"priv_update"`			
PrivSelect	int64	`gorm:"column:priv_select" json:"priv_select"`			
PrivIndex	int64	`gorm:"column:priv_index" json:"priv_index"`			
PrivCreateView	int64	`gorm:"column:priv_create_view" json:"priv_create_view"`			
PrivShowView	int64	`gorm:"column:priv_show_view" json:"priv_show_view"`			
PrivShowDb	int64	`gorm:"column:priv_show_db" json:"priv_show_db"`			
PrivCreateUser	int64	`gorm:"column:priv_create_user" json:"priv_create_user"`			
PrivSuper	int64	`gorm:"column:priv_super" json:"priv_super"`			
IsLocked	int64	`gorm:"column:is_locked" json:"is_locked"`			
PrivProcess	int64	`gorm:"column:priv_process" json:"priv_process"`			
PrivCreateSynonym	int64	`gorm:"column:priv_create_synonym" json:"priv_create_synonym"`			
SslType	int64	`gorm:"column:ssl_type" json:"ssl_type"`			
SslCipher	string	`gorm:"column:ssl_cipher" json:"ssl_cipher"`			
X509Issuer	string	`gorm:"column:x509_issuer" json:"x509_issuer"`			
X509Subject	string	`gorm:"column:x509_subject" json:"x509_subject"`			
Type	int64	`gorm:"column:type" json:"type"`			
ProfileID	int64	`gorm:"column:profile_id" json:"profile_id"`			
PasswordLastChanged	time.Time	`gorm:"column:password_last_changed" json:"password_last_changed"`			
PrivFile	int64	`gorm:"column:priv_file" json:"priv_file"`			
PrivAlterTenant	int64	`gorm:"column:priv_alter_tenant" json:"priv_alter_tenant"`			
PrivAlterSystem	int64	`gorm:"column:priv_alter_system" json:"priv_alter_system"`			
PrivCreateResourcePool	int64	`gorm:"column:priv_create_resource_pool" json:"priv_create_resource_pool"`			
PrivCreateResourceUnit	int64	`gorm:"column:priv_create_resource_unit" json:"priv_create_resource_unit"`			
MaxConnections	int64	`gorm:"column:max_connections" json:"max_connections"`			
MaxUserConnections	int64	`gorm:"column:max_user_connections" json:"max_user_connections"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualUserHistory) TableName() string {
	return "__all_virtual_user_history"
}
	

// AllVirtualUserHistoryColumns get sql column name.获取数据库列名
var AllVirtualUserHistoryColumns = struct { 
	TenantID string
	UserID string
	SchemaVersion string
	GmtCreate string
	GmtModified string
	IsDeleted string
	UserName string
	Host string
	Passwd string
	Info string
	PrivAlter string
	PrivCreate string
	PrivDelete string
	PrivDrop string
	PrivGrantOption string
	PrivInsert string
	PrivUpdate string
	PrivSelect string
	PrivIndex string
	PrivCreateView string
	PrivShowView string
	PrivShowDb string
	PrivCreateUser string
	PrivSuper string
	IsLocked string
	PrivProcess string
	PrivCreateSynonym string
	SslType string
	SslCipher string
	X509Issuer string
	X509Subject string
	Type string
	ProfileID string
	PasswordLastChanged string
	PrivFile string
	PrivAlterTenant string
	PrivAlterSystem string
	PrivCreateResourcePool string
	PrivCreateResourceUnit string
	MaxConnections string
	MaxUserConnections string    
	}{ 
		TenantID:"tenant_id",  
		UserID:"user_id",  
		SchemaVersion:"schema_version",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		IsDeleted:"is_deleted",  
		UserName:"user_name",  
		Host:"host",  
		Passwd:"passwd",  
		Info:"info",  
		PrivAlter:"priv_alter",  
		PrivCreate:"priv_create",  
		PrivDelete:"priv_delete",  
		PrivDrop:"priv_drop",  
		PrivGrantOption:"priv_grant_option",  
		PrivInsert:"priv_insert",  
		PrivUpdate:"priv_update",  
		PrivSelect:"priv_select",  
		PrivIndex:"priv_index",  
		PrivCreateView:"priv_create_view",  
		PrivShowView:"priv_show_view",  
		PrivShowDb:"priv_show_db",  
		PrivCreateUser:"priv_create_user",  
		PrivSuper:"priv_super",  
		IsLocked:"is_locked",  
		PrivProcess:"priv_process",  
		PrivCreateSynonym:"priv_create_synonym",  
		SslType:"ssl_type",  
		SslCipher:"ssl_cipher",  
		X509Issuer:"x509_issuer",  
		X509Subject:"x509_subject",  
		Type:"type",  
		ProfileID:"profile_id",  
		PasswordLastChanged:"password_last_changed",  
		PrivFile:"priv_file",  
		PrivAlterTenant:"priv_alter_tenant",  
		PrivAlterSystem:"priv_alter_system",  
		PrivCreateResourcePool:"priv_create_resource_pool",  
		PrivCreateResourceUnit:"priv_create_resource_unit",  
		MaxConnections:"max_connections",  
		MaxUserConnections:"max_user_connections",             
	}
	
// AllVirtualWeakReadStat [...]		
type	AllVirtualWeakReadStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
ServerVersion	int64	`gorm:"column:server_version" json:"server_version"`			
ServerVersionDelta	int64	`gorm:"column:server_version_delta" json:"server_version_delta"`			
LocalClusterVersion	int64	`gorm:"column:local_cluster_version" json:"local_cluster_version"`			
LocalClusterVersionDelta	int64	`gorm:"column:local_cluster_version_delta" json:"local_cluster_version_delta"`			
TotalPartCount	int64	`gorm:"column:total_part_count" json:"total_part_count"`			
ValidInnerPartCount	int64	`gorm:"column:valid_inner_part_count" json:"valid_inner_part_count"`			
ValidUserPartCount	int64	`gorm:"column:valid_user_part_count" json:"valid_user_part_count"`			
ClusterMasterIP	string	`gorm:"column:cluster_master_ip" json:"cluster_master_ip"`			
ClusterMasterPort	int64	`gorm:"column:cluster_master_port" json:"cluster_master_port"`			
ClusterHeartbeatPostTstamp	int64	`gorm:"column:cluster_heartbeat_post_tstamp" json:"cluster_heartbeat_post_tstamp"`			
ClusterHeartbeatPostCount	int64	`gorm:"column:cluster_heartbeat_post_count" json:"cluster_heartbeat_post_count"`			
ClusterHeartbeatSuccTstamp	int64	`gorm:"column:cluster_heartbeat_succ_tstamp" json:"cluster_heartbeat_succ_tstamp"`			
ClusterHeartbeatSuccCount	int64	`gorm:"column:cluster_heartbeat_succ_count" json:"cluster_heartbeat_succ_count"`			
SelfCheckTstamp	int64	`gorm:"column:self_check_tstamp" json:"self_check_tstamp"`			
LocalCurrentTstamp	int64	`gorm:"column:local_current_tstamp" json:"local_current_tstamp"`			
InClusterService	int64	`gorm:"column:in_cluster_service" json:"in_cluster_service"`			
IsClusterServiceMaster	int64	`gorm:"column:is_cluster_service_master" json:"is_cluster_service_master"`			
ClusterServiceEpoch	int64	`gorm:"column:cluster_service_epoch" json:"cluster_service_epoch"`			
ClusterTotalServerCount	int64	`gorm:"column:cluster_total_server_count" json:"cluster_total_server_count"`			
ClusterSkippedServerCount	int64	`gorm:"column:cluster_skipped_server_count" json:"cluster_skipped_server_count"`			
ClusterVersionGenTstamp	int64	`gorm:"column:cluster_version_gen_tstamp" json:"cluster_version_gen_tstamp"`			
ClusterVersion	int64	`gorm:"column:cluster_version" json:"cluster_version"`			
ClusterVersionDelta	int64	`gorm:"column:cluster_version_delta" json:"cluster_version_delta"`			
MinClusterVersion	int64	`gorm:"column:min_cluster_version" json:"min_cluster_version"`			
MaxClusterVersion	int64	`gorm:"column:max_cluster_version" json:"max_cluster_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualWeakReadStat) TableName() string {
	return "__all_virtual_weak_read_stat"
}
	

// AllVirtualWeakReadStatColumns get sql column name.获取数据库列名
var AllVirtualWeakReadStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	ServerVersion string
	ServerVersionDelta string
	LocalClusterVersion string
	LocalClusterVersionDelta string
	TotalPartCount string
	ValidInnerPartCount string
	ValidUserPartCount string
	ClusterMasterIP string
	ClusterMasterPort string
	ClusterHeartbeatPostTstamp string
	ClusterHeartbeatPostCount string
	ClusterHeartbeatSuccTstamp string
	ClusterHeartbeatSuccCount string
	SelfCheckTstamp string
	LocalCurrentTstamp string
	InClusterService string
	IsClusterServiceMaster string
	ClusterServiceEpoch string
	ClusterTotalServerCount string
	ClusterSkippedServerCount string
	ClusterVersionGenTstamp string
	ClusterVersion string
	ClusterVersionDelta string
	MinClusterVersion string
	MaxClusterVersion string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ServerVersion:"server_version",  
		ServerVersionDelta:"server_version_delta",  
		LocalClusterVersion:"local_cluster_version",  
		LocalClusterVersionDelta:"local_cluster_version_delta",  
		TotalPartCount:"total_part_count",  
		ValidInnerPartCount:"valid_inner_part_count",  
		ValidUserPartCount:"valid_user_part_count",  
		ClusterMasterIP:"cluster_master_ip",  
		ClusterMasterPort:"cluster_master_port",  
		ClusterHeartbeatPostTstamp:"cluster_heartbeat_post_tstamp",  
		ClusterHeartbeatPostCount:"cluster_heartbeat_post_count",  
		ClusterHeartbeatSuccTstamp:"cluster_heartbeat_succ_tstamp",  
		ClusterHeartbeatSuccCount:"cluster_heartbeat_succ_count",  
		SelfCheckTstamp:"self_check_tstamp",  
		LocalCurrentTstamp:"local_current_tstamp",  
		InClusterService:"in_cluster_service",  
		IsClusterServiceMaster:"is_cluster_service_master",  
		ClusterServiceEpoch:"cluster_service_epoch",  
		ClusterTotalServerCount:"cluster_total_server_count",  
		ClusterSkippedServerCount:"cluster_skipped_server_count",  
		ClusterVersionGenTstamp:"cluster_version_gen_tstamp",  
		ClusterVersion:"cluster_version",  
		ClusterVersionDelta:"cluster_version_delta",  
		MinClusterVersion:"min_cluster_version",  
		MaxClusterVersion:"max_cluster_version",             
	}
	
// AllVirtualZoneStat [...]		
type	AllVirtualZoneStat	struct {		
Zone	string	`gorm:"column:zone" json:"zone"`			
IsMerging	int64	`gorm:"column:is_merging" json:"is_merging"`			
Status	string	`gorm:"column:status" json:"status"`			
ServerCount	int64	`gorm:"column:server_count" json:"server_count"`			
ResourcePoolCount	int64	`gorm:"column:resource_pool_count" json:"resource_pool_count"`			
UnitCount	int64	`gorm:"column:unit_count" json:"unit_count"`			
Cluster	string	`gorm:"column:cluster" json:"cluster"`			
Region	string	`gorm:"column:region" json:"region"`			
Spare1	int64	`gorm:"column:spare1" json:"spare1"`			
Spare2	int64	`gorm:"column:spare2" json:"spare2"`			
Spare3	int64	`gorm:"column:spare3" json:"spare3"`			
Spare4	string	`gorm:"column:spare4" json:"spare4"`			
Spare5	string	`gorm:"column:spare5" json:"spare5"`			
Spare6	string	`gorm:"column:spare6" json:"spare6"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllVirtualZoneStat) TableName() string {
	return "__all_virtual_zone_stat"
}
	

// AllVirtualZoneStatColumns get sql column name.获取数据库列名
var AllVirtualZoneStatColumns = struct { 
	Zone string
	IsMerging string
	Status string
	ServerCount string
	ResourcePoolCount string
	UnitCount string
	Cluster string
	Region string
	Spare1 string
	Spare2 string
	Spare3 string
	Spare4 string
	Spare5 string
	Spare6 string    
	}{ 
		Zone:"zone",  
		IsMerging:"is_merging",  
		Status:"status",  
		ServerCount:"server_count",  
		ResourcePoolCount:"resource_pool_count",  
		UnitCount:"unit_count",  
		Cluster:"cluster",  
		Region:"region",  
		Spare1:"spare1",  
		Spare2:"spare2",  
		Spare3:"spare3",  
		Spare4:"spare4",  
		Spare5:"spare5",  
		Spare6:"spare6",             
	}
	
// AllWeakReadService [...]		
type	AllWeakReadService	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
LevelID	int64	`gorm:"primaryKey;column:level_id" json:"-"`			
LevelValue	string	`gorm:"primaryKey;column:level_value" json:"-"`			
LevelName	string	`gorm:"column:level_name" json:"level_name"`			
MinVersion	int64	`gorm:"column:min_version" json:"min_version"`			
MaxVersion	int64	`gorm:"column:max_version" json:"max_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllWeakReadService) TableName() string {
	return "__all_weak_read_service"
}
	

// AllWeakReadServiceColumns get sql column name.获取数据库列名
var AllWeakReadServiceColumns = struct { 
	GmtCreate string
	GmtModified string
	LevelID string
	LevelValue string
	LevelName string
	MinVersion string
	MaxVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		LevelID:"level_id",  
		LevelValue:"level_value",  
		LevelName:"level_name",  
		MinVersion:"min_version",  
		MaxVersion:"max_version",             
	}
	
// AllZone [...]		
type	AllZone	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
Value	int64	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *AllZone) TableName() string {
	return "__all_zone"
}
	

// AllZoneColumns get sql column name.获取数据库列名
var AllZoneColumns = struct { 
	GmtCreate string
	GmtModified string
	Zone string
	Name string
	Value string
	Info string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Zone:"zone",  
		Name:"name",  
		Value:"value",  
		Info:"info",             
	}
	
// TenantParameter [...]		
type	TenantParameter	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
Zone	string	`gorm:"primaryKey;column:zone" json:"-"`			
SvrType	string	`gorm:"primaryKey;column:svr_type" json:"-"`			
SvrIP	string	`gorm:"primaryKey;column:svr_ip" json:"-"`			
SvrPort	int64	`gorm:"primaryKey;column:svr_port" json:"-"`			
Name	string	`gorm:"primaryKey;column:name" json:"-"`			
DataType	string	`gorm:"column:data_type" json:"data_type"`			
Value	string	`gorm:"column:value" json:"value"`			
Info	string	`gorm:"column:info" json:"info"`			
Section	string	`gorm:"column:section" json:"section"`			
Scope	string	`gorm:"column:scope" json:"scope"`			
Source	string	`gorm:"column:source" json:"source"`			
EditLevel	string	`gorm:"column:edit_level" json:"edit_level"`			
ConfigVersion	int64	`gorm:"column:config_version" json:"config_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantParameter) TableName() string {
	return "__tenant_parameter"
}
	

// TenantParameterColumns get sql column name.获取数据库列名
var TenantParameterColumns = struct { 
	GmtCreate string
	GmtModified string
	Zone string
	SvrType string
	SvrIP string
	SvrPort string
	Name string
	DataType string
	Value string
	Info string
	Section string
	Scope string
	Source string
	EditLevel string
	ConfigVersion string    
	}{ 
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		Zone:"zone",  
		SvrType:"svr_type",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		Name:"name",  
		DataType:"data_type",  
		Value:"value",  
		Info:"info",  
		Section:"section",  
		Scope:"scope",  
		Source:"source",  
		EditLevel:"edit_level",  
		ConfigVersion:"config_version",             
	}
	
// TenantVirtualAllTable [...]		
type	TenantVirtualAllTable	struct {		
DatabaseID	int64	`gorm:"primaryKey;column:database_id" json:"-"`			
TableName	string	`gorm:"primaryKey;column:table_name" json:"-"`			
TableType	string	`gorm:"column:table_type" json:"table_type"`			
Engine	string	`gorm:"column:engine" json:"engine"`			
Version	int64	`gorm:"column:version" json:"version"`			
RowFormat	string	`gorm:"column:row_format" json:"row_format"`			
Rows	int64	`gorm:"column:rows" json:"rows"`			
AvgRowLength	int64	`gorm:"column:avg_row_length" json:"avg_row_length"`			
DataLength	int64	`gorm:"column:data_length" json:"data_length"`			
MaxDataLength	int64	`gorm:"column:max_data_length" json:"max_data_length"`			
IndexLength	int64	`gorm:"column:index_length" json:"index_length"`			
DataFree	int64	`gorm:"column:data_free" json:"data_free"`			
AutoIncrement	uint64	`gorm:"column:auto_increment" json:"auto_increment"`			
CreateTime	time.Time	`gorm:"column:create_time" json:"create_time"`			
UpdateTime	time.Time	`gorm:"column:update_time" json:"update_time"`			
CheckTime	time.Time	`gorm:"column:check_time" json:"check_time"`			
Collation	string	`gorm:"column:collation" json:"collation"`			
Checksum	int64	`gorm:"column:checksum" json:"checksum"`			
CreateOptions	string	`gorm:"column:create_options" json:"create_options"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualAllTable) TableName() string {
	return "__tenant_virtual_all_table"
}
	

// TenantVirtualAllTableColumns get sql column name.获取数据库列名
var TenantVirtualAllTableColumns = struct { 
	DatabaseID string
	TableName string
	TableType string
	Engine string
	Version string
	RowFormat string
	Rows string
	AvgRowLength string
	DataLength string
	MaxDataLength string
	IndexLength string
	DataFree string
	AutoIncrement string
	CreateTime string
	UpdateTime string
	CheckTime string
	Collation string
	Checksum string
	CreateOptions string
	Comment string    
	}{ 
		DatabaseID:"database_id",  
		TableName:"table_name",  
		TableType:"table_type",  
		Engine:"engine",  
		Version:"version",  
		RowFormat:"row_format",  
		Rows:"rows",  
		AvgRowLength:"avg_row_length",  
		DataLength:"data_length",  
		MaxDataLength:"max_data_length",  
		IndexLength:"index_length",  
		DataFree:"data_free",  
		AutoIncrement:"auto_increment",  
		CreateTime:"create_time",  
		UpdateTime:"update_time",  
		CheckTime:"check_time",  
		Collation:"collation",  
		Checksum:"checksum",  
		CreateOptions:"create_options",  
		Comment:"comment",             
	}
	
// TenantVirtualCharset [...]		
type	TenantVirtualCharset	struct {		
Charset	string	`gorm:"column:charset" json:"charset"`			
Description	string	`gorm:"column:description" json:"description"`			
DefaultCollation	string	`gorm:"column:default_collation" json:"default_collation"`			
MaxLength	int64	`gorm:"column:max_length" json:"max_length"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualCharset) TableName() string {
	return "__tenant_virtual_charset"
}
	

// TenantVirtualCharsetColumns get sql column name.获取数据库列名
var TenantVirtualCharsetColumns = struct { 
	Charset string
	Description string
	DefaultCollation string
	MaxLength string    
	}{ 
		Charset:"charset",  
		Description:"description",  
		DefaultCollation:"default_collation",  
		MaxLength:"max_length",             
	}
	
// TenantVirtualCollation [...]		
type	TenantVirtualCollation	struct {		
Collation	string	`gorm:"column:collation" json:"collation"`			
Charset	string	`gorm:"column:charset" json:"charset"`			
ID	int64	`gorm:"column:id" json:"id"`			
IsDefault	string	`gorm:"column:is_default" json:"is_default"`			
IsCompiled	string	`gorm:"column:is_compiled" json:"is_compiled"`			
Sortlen	int64	`gorm:"column:sortlen" json:"sortlen"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualCollation) TableName() string {
	return "__tenant_virtual_collation"
}
	

// TenantVirtualCollationColumns get sql column name.获取数据库列名
var TenantVirtualCollationColumns = struct { 
	Collation string
	Charset string
	ID string
	IsDefault string
	IsCompiled string
	Sortlen string    
	}{ 
		Collation:"collation",  
		Charset:"charset",  
		ID:"id",  
		IsDefault:"is_default",  
		IsCompiled:"is_compiled",  
		Sortlen:"sortlen",             
	}
	
// TenantVirtualConcurrentLimitSQL [...]		
type	TenantVirtualConcurrentLimitSQL	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
OutlineID	int64	`gorm:"column:outline_id" json:"outline_id"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
OutlineName	string	`gorm:"column:outline_name" json:"outline_name"`			
OutlineContent	string	`gorm:"column:outline_content" json:"outline_content"`			
VisibleSignature	string	`gorm:"column:visible_signature" json:"visible_signature"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
ConcurrentNum	int64	`gorm:"column:concurrent_num" json:"concurrent_num"`			
LimitTarget	string	`gorm:"column:limit_target" json:"limit_target"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualConcurrentLimitSQL) TableName() string {
	return "__tenant_virtual_concurrent_limit_sql"
}
	

// TenantVirtualConcurrentLimitSQLColumns get sql column name.获取数据库列名
var TenantVirtualConcurrentLimitSQLColumns = struct { 
	TenantID string
	DatabaseID string
	OutlineID string
	DatabaseName string
	OutlineName string
	OutlineContent string
	VisibleSignature string
	SQLText string
	ConcurrentNum string
	LimitTarget string    
	}{ 
		TenantID:"tenant_id",  
		DatabaseID:"database_id",  
		OutlineID:"outline_id",  
		DatabaseName:"database_name",  
		OutlineName:"outline_name",  
		OutlineContent:"outline_content",  
		VisibleSignature:"visible_signature",  
		SQLText:"sql_text",  
		ConcurrentNum:"concurrent_num",  
		LimitTarget:"limit_target",             
	}
	
// TenantVirtualCurrentTenant [...]		
type	TenantVirtualCurrentTenant	struct {		
TenantID	int64	`gorm:"primaryKey;column:tenant_id" json:"-"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
CreateStmt	string	`gorm:"column:create_stmt" json:"create_stmt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualCurrentTenant) TableName() string {
	return "__tenant_virtual_current_tenant"
}
	

// TenantVirtualCurrentTenantColumns get sql column name.获取数据库列名
var TenantVirtualCurrentTenantColumns = struct { 
	TenantID string
	TenantName string
	CreateStmt string    
	}{ 
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		CreateStmt:"create_stmt",             
	}
	
// TenantVirtualDatabaseStatus [...]		
type	TenantVirtualDatabaseStatus	struct {		
Db	string	`gorm:"column:db" json:"db"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualDatabaseStatus) TableName() string {
	return "__tenant_virtual_database_status"
}
	

// TenantVirtualDatabaseStatusColumns get sql column name.获取数据库列名
var TenantVirtualDatabaseStatusColumns = struct { 
	Db string
	SvrIP string
	SvrPort string
	ReadOnly string    
	}{ 
		Db:"db",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ReadOnly:"read_only",             
	}
	
// TenantVirtualEventName [...]		
type	TenantVirtualEventName	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
EventID	int64	`gorm:"column:event_id" json:"event_id"`			
Event#	int64	`gorm:"column:event#" json:"event#"`			
Name	string	`gorm:"column:name" json:"name"`			
DisplayName	string	`gorm:"column:display_name" json:"display_name"`			
Parameter1	string	`gorm:"column:parameter1" json:"parameter1"`			
Parameter2	string	`gorm:"column:parameter2" json:"parameter2"`			
Parameter3	string	`gorm:"column:parameter3" json:"parameter3"`			
WaitClassID	int64	`gorm:"column:wait_class_id" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:wait_class#" json:"wait_class#"`			
WaitClass	string	`gorm:"column:wait_class" json:"wait_class"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualEventName) TableName() string {
	return "__tenant_virtual_event_name"
}
	

// TenantVirtualEventNameColumns get sql column name.获取数据库列名
var TenantVirtualEventNameColumns = struct { 
	TenantID string
	EventID string
	Event# string
	Name string
	DisplayName string
	Parameter1 string
	Parameter2 string
	Parameter3 string
	WaitClassID string
	WaitClass# string
	WaitClass string    
	}{ 
		TenantID:"tenant_id",  
		EventID:"event_id",  
		Event#:"event#",  
		Name:"name",  
		DisplayName:"display_name",  
		Parameter1:"parameter1",  
		Parameter2:"parameter2",  
		Parameter3:"parameter3",  
		WaitClassID:"wait_class_id",  
		WaitClass#:"wait_class#",  
		WaitClass:"wait_class",             
	}
	
// TenantVirtualGlobalVariable [...]		
type	TenantVirtualGlobalVariable	struct {		
VariableName	string	`gorm:"column:variable_name" json:"variable_name"`			
Value	string	`gorm:"column:value" json:"value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualGlobalVariable) TableName() string {
	return "__tenant_virtual_global_variable"
}
	

// TenantVirtualGlobalVariableColumns get sql column name.获取数据库列名
var TenantVirtualGlobalVariableColumns = struct { 
	VariableName string
	Value string    
	}{ 
		VariableName:"variable_name",  
		Value:"value",             
	}
	
// TenantVirtualIntermResult [...]		
type	TenantVirtualIntermResult	struct {		
JobID	int64	`gorm:"column:job_id" json:"job_id"`			
TaskID	int64	`gorm:"column:task_id" json:"task_id"`			
SliceID	int64	`gorm:"column:slice_id" json:"slice_id"`			
ExecutionID	int64	`gorm:"column:execution_id" json:"execution_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
ExpireTime	int64	`gorm:"column:expire_time" json:"expire_time"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
ScannerCount	int64	`gorm:"column:scanner_count" json:"scanner_count"`			
UsedMemorySize	int64	`gorm:"column:used_memory_size" json:"used_memory_size"`			
UsedDiskSize	int64	`gorm:"column:used_disk_size" json:"used_disk_size"`			
PartitionIP	string	`gorm:"column:partition_ip" json:"partition_ip"`			
PartitionPort	int64	`gorm:"column:partition_port" json:"partition_port"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualIntermResult) TableName() string {
	return "__tenant_virtual_interm_result"
}
	

// TenantVirtualIntermResultColumns get sql column name.获取数据库列名
var TenantVirtualIntermResultColumns = struct { 
	JobID string
	TaskID string
	SliceID string
	ExecutionID string
	SvrIP string
	SvrPort string
	ExpireTime string
	RowCount string
	ScannerCount string
	UsedMemorySize string
	UsedDiskSize string
	PartitionIP string
	PartitionPort string    
	}{ 
		JobID:"job_id",  
		TaskID:"task_id",  
		SliceID:"slice_id",  
		ExecutionID:"execution_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ExpireTime:"expire_time",  
		RowCount:"row_count",  
		ScannerCount:"scanner_count",  
		UsedMemorySize:"used_memory_size",  
		UsedDiskSize:"used_disk_size",  
		PartitionIP:"partition_ip",  
		PartitionPort:"partition_port",             
	}
	
// TenantVirtualObjectDefinition [...]		
type	TenantVirtualObjectDefinition	struct {		
ObjectType	int64	`gorm:"primaryKey;column:object_type" json:"-"`			
ObjectName	string	`gorm:"primaryKey;column:object_name" json:"-"`			
Schema	string	`gorm:"primaryKey;column:schema" json:"-"`			
Version	string	`gorm:"primaryKey;column:version" json:"-"`			
Model	string	`gorm:"primaryKey;column:model" json:"-"`			
Transform	string	`gorm:"primaryKey;column:transform" json:"-"`			
Definition	string	`gorm:"column:definition" json:"definition"`			
CreateDatabaseWithIfNotExists	string	`gorm:"column:create_database_with_if_not_exists" json:"create_database_with_if_not_exists"`			
CharacterSetClient	string	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	string	`gorm:"column:collation_connection" json:"collation_connection"`			
ProcType	int64	`gorm:"column:proc_type" json:"proc_type"`			
CollationDatabase	string	`gorm:"column:collation_database" json:"collation_database"`			
SQLMode	string	`gorm:"column:sql_mode" json:"sql_mode"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualObjectDefinition) TableName() string {
	return "__tenant_virtual_object_definition"
}
	

// TenantVirtualObjectDefinitionColumns get sql column name.获取数据库列名
var TenantVirtualObjectDefinitionColumns = struct { 
	ObjectType string
	ObjectName string
	Schema string
	Version string
	Model string
	Transform string
	Definition string
	CreateDatabaseWithIfNotExists string
	CharacterSetClient string
	CollationConnection string
	ProcType string
	CollationDatabase string
	SQLMode string    
	}{ 
		ObjectType:"object_type",  
		ObjectName:"object_name",  
		Schema:"schema",  
		Version:"version",  
		Model:"model",  
		Transform:"transform",  
		Definition:"definition",  
		CreateDatabaseWithIfNotExists:"create_database_with_if_not_exists",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",  
		ProcType:"proc_type",  
		CollationDatabase:"collation_database",  
		SQLMode:"sql_mode",             
	}
	
// TenantVirtualOutline [...]		
type	TenantVirtualOutline	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
OutlineID	int64	`gorm:"column:outline_id" json:"outline_id"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
OutlineName	string	`gorm:"column:outline_name" json:"outline_name"`			
VisibleSignature	string	`gorm:"column:visible_signature" json:"visible_signature"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
OutlineTarget	string	`gorm:"column:outline_target" json:"outline_target"`			
OutlineSQL	string	`gorm:"column:outline_sql" json:"outline_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualOutline) TableName() string {
	return "__tenant_virtual_outline"
}
	

// TenantVirtualOutlineColumns get sql column name.获取数据库列名
var TenantVirtualOutlineColumns = struct { 
	TenantID string
	DatabaseID string
	OutlineID string
	DatabaseName string
	OutlineName string
	VisibleSignature string
	SQLText string
	OutlineTarget string
	OutlineSQL string    
	}{ 
		TenantID:"tenant_id",  
		DatabaseID:"database_id",  
		OutlineID:"outline_id",  
		DatabaseName:"database_name",  
		OutlineName:"outline_name",  
		VisibleSignature:"visible_signature",  
		SQLText:"sql_text",  
		OutlineTarget:"outline_target",  
		OutlineSQL:"outline_sql",             
	}
	
// TenantVirtualPartitionStat [...]		
type	TenantVirtualPartitionStat	struct {		
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DiffPercentage	int64	`gorm:"column:diff_percentage" json:"diff_percentage"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualPartitionStat) TableName() string {
	return "__tenant_virtual_partition_stat"
}
	

// TenantVirtualPartitionStatColumns get sql column name.获取数据库列名
var TenantVirtualPartitionStatColumns = struct { 
	TableID string
	PartitionID string
	PartitionCnt string
	RowCount string
	DiffPercentage string    
	}{ 
		TableID:"table_id",  
		PartitionID:"partition_id",  
		PartitionCnt:"partition_cnt",  
		RowCount:"row_count",  
		DiffPercentage:"diff_percentage",             
	}
	
// TenantVirtualPrivilegeGrant [...]		
type	TenantVirtualPrivilegeGrant	struct {		
UserID	int64	`gorm:"primaryKey;column:user_id" json:"-"`			
Grants	string	`gorm:"column:grants" json:"grants"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualPrivilegeGrant) TableName() string {
	return "__tenant_virtual_privilege_grant"
}
	

// TenantVirtualPrivilegeGrantColumns get sql column name.获取数据库列名
var TenantVirtualPrivilegeGrantColumns = struct { 
	UserID string
	Grants string    
	}{ 
		UserID:"user_id",  
		Grants:"grants",             
	}
	
// TenantVirtualSessionVariable [...]		
type	TenantVirtualSessionVariable	struct {		
VariableName	string	`gorm:"column:variable_name" json:"variable_name"`			
Value	string	`gorm:"column:value" json:"value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualSessionVariable) TableName() string {
	return "__tenant_virtual_session_variable"
}
	

// TenantVirtualSessionVariableColumns get sql column name.获取数据库列名
var TenantVirtualSessionVariableColumns = struct { 
	VariableName string
	Value string    
	}{ 
		VariableName:"variable_name",  
		Value:"value",             
	}
	
// TenantVirtualShowCreateDatabase [...]		
type	TenantVirtualShowCreateDatabase	struct {		
DatabaseID	int64	`gorm:"primaryKey;column:database_id" json:"-"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
CreateDatabase	string	`gorm:"column:create_database" json:"create_database"`			
CreateDatabaseWithIfNotExists	string	`gorm:"column:create_database_with_if_not_exists" json:"create_database_with_if_not_exists"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualShowCreateDatabase) TableName() string {
	return "__tenant_virtual_show_create_database"
}
	

// TenantVirtualShowCreateDatabaseColumns get sql column name.获取数据库列名
var TenantVirtualShowCreateDatabaseColumns = struct { 
	DatabaseID string
	DatabaseName string
	CreateDatabase string
	CreateDatabaseWithIfNotExists string    
	}{ 
		DatabaseID:"database_id",  
		DatabaseName:"database_name",  
		CreateDatabase:"create_database",  
		CreateDatabaseWithIfNotExists:"create_database_with_if_not_exists",             
	}
	
// TenantVirtualShowCreateProcedure [...]		
type	TenantVirtualShowCreateProcedure	struct {		
RoutineID	int64	`gorm:"primaryKey;column:routine_id" json:"-"`			
RoutineName	string	`gorm:"column:routine_name" json:"routine_name"`			
CreateRoutine	string	`gorm:"column:create_routine" json:"create_routine"`			
ProcType	int64	`gorm:"column:proc_type" json:"proc_type"`			
CharacterSetClient	string	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	string	`gorm:"column:collation_connection" json:"collation_connection"`			
CollationDatabase	string	`gorm:"column:collation_database" json:"collation_database"`			
SQLMode	string	`gorm:"column:sql_mode" json:"sql_mode"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualShowCreateProcedure) TableName() string {
	return "__tenant_virtual_show_create_procedure"
}
	

// TenantVirtualShowCreateProcedureColumns get sql column name.获取数据库列名
var TenantVirtualShowCreateProcedureColumns = struct { 
	RoutineID string
	RoutineName string
	CreateRoutine string
	ProcType string
	CharacterSetClient string
	CollationConnection string
	CollationDatabase string
	SQLMode string    
	}{ 
		RoutineID:"routine_id",  
		RoutineName:"routine_name",  
		CreateRoutine:"create_routine",  
		ProcType:"proc_type",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",  
		CollationDatabase:"collation_database",  
		SQLMode:"sql_mode",             
	}
	
// TenantVirtualShowCreateTable [...]		
type	TenantVirtualShowCreateTable	struct {		
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
CreateTable	string	`gorm:"column:create_table" json:"create_table"`			
CharacterSetClient	string	`gorm:"column:character_set_client" json:"character_set_client"`			
CollationConnection	string	`gorm:"column:collation_connection" json:"collation_connection"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualShowCreateTable) TableName() string {
	return "__tenant_virtual_show_create_table"
}
	

// TenantVirtualShowCreateTableColumns get sql column name.获取数据库列名
var TenantVirtualShowCreateTableColumns = struct { 
	TableID string
	TableName string
	CreateTable string
	CharacterSetClient string
	CollationConnection string    
	}{ 
		TableID:"table_id",  
		TableName:"table_name",  
		CreateTable:"create_table",  
		CharacterSetClient:"character_set_client",  
		CollationConnection:"collation_connection",             
	}
	
// TenantVirtualShowCreateTablegroup [...]		
type	TenantVirtualShowCreateTablegroup	struct {		
TablegroupID	int64	`gorm:"primaryKey;column:tablegroup_id" json:"-"`			
TablegroupName	string	`gorm:"column:tablegroup_name" json:"tablegroup_name"`			
CreateTablegroup	string	`gorm:"column:create_tablegroup" json:"create_tablegroup"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualShowCreateTablegroup) TableName() string {
	return "__tenant_virtual_show_create_tablegroup"
}
	

// TenantVirtualShowCreateTablegroupColumns get sql column name.获取数据库列名
var TenantVirtualShowCreateTablegroupColumns = struct { 
	TablegroupID string
	TablegroupName string
	CreateTablegroup string    
	}{ 
		TablegroupID:"tablegroup_id",  
		TablegroupName:"tablegroup_name",  
		CreateTablegroup:"create_tablegroup",             
	}
	
// TenantVirtualShowTables [...]		
type	TenantVirtualShowTables	struct {		
DatabaseID	int64	`gorm:"primaryKey;column:database_id" json:"-"`			
TableName	string	`gorm:"primaryKey;column:table_name" json:"-"`			
TableType	string	`gorm:"column:table_type" json:"table_type"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualShowTables) TableName() string {
	return "__tenant_virtual_show_tables"
}
	

// TenantVirtualShowTablesColumns get sql column name.获取数据库列名
var TenantVirtualShowTablesColumns = struct { 
	DatabaseID string
	TableName string
	TableType string    
	}{ 
		DatabaseID:"database_id",  
		TableName:"table_name",  
		TableType:"table_type",             
	}
	
// TenantVirtualStatname [...]		
type	TenantVirtualStatname	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
StatID	int64	`gorm:"column:stat_id" json:"stat_id"`			
Statistic#	int64	`gorm:"column:statistic#" json:"statistic#"`			
Name	string	`gorm:"column:name" json:"name"`			
DisplayName	string	`gorm:"column:display_name" json:"display_name"`			
Class	int64	`gorm:"column:class" json:"class"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualStatname) TableName() string {
	return "__tenant_virtual_statname"
}
	

// TenantVirtualStatnameColumns get sql column name.获取数据库列名
var TenantVirtualStatnameColumns = struct { 
	TenantID string
	StatID string
	Statistic# string
	Name string
	DisplayName string
	Class string    
	}{ 
		TenantID:"tenant_id",  
		StatID:"stat_id",  
		Statistic#:"statistic#",  
		Name:"name",  
		DisplayName:"display_name",  
		Class:"class",             
	}
	
// TenantVirtualTableColumn [...]		
type	TenantVirtualTableColumn	struct {		
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
Field	string	`gorm:"primaryKey;column:field" json:"-"`			
Type	string	`gorm:"column:type" json:"type"`			
Collation	string	`gorm:"column:collation" json:"collation"`			
Null	string	`gorm:"column:null" json:"null"`			
Key	string	`gorm:"column:key" json:"key"`			
Default	string	`gorm:"column:default" json:"default"`			
Extra	string	`gorm:"column:extra" json:"extra"`			
Privileges	string	`gorm:"column:privileges" json:"privileges"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualTableColumn) TableName() string {
	return "__tenant_virtual_table_column"
}
	

// TenantVirtualTableColumnColumns get sql column name.获取数据库列名
var TenantVirtualTableColumnColumns = struct { 
	TableID string
	Field string
	Type string
	Collation string
	Null string
	Key string
	Default string
	Extra string
	Privileges string
	Comment string    
	}{ 
		TableID:"table_id",  
		Field:"field",  
		Type:"type",  
		Collation:"collation",  
		Null:"null",  
		Key:"key",  
		Default:"default",  
		Extra:"extra",  
		Privileges:"privileges",  
		Comment:"comment",             
	}
	
// TenantVirtualTableIndex [...]		
type	TenantVirtualTableIndex	struct {		
TableID	int64	`gorm:"primaryKey;column:table_id" json:"-"`			
KeyName	string	`gorm:"primaryKey;column:key_name" json:"-"`			
SeqInIndex	int64	`gorm:"primaryKey;column:seq_in_index" json:"-"`			
TableSchema	string	`gorm:"column:table_schema" json:"table_schema"`			
Table	string	`gorm:"column:table" json:"table"`			
NonUnique	int64	`gorm:"column:non_unique" json:"non_unique"`			
IndexSchema	string	`gorm:"column:index_schema" json:"index_schema"`			
ColumnName	string	`gorm:"column:column_name" json:"column_name"`			
Collation	string	`gorm:"column:collation" json:"collation"`			
Cardinality	int64	`gorm:"column:cardinality" json:"cardinality"`			
SubPart	string	`gorm:"column:sub_part" json:"sub_part"`			
Packed	string	`gorm:"column:packed" json:"packed"`			
Null	string	`gorm:"column:null" json:"null"`			
IndexType	string	`gorm:"column:index_type" json:"index_type"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
IndexComment	string	`gorm:"column:index_comment" json:"index_comment"`			
IsVisible	string	`gorm:"column:is_visible" json:"is_visible"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualTableIndex) TableName() string {
	return "__tenant_virtual_table_index"
}
	

// TenantVirtualTableIndexColumns get sql column name.获取数据库列名
var TenantVirtualTableIndexColumns = struct { 
	TableID string
	KeyName string
	SeqInIndex string
	TableSchema string
	Table string
	NonUnique string
	IndexSchema string
	ColumnName string
	Collation string
	Cardinality string
	SubPart string
	Packed string
	Null string
	IndexType string
	Comment string
	IndexComment string
	IsVisible string    
	}{ 
		TableID:"table_id",  
		KeyName:"key_name",  
		SeqInIndex:"seq_in_index",  
		TableSchema:"table_schema",  
		Table:"table",  
		NonUnique:"non_unique",  
		IndexSchema:"index_schema",  
		ColumnName:"column_name",  
		Collation:"collation",  
		Cardinality:"cardinality",  
		SubPart:"sub_part",  
		Packed:"packed",  
		Null:"null",  
		IndexType:"index_type",  
		Comment:"comment",  
		IndexComment:"index_comment",  
		IsVisible:"is_visible",             
	}
	
// TenantVirtualTenantStatus [...]		
type	TenantVirtualTenantStatus	struct {		
Tenant	string	`gorm:"column:tenant" json:"tenant"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualTenantStatus) TableName() string {
	return "__tenant_virtual_tenant_status"
}
	

// TenantVirtualTenantStatusColumns get sql column name.获取数据库列名
var TenantVirtualTenantStatusColumns = struct { 
	Tenant string
	SvrIP string
	SvrPort string
	ReadOnly string    
	}{ 
		Tenant:"tenant",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		ReadOnly:"read_only",             
	}
	
// TenantVirtualWarning [...]		
type	TenantVirtualWarning	struct {		
Level	string	`gorm:"column:level" json:"level"`			
Code	int64	`gorm:"column:code" json:"code"`			
Message	string	`gorm:"column:message" json:"message"`			
}		

// TableName get sql table name.获取数据库表名
func (m *TenantVirtualWarning) TableName() string {
	return "__tenant_virtual_warning"
}
	

// TenantVirtualWarningColumns get sql column name.获取数据库列名
var TenantVirtualWarningColumns = struct { 
	Level string
	Code string
	Message string    
	}{ 
		Level:"level",  
		Code:"code",  
		Message:"message",             
	}
	
// VirtualShowRestorePreview [...]		
type	VirtualShowRestorePreview	struct {		
BackupType	string	`gorm:"primaryKey;column:backup_type" json:"-"`			
BackupID	int64	`gorm:"primaryKey;column:backup_id" json:"-"`			
CopyID	int64	`gorm:"primaryKey;column:copy_id" json:"-"`			
BackupDest	string	`gorm:"column:backup_dest" json:"backup_dest"`			
FileStatus	string	`gorm:"column:file_status" json:"file_status"`			
}		

// TableName get sql table name.获取数据库表名
func (m *VirtualShowRestorePreview) TableName() string {
	return "__virtual_show_restore_preview"
}
	

// VirtualShowRestorePreviewColumns get sql column name.获取数据库列名
var VirtualShowRestorePreviewColumns = struct { 
	BackupType string
	BackupID string
	CopyID string
	BackupDest string
	FileStatus string    
	}{ 
		BackupType:"backup_type",  
		BackupID:"backup_id",  
		CopyID:"copy_id",  
		BackupDest:"backup_dest",  
		FileStatus:"file_status",             
	}
	
// Gv$concurrentLimitSQL [...]		
type	Gv$concurrentLimitSQL	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
OutlineID	int64	`gorm:"column:outline_id" json:"outline_id"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
OutlineName	string	`gorm:"column:outline_name" json:"outline_name"`			
OutlineContent	string	`gorm:"column:outline_content" json:"outline_content"`			
VisibleSignature	string	`gorm:"column:visible_signature" json:"visible_signature"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
ConcurrentNum	int64	`gorm:"column:concurrent_num" json:"concurrent_num"`			
LimitTarget	string	`gorm:"column:limit_target" json:"limit_target"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$concurrentLimitSQL) TableName() string {
	return "gv$concurrent_limit_sql"
}
	

// Gv$concurrentLimitSQLColumns get sql column name.获取数据库列名
var Gv$concurrentLimitSQLColumns = struct { 
	TenantID string
	DatabaseID string
	OutlineID string
	DatabaseName string
	OutlineName string
	OutlineContent string
	VisibleSignature string
	SQLText string
	ConcurrentNum string
	LimitTarget string    
	}{ 
		TenantID:"tenant_id",  
		DatabaseID:"database_id",  
		OutlineID:"outline_id",  
		DatabaseName:"database_name",  
		OutlineName:"outline_name",  
		OutlineContent:"outline_content",  
		VisibleSignature:"visible_signature",  
		SQLText:"sql_text",  
		ConcurrentNum:"concurrent_num",  
		LimitTarget:"limit_target",             
	}
	
// Gv$database [...]		
type	Gv$database	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
DefaultTablegroupID	int64	`gorm:"column:default_tablegroup_id" json:"default_tablegroup_id"`			
InRecyclebin	int64	`gorm:"column:in_recyclebin" json:"in_recyclebin"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$database) TableName() string {
	return "gv$database"
}
	

// Gv$databaseColumns get sql column name.获取数据库列名
var Gv$databaseColumns = struct { 
	TenantID string
	TenantName string
	DatabaseID string
	DatabaseName string
	ZoneList string
	PrimaryZone string
	CollationType string
	Comment string
	ReadOnly string
	DefaultTablegroupID string
	InRecyclebin string    
	}{ 
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		DatabaseID:"database_id",  
		DatabaseName:"database_name",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		CollationType:"collation_type",  
		Comment:"comment",  
		ReadOnly:"read_only",  
		DefaultTablegroupID:"default_tablegroup_id",  
		InRecyclebin:"in_recyclebin",             
	}
	
// Gv$latch [...]		
type	Gv$latch	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
Addr	string	`gorm:"column:ADDR" json:"addr"`			
Latch#	int64	`gorm:"column:LATCH#" json:"latc_h#"`			
Level#	int64	`gorm:"column:LEVEL#" json:"leve_l#"`			
Name	string	`gorm:"column:NAME" json:"name"`			
Hash	int64	`gorm:"column:HASH" json:"hash"`			
Gets	int64	`gorm:"column:GETS" json:"gets"`			
Misses	int64	`gorm:"column:MISSES" json:"misses"`			
Sleeps	int64	`gorm:"column:SLEEPS" json:"sleeps"`			
ImmediateGets	int64	`gorm:"column:IMMEDIATE_GETS" json:"immediate_gets"`			
ImmediateMisses	int64	`gorm:"column:IMMEDIATE_MISSES" json:"immediate_misses"`			
SpinGets	int64	`gorm:"column:SPIN_GETS" json:"spin_gets"`			
WaitTime	int64	`gorm:"column:WAIT_TIME" json:"wait_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$latch) TableName() string {
	return "gv$latch"
}
	

// Gv$latchColumns get sql column name.获取数据库列名
var Gv$latchColumns = struct { 
	ConID string
	SvrIP string
	SvrPort string
	Addr string
	Latch# string
	Level# string
	Name string
	Hash string
	Gets string
	Misses string
	Sleeps string
	ImmediateGets string
	ImmediateMisses string
	SpinGets string
	WaitTime string    
	}{ 
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		Addr:"ADDR",  
		Latch#:"LATCH#",  
		Level#:"LEVEL#",  
		Name:"NAME",  
		Hash:"HASH",  
		Gets:"GETS",  
		Misses:"MISSES",  
		Sleeps:"SLEEPS",  
		ImmediateGets:"IMMEDIATE_GETS",  
		ImmediateMisses:"IMMEDIATE_MISSES",  
		SpinGets:"SPIN_GETS",  
		WaitTime:"WAIT_TIME",             
	}
	
// Gv$lock [...]		
type	Gv$lock	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
Addr	string	`gorm:"column:ADDR" json:"addr"`			
Kaddr	uint64	`gorm:"column:KADDR" json:"kaddr"`			
Sid	int64	`gorm:"column:SID" json:"s_id"`			
Type	int64	`gorm:"column:TYPE" json:"type"`			
Lmode	int64	`gorm:"column:LMODE" json:"lmode"`			
Request	int64	`gorm:"column:REQUEST" json:"request"`			
Ctime	int64	`gorm:"column:CTIME" json:"ctime"`			
Block	int64	`gorm:"column:BLOCK" json:"block"`			
ConID	uint64	`gorm:"column:CON_ID" json:"con_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$lock) TableName() string {
	return "gv$lock"
}
	

// Gv$lockColumns get sql column name.获取数据库列名
var Gv$lockColumns = struct { 
	SvrIP string
	SvrPort string
	TableID string
	Addr string
	Kaddr string
	Sid string
	Type string
	Lmode string
	Request string
	Ctime string
	Block string
	ConID string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TableID:"TABLE_ID",  
		Addr:"ADDR",  
		Kaddr:"KADDR",  
		Sid:"SID",  
		Type:"TYPE",  
		Lmode:"LMODE",  
		Request:"REQUEST",  
		Ctime:"CTIME",  
		Block:"BLOCK",  
		ConID:"CON_ID",             
	}
	
// Gv$lockWaitStat [...]		
type	Gv$lockWaitStat	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
TableName	string	`gorm:"column:TABLE_NAME" json:"table_name"`			
Rowkey	string	`gorm:"column:ROWKEY" json:"rowkey"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
SessionID	int64	`gorm:"column:SESSION_ID" json:"session_id"`			
NeedWait	int8	`gorm:"column:NEED_WAIT" json:"need_wait"`			
RecvTs	int64	`gorm:"column:RECV_TS" json:"recv_ts"`			
LockTs	int64	`gorm:"column:LOCK_TS" json:"lock_ts"`			
AbsTimeout	int64	`gorm:"column:ABS_TIMEOUT" json:"abs_timeout"`			
TryLockTimes	int64	`gorm:"column:TRY_LOCK_TIMES" json:"try_lock_times"`			
TimeAfterRecv	int64	`gorm:"column:TIME_AFTER_RECV" json:"time_after_recv"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$lockWaitStat) TableName() string {
	return "gv$lock_wait_stat"
}
	

// Gv$lockWaitStatColumns get sql column name.获取数据库列名
var Gv$lockWaitStatColumns = struct { 
	TenantID string
	TableID string
	TableName string
	Rowkey string
	SvrIP string
	SvrPort string
	SessionID string
	NeedWait string
	RecvTs string
	LockTs string
	AbsTimeout string
	TryLockTimes string
	TimeAfterRecv string    
	}{ 
		TenantID:"TENANT_ID",  
		TableID:"TABLE_ID",  
		TableName:"TABLE_NAME",  
		Rowkey:"ROWKEY",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		SessionID:"SESSION_ID",  
		NeedWait:"NEED_WAIT",  
		RecvTs:"RECV_TS",  
		LockTs:"LOCK_TS",  
		AbsTimeout:"ABS_TIMEOUT",  
		TryLockTimes:"TRY_LOCK_TIMES",  
		TimeAfterRecv:"TIME_AFTER_RECV",             
	}
	
// Gv$memory [...]		
type	Gv$memory	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
Context	string	`gorm:"column:CONTEXT" json:"context"`			
Count	float64	`gorm:"column:COUNT" json:"count"`			
Used	float64	`gorm:"column:USED" json:"used"`			
AllocCount	float64	`gorm:"column:ALLOC_COUNT" json:"alloc_count"`			
FreeCount	float64	`gorm:"column:FREE_COUNT" json:"free_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$memory) TableName() string {
	return "gv$memory"
}
	

// Gv$memoryColumns get sql column name.获取数据库列名
var Gv$memoryColumns = struct { 
	TenantID string
	IP string
	Port string
	Context string
	Count string
	Used string
	AllocCount string
	FreeCount string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		Context:"CONTEXT",  
		Count:"COUNT",  
		Used:"USED",  
		AllocCount:"ALLOC_COUNT",  
		FreeCount:"FREE_COUNT",             
	}
	
// Gv$memstore [...]		
type	Gv$memstore	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
Active	int64	`gorm:"column:ACTIVE" json:"active"`			
Total	int64	`gorm:"column:TOTAL" json:"total"`			
FreezeTrigger	int64	`gorm:"column:FREEZE_TRIGGER" json:"freeze_trigger"`			
MemLimit	int64	`gorm:"column:MEM_LIMIT" json:"mem_limit"`			
FreezeCnt	int64	`gorm:"column:FREEZE_CNT" json:"freeze_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$memstore) TableName() string {
	return "gv$memstore"
}
	

// Gv$memstoreColumns get sql column name.获取数据库列名
var Gv$memstoreColumns = struct { 
	TenantID string
	IP string
	Port string
	Active string
	Total string
	FreezeTrigger string
	MemLimit string
	FreezeCnt string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		Active:"ACTIVE",  
		Total:"TOTAL",  
		FreezeTrigger:"FREEZE_TRIGGER",  
		MemLimit:"MEM_LIMIT",  
		FreezeCnt:"FREEZE_CNT",             
	}
	
// Gv$memstoreInfo [...]		
type	Gv$memstoreInfo	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
Version	string	`gorm:"column:VERSION" json:"version"`			
BaseVersion	int64	`gorm:"column:BASE_VERSION" json:"base_version"`			
MultiVersionStart	int64	`gorm:"column:MULTI_VERSION_START" json:"multi_version_start"`			
SnapshotVersion	int64	`gorm:"column:SNAPSHOT_VERSION" json:"snapshot_version"`			
IsActive	int64	`gorm:"column:IS_ACTIVE" json:"is_active"`			
Used	int64	`gorm:"column:USED" json:"used"`			
HashItems	int64	`gorm:"column:HASH_ITEMS" json:"hash_items"`			
BtreeItems	int64	`gorm:"column:BTREE_ITEMS" json:"btree_items"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$memstoreInfo) TableName() string {
	return "gv$memstore_info"
}
	

// Gv$memstoreInfoColumns get sql column name.获取数据库列名
var Gv$memstoreInfoColumns = struct { 
	TenantID string
	IP string
	Port string
	TableID string
	PartitionID string
	Version string
	BaseVersion string
	MultiVersionStart string
	SnapshotVersion string
	IsActive string
	Used string
	HashItems string
	BtreeItems string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		Version:"VERSION",  
		BaseVersion:"BASE_VERSION",  
		MultiVersionStart:"MULTI_VERSION_START",  
		SnapshotVersion:"SNAPSHOT_VERSION",  
		IsActive:"IS_ACTIVE",  
		Used:"USED",  
		HashItems:"HASH_ITEMS",  
		BtreeItems:"BTREE_ITEMS",             
	}
	
// Gv$mergeInfo [...]		
type	Gv$mergeInfo	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
Type	string	`gorm:"column:TYPE" json:"type"`			
Action	string	`gorm:"column:ACTION" json:"action"`			
Version	string	`gorm:"column:VERSION" json:"version"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
MacroBlockCount	int64	`gorm:"column:MACRO_BLOCK_COUNT" json:"macro_block_count"`			
ReusePct	float64	`gorm:"column:REUSE_PCT" json:"reuse_pct"`			
ParallelDegree	int64	`gorm:"column:PARALLEL_DEGREE" json:"parallel_degree"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$mergeInfo) TableName() string {
	return "gv$merge_info"
}
	

// Gv$mergeInfoColumns get sql column name.获取数据库列名
var Gv$mergeInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	Type string
	Action string
	Version string
	StartTime string
	EndTime string
	MacroBlockCount string
	ReusePct string
	ParallelDegree string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		Type:"TYPE",  
		Action:"ACTION",  
		Version:"VERSION",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		MacroBlockCount:"MACRO_BLOCK_COUNT",  
		ReusePct:"REUSE_PCT",  
		ParallelDegree:"PARALLEL_DEGREE",             
	}
	
// Gv$minorMergeInfo [...]		
type	Gv$minorMergeInfo	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	string	`gorm:"column:TENANT_ID" json:"tenant_id"`			
FreezeSnapshot	string	`gorm:"column:FREEZE_SNAPSHOT" json:"freeze_snapshot"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
FinishTime	time.Time	`gorm:"column:FINISH_TIME" json:"finish_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$minorMergeInfo) TableName() string {
	return "gv$minor_merge_info"
}
	

// Gv$minorMergeInfoColumns get sql column name.获取数据库列名
var Gv$minorMergeInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	FreezeSnapshot string
	StartTime string
	FinishTime string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		FreezeSnapshot:"FREEZE_SNAPSHOT",  
		StartTime:"START_TIME",  
		FinishTime:"FINISH_TIME",             
	}
	
// Gv$obSQLWorkareaMemoryInfo [...]		
type	Gv$obSQLWorkareaMemoryInfo	struct {		
MaxWorkareaSize	int64	`gorm:"column:max_workarea_size" json:"max_workarea_size"`			
WorkareaHoldSize	int64	`gorm:"column:workarea_hold_size" json:"workarea_hold_size"`			
MaxAutoWorkareaSize	int64	`gorm:"column:max_auto_workarea_size" json:"max_auto_workarea_size"`			
MemTarget	int64	`gorm:"column:mem_target" json:"mem_target"`			
TotalMemUsed	int64	`gorm:"column:total_mem_used" json:"total_mem_used"`			
GlobalMemBound	int64	`gorm:"column:global_mem_bound" json:"global_mem_bound"`			
DriftSize	int64	`gorm:"column:drift_size" json:"drift_size"`			
WorkareaCount	int64	`gorm:"column:workarea_count" json:"workarea_count"`			
ManualCalcCount	int64	`gorm:"column:manual_calc_count" json:"manual_calc_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$obSQLWorkareaMemoryInfo) TableName() string {
	return "gv$ob_sql_workarea_memory_info"
}
	

// Gv$obSQLWorkareaMemoryInfoColumns get sql column name.获取数据库列名
var Gv$obSQLWorkareaMemoryInfoColumns = struct { 
	MaxWorkareaSize string
	WorkareaHoldSize string
	MaxAutoWorkareaSize string
	MemTarget string
	TotalMemUsed string
	GlobalMemBound string
	DriftSize string
	WorkareaCount string
	ManualCalcCount string    
	}{ 
		MaxWorkareaSize:"max_workarea_size",  
		WorkareaHoldSize:"workarea_hold_size",  
		MaxAutoWorkareaSize:"max_auto_workarea_size",  
		MemTarget:"mem_target",  
		TotalMemUsed:"total_mem_used",  
		GlobalMemBound:"global_mem_bound",  
		DriftSize:"drift_size",  
		WorkareaCount:"workarea_count",  
		ManualCalcCount:"manual_calc_count",             
	}
	
// Gv$obTransTableStatus [...]		
type	Gv$obTransTableStatus	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
EndLogID	int64	`gorm:"column:END_LOG_ID" json:"end_log_id"`			
TransCnt	int64	`gorm:"column:TRANS_CNT" json:"trans_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$obTransTableStatus) TableName() string {
	return "gv$ob_trans_table_status"
}
	

// Gv$obTransTableStatusColumns get sql column name.获取数据库列名
var Gv$obTransTableStatusColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	EndLogID string
	TransCnt string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		EndLogID:"END_LOG_ID",  
		TransCnt:"TRANS_CNT",             
	}
	
// Gv$obrpcIncoming [...]		
type	Gv$obrpcIncoming	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
Pcode	int64	`gorm:"column:PCODE" json:"pcode"`			
PcodeName	string	`gorm:"column:PCODE_NAME" json:"pcode_name"`			
Count	int64	`gorm:"column:COUNT" json:"count"`			
TotalSize	int64	`gorm:"column:TOTAL_SIZE" json:"total_size"`			
NetTime	int64	`gorm:"column:NET_TIME" json:"net_time"`			
WaitTime	int64	`gorm:"column:WAIT_TIME" json:"wait_time"`			
QueueTime	int64	`gorm:"column:QUEUE_TIME" json:"queue_time"`			
ProcessTime	int64	`gorm:"column:PROCESS_TIME" json:"process_time"`			
LastTimestamp	time.Time	`gorm:"column:LAST_TIMESTAMP" json:"last_timestamp"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$obrpcIncoming) TableName() string {
	return "gv$obrpc_incoming"
}
	

// Gv$obrpcIncomingColumns get sql column name.获取数据库列名
var Gv$obrpcIncomingColumns = struct { 
	TenantID string
	IP string
	Port string
	Pcode string
	PcodeName string
	Count string
	TotalSize string
	NetTime string
	WaitTime string
	QueueTime string
	ProcessTime string
	LastTimestamp string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		Pcode:"PCODE",  
		PcodeName:"PCODE_NAME",  
		Count:"COUNT",  
		TotalSize:"TOTAL_SIZE",  
		NetTime:"NET_TIME",  
		WaitTime:"WAIT_TIME",  
		QueueTime:"QUEUE_TIME",  
		ProcessTime:"PROCESS_TIME",  
		LastTimestamp:"LAST_TIMESTAMP",             
	}
	
// Gv$obrpcOutgoing [...]		
type	Gv$obrpcOutgoing	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
Pcode	int64	`gorm:"column:PCODE" json:"pcode"`			
PcodeName	string	`gorm:"column:PCODE_NAME" json:"pcode_name"`			
Count	int64	`gorm:"column:COUNT" json:"count"`			
TotalTime	int64	`gorm:"column:TOTAL_TIME" json:"total_time"`			
TotalSize	int64	`gorm:"column:TOTAL_SIZE" json:"total_size"`			
Failure	int64	`gorm:"column:FAILURE" json:"failure"`			
Timeout	int64	`gorm:"column:TIMEOUT" json:"timeout"`			
Sync	int64	`gorm:"column:SYNC" json:"sync"`			
Async	int64	`gorm:"column:ASYNC" json:"async"`			
LastTimestamp	time.Time	`gorm:"column:LAST_TIMESTAMP" json:"last_timestamp"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$obrpcOutgoing) TableName() string {
	return "gv$obrpc_outgoing"
}
	

// Gv$obrpcOutgoingColumns get sql column name.获取数据库列名
var Gv$obrpcOutgoingColumns = struct { 
	TenantID string
	IP string
	Port string
	Pcode string
	PcodeName string
	Count string
	TotalTime string
	TotalSize string
	Failure string
	Timeout string
	Sync string
	Async string
	LastTimestamp string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		Pcode:"PCODE",  
		PcodeName:"PCODE_NAME",  
		Count:"COUNT",  
		TotalTime:"TOTAL_TIME",  
		TotalSize:"TOTAL_SIZE",  
		Failure:"FAILURE",  
		Timeout:"TIMEOUT",  
		Sync:"SYNC",  
		Async:"ASYNC",  
		LastTimestamp:"LAST_TIMESTAMP",             
	}
	
// Gv$outline [...]		
type	Gv$outline	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
OutlineID	int64	`gorm:"column:outline_id" json:"outline_id"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
OutlineName	string	`gorm:"column:outline_name" json:"outline_name"`			
VisibleSignature	string	`gorm:"column:visible_signature" json:"visible_signature"`			
SQLText	string	`gorm:"column:sql_text" json:"sql_text"`			
OutlineTarget	string	`gorm:"column:outline_target" json:"outline_target"`			
OutlineSQL	string	`gorm:"column:outline_sql" json:"outline_sql"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$outline) TableName() string {
	return "gv$outline"
}
	

// Gv$outlineColumns get sql column name.获取数据库列名
var Gv$outlineColumns = struct { 
	TenantID string
	DatabaseID string
	OutlineID string
	DatabaseName string
	OutlineName string
	VisibleSignature string
	SQLText string
	OutlineTarget string
	OutlineSQL string    
	}{ 
		TenantID:"tenant_id",  
		DatabaseID:"database_id",  
		OutlineID:"outline_id",  
		DatabaseName:"database_name",  
		OutlineName:"outline_name",  
		VisibleSignature:"visible_signature",  
		SQLText:"sql_text",  
		OutlineTarget:"outline_target",  
		OutlineSQL:"outline_sql",             
	}
	
// Gv$partition [...]		
type	Gv$partition	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
PartitionChecksum	int64	`gorm:"column:partition_checksum" json:"partition_checksum"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
Rebuild	int64	`gorm:"column:rebuild" json:"rebuild"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
Status	string	`gorm:"column:status" json:"status"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$partition) TableName() string {
	return "gv$partition"
}
	

// Gv$partitionColumns get sql column name.获取数据库列名
var Gv$partitionColumns = struct { 
	TenantID string
	TableID string
	TablegroupID string
	PartitionID string
	SvrIP string
	SvrPort string
	SQLPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	RowCount string
	DataSize string
	DataVersion string
	PartitionChecksum string
	DataChecksum string
	RowChecksum string
	ColumnChecksum string
	Rebuild string
	ReplicaType string
	RequiredSize string
	Status string
	IsRestore string
	Quorum string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		TablegroupID:"tablegroup_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLPort:"sql_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		PartitionChecksum:"partition_checksum",  
		DataChecksum:"data_checksum",  
		RowChecksum:"row_checksum",  
		ColumnChecksum:"column_checksum",  
		Rebuild:"rebuild",  
		ReplicaType:"replica_type",  
		RequiredSize:"required_size",  
		Status:"status",  
		IsRestore:"is_restore",  
		Quorum:"quorum",             
	}
	
// Gv$partitionAudit [...]		
type	Gv$partitionAudit	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
BaseRowCount	int64	`gorm:"column:base_row_count" json:"base_row_count"`			
InsertRowCount	int64	`gorm:"column:insert_row_count" json:"insert_row_count"`			
DeleteRowCount	int64	`gorm:"column:delete_row_count" json:"delete_row_count"`			
UpdateRowCount	int64	`gorm:"column:update_row_count" json:"update_row_count"`			
QueryRowCount	int64	`gorm:"column:query_row_count" json:"query_row_count"`			
InsertSQLCount	int64	`gorm:"column:insert_sql_count" json:"insert_sql_count"`			
DeleteSQLCount	int64	`gorm:"column:delete_sql_count" json:"delete_sql_count"`			
UpdateSQLCount	int64	`gorm:"column:update_sql_count" json:"update_sql_count"`			
QuerySQLCount	int64	`gorm:"column:query_sql_count" json:"query_sql_count"`			
TransCount	int64	`gorm:"column:trans_count" json:"trans_count"`			
SQLCount	int64	`gorm:"column:sql_count" json:"sql_count"`			
RollbackInsertRowCount	int64	`gorm:"column:rollback_insert_row_count" json:"rollback_insert_row_count"`			
RollbackDeleteRowCount	int64	`gorm:"column:rollback_delete_row_count" json:"rollback_delete_row_count"`			
RollbackUpdateRowCount	int64	`gorm:"column:rollback_update_row_count" json:"rollback_update_row_count"`			
RollbackInsertSQLCount	int64	`gorm:"column:rollback_insert_sql_count" json:"rollback_insert_sql_count"`			
RollbackDeleteSQLCount	int64	`gorm:"column:rollback_delete_sql_count" json:"rollback_delete_sql_count"`			
RollbackUpdateSQLCount	int64	`gorm:"column:rollback_update_sql_count" json:"rollback_update_sql_count"`			
RollbackTransCount	int64	`gorm:"column:rollback_trans_count" json:"rollback_trans_count"`			
RollbackSQLCount	int64	`gorm:"column:rollback_sql_count" json:"rollback_sql_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$partitionAudit) TableName() string {
	return "gv$partition_audit"
}
	

// Gv$partitionAuditColumns get sql column name.获取数据库列名
var Gv$partitionAuditColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	PartitionStatus string
	BaseRowCount string
	InsertRowCount string
	DeleteRowCount string
	UpdateRowCount string
	QueryRowCount string
	InsertSQLCount string
	DeleteSQLCount string
	UpdateSQLCount string
	QuerySQLCount string
	TransCount string
	SQLCount string
	RollbackInsertRowCount string
	RollbackDeleteRowCount string
	RollbackUpdateRowCount string
	RollbackInsertSQLCount string
	RollbackDeleteSQLCount string
	RollbackUpdateSQLCount string
	RollbackTransCount string
	RollbackSQLCount string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		PartitionStatus:"partition_status",  
		BaseRowCount:"base_row_count",  
		InsertRowCount:"insert_row_count",  
		DeleteRowCount:"delete_row_count",  
		UpdateRowCount:"update_row_count",  
		QueryRowCount:"query_row_count",  
		InsertSQLCount:"insert_sql_count",  
		DeleteSQLCount:"delete_sql_count",  
		UpdateSQLCount:"update_sql_count",  
		QuerySQLCount:"query_sql_count",  
		TransCount:"trans_count",  
		SQLCount:"sql_count",  
		RollbackInsertRowCount:"rollback_insert_row_count",  
		RollbackDeleteRowCount:"rollback_delete_row_count",  
		RollbackUpdateRowCount:"rollback_update_row_count",  
		RollbackInsertSQLCount:"rollback_insert_sql_count",  
		RollbackDeleteSQLCount:"rollback_delete_sql_count",  
		RollbackUpdateSQLCount:"rollback_update_sql_count",  
		RollbackTransCount:"rollback_trans_count",  
		RollbackSQLCount:"rollback_sql_count",             
	}
	
// Gv$planCachePlanExplain [...]		
type	Gv$planCachePlanExplain	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
PlanDepth	int64	`gorm:"column:PLAN_DEPTH" json:"plan_depth"`			
PlanLineID	int64	`gorm:"column:PLAN_LINE_ID" json:"plan_line_id"`			
Operator	string	`gorm:"column:OPERATOR" json:"operator"`			
Name	string	`gorm:"column:NAME" json:"name"`			
Rows	int64	`gorm:"column:ROWS" json:"rows"`			
Cost	int64	`gorm:"column:COST" json:"cost"`			
Property	string	`gorm:"column:PROPERTY" json:"property"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$planCachePlanExplain) TableName() string {
	return "gv$plan_cache_plan_explain"
}
	

// Gv$planCachePlanExplainColumns get sql column name.获取数据库列名
var Gv$planCachePlanExplainColumns = struct { 
	TenantID string
	IP string
	Port string
	PlanID string
	PlanDepth string
	PlanLineID string
	Operator string
	Name string
	Rows string
	Cost string
	Property string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		PlanID:"PLAN_ID",  
		PlanDepth:"PLAN_DEPTH",  
		PlanLineID:"PLAN_LINE_ID",  
		Operator:"OPERATOR",  
		Name:"NAME",  
		Rows:"ROWS",  
		Cost:"COST",  
		Property:"PROPERTY",             
	}
	
// Gv$planCachePlanStat [...]		
type	Gv$planCachePlanStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
PlanID	int64	`gorm:"column:plan_id" json:"plan_id"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
Type	int64	`gorm:"column:type" json:"type"`			
IsBindSensitive	int64	`gorm:"column:is_bind_sensitive" json:"is_bind_sensitive"`			
IsBindAware	int64	`gorm:"column:is_bind_aware" json:"is_bind_aware"`			
DbID	uint64	`gorm:"column:db_id" json:"db_id"`			
Statement	string	`gorm:"column:statement" json:"statement"`			
QuerySQL	string	`gorm:"column:query_sql" json:"query_sql"`			
SpecialParams	string	`gorm:"column:special_params" json:"special_params"`			
ParamInfos	string	`gorm:"column:param_infos" json:"param_infos"`			
SysVars	string	`gorm:"column:sys_vars" json:"sys_vars"`			
PlanHash	uint64	`gorm:"column:plan_hash" json:"plan_hash"`			
FirstLoadTime	time.Time	`gorm:"column:first_load_time" json:"first_load_time"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
MergedVersion	int64	`gorm:"column:merged_version" json:"merged_version"`			
LastActiveTime	time.Time	`gorm:"column:last_active_time" json:"last_active_time"`			
AvgExeUsec	int64	`gorm:"column:avg_exe_usec" json:"avg_exe_usec"`			
SlowestExeTime	time.Time	`gorm:"column:slowest_exe_time" json:"slowest_exe_time"`			
SlowestExeUsec	int64	`gorm:"column:slowest_exe_usec" json:"slowest_exe_usec"`			
SlowCount	int64	`gorm:"column:slow_count" json:"slow_count"`			
HitCount	int64	`gorm:"column:hit_count" json:"hit_count"`			
PlanSize	int64	`gorm:"column:plan_size" json:"plan_size"`			
Executions	int64	`gorm:"column:executions" json:"executions"`			
DiskReads	int64	`gorm:"column:disk_reads" json:"disk_reads"`			
DirectWrites	int64	`gorm:"column:direct_writes" json:"direct_writes"`			
BufferGets	int64	`gorm:"column:buffer_gets" json:"buffer_gets"`			
ApplicationWaitTime	uint64	`gorm:"column:application_wait_time" json:"application_wait_time"`			
ConcurrencyWaitTime	uint64	`gorm:"column:concurrency_wait_time" json:"concurrency_wait_time"`			
UserIoWaitTime	uint64	`gorm:"column:user_io_wait_time" json:"user_io_wait_time"`			
RowsProcessed	int64	`gorm:"column:rows_processed" json:"rows_processed"`			
ElapsedTime	uint64	`gorm:"column:elapsed_time" json:"elapsed_time"`			
CPUTime	uint64	`gorm:"column:cpu_time" json:"cpu_time"`			
LargeQuerys	int64	`gorm:"column:large_querys" json:"large_querys"`			
DelayedLargeQuerys	int64	`gorm:"column:delayed_large_querys" json:"delayed_large_querys"`			
DelayedPxQuerys	int64	`gorm:"column:delayed_px_querys" json:"delayed_px_querys"`			
OutlineVersion	int64	`gorm:"column:outline_version" json:"outline_version"`			
OutlineID	int64	`gorm:"column:outline_id" json:"outline_id"`			
OutlineData	string	`gorm:"column:outline_data" json:"outline_data"`			
AcsSelInfo	string	`gorm:"column:acs_sel_info" json:"acs_sel_info"`			
TableScan	int8	`gorm:"column:table_scan" json:"table_scan"`			
Evolution	int8	`gorm:"column:evolution" json:"evolution"`			
EvoExecutions	int64	`gorm:"column:evo_executions" json:"evo_executions"`			
EvoCPUTime	uint64	`gorm:"column:evo_cpu_time" json:"evo_cpu_time"`			
TimeoutCount	int64	`gorm:"column:timeout_count" json:"timeout_count"`			
PsStmtID	int64	`gorm:"column:ps_stmt_id" json:"ps_stmt_id"`			
Sessid	uint64	`gorm:"column:sessid" json:"sessid"`			
TempTables	string	`gorm:"column:temp_tables" json:"temp_tables"`			
IsUseJit	int8	`gorm:"column:is_use_jit" json:"is_use_jit"`			
ObjectType	string	`gorm:"column:object_type" json:"object_type"`			
HintsInfo	string	`gorm:"column:hints_info" json:"hints_info"`			
HintsAllWorked	int8	`gorm:"column:hints_all_worked" json:"hints_all_worked"`			
PlSchemaID	uint64	`gorm:"column:pl_schema_id" json:"pl_schema_id"`			
IsBatchedMultiStmt	int8	`gorm:"column:is_batched_multi_stmt" json:"is_batched_multi_stmt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$planCachePlanStat) TableName() string {
	return "gv$plan_cache_plan_stat"
}
	

// Gv$planCachePlanStatColumns get sql column name.获取数据库列名
var Gv$planCachePlanStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	PlanID string
	SQLID string
	Type string
	IsBindSensitive string
	IsBindAware string
	DbID string
	Statement string
	QuerySQL string
	SpecialParams string
	ParamInfos string
	SysVars string
	PlanHash string
	FirstLoadTime string
	SchemaVersion string
	MergedVersion string
	LastActiveTime string
	AvgExeUsec string
	SlowestExeTime string
	SlowestExeUsec string
	SlowCount string
	HitCount string
	PlanSize string
	Executions string
	DiskReads string
	DirectWrites string
	BufferGets string
	ApplicationWaitTime string
	ConcurrencyWaitTime string
	UserIoWaitTime string
	RowsProcessed string
	ElapsedTime string
	CPUTime string
	LargeQuerys string
	DelayedLargeQuerys string
	DelayedPxQuerys string
	OutlineVersion string
	OutlineID string
	OutlineData string
	AcsSelInfo string
	TableScan string
	Evolution string
	EvoExecutions string
	EvoCPUTime string
	TimeoutCount string
	PsStmtID string
	Sessid string
	TempTables string
	IsUseJit string
	ObjectType string
	HintsInfo string
	HintsAllWorked string
	PlSchemaID string
	IsBatchedMultiStmt string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		PlanID:"plan_id",  
		SQLID:"sql_id",  
		Type:"type",  
		IsBindSensitive:"is_bind_sensitive",  
		IsBindAware:"is_bind_aware",  
		DbID:"db_id",  
		Statement:"statement",  
		QuerySQL:"query_sql",  
		SpecialParams:"special_params",  
		ParamInfos:"param_infos",  
		SysVars:"sys_vars",  
		PlanHash:"plan_hash",  
		FirstLoadTime:"first_load_time",  
		SchemaVersion:"schema_version",  
		MergedVersion:"merged_version",  
		LastActiveTime:"last_active_time",  
		AvgExeUsec:"avg_exe_usec",  
		SlowestExeTime:"slowest_exe_time",  
		SlowestExeUsec:"slowest_exe_usec",  
		SlowCount:"slow_count",  
		HitCount:"hit_count",  
		PlanSize:"plan_size",  
		Executions:"executions",  
		DiskReads:"disk_reads",  
		DirectWrites:"direct_writes",  
		BufferGets:"buffer_gets",  
		ApplicationWaitTime:"application_wait_time",  
		ConcurrencyWaitTime:"concurrency_wait_time",  
		UserIoWaitTime:"user_io_wait_time",  
		RowsProcessed:"rows_processed",  
		ElapsedTime:"elapsed_time",  
		CPUTime:"cpu_time",  
		LargeQuerys:"large_querys",  
		DelayedLargeQuerys:"delayed_large_querys",  
		DelayedPxQuerys:"delayed_px_querys",  
		OutlineVersion:"outline_version",  
		OutlineID:"outline_id",  
		OutlineData:"outline_data",  
		AcsSelInfo:"acs_sel_info",  
		TableScan:"table_scan",  
		Evolution:"evolution",  
		EvoExecutions:"evo_executions",  
		EvoCPUTime:"evo_cpu_time",  
		TimeoutCount:"timeout_count",  
		PsStmtID:"ps_stmt_id",  
		Sessid:"sessid",  
		TempTables:"temp_tables",  
		IsUseJit:"is_use_jit",  
		ObjectType:"object_type",  
		HintsInfo:"hints_info",  
		HintsAllWorked:"hints_all_worked",  
		PlSchemaID:"pl_schema_id",  
		IsBatchedMultiStmt:"is_batched_multi_stmt",             
	}
	
// Gv$planCacheReferenceInfo [...]		
type	Gv$planCacheReferenceInfo	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
PcRefPlanLocal	int64	`gorm:"column:PC_REF_PLAN_LOCAL" json:"pc_ref_plan_local"`			
PcRefPlanRemote	int64	`gorm:"column:PC_REF_PLAN_REMOTE" json:"pc_ref_plan_remote"`			
PcRefPlanDist	int64	`gorm:"column:PC_REF_PLAN_DIST" json:"pc_ref_plan_dist"`			
PcRefPlanArr	int64	`gorm:"column:PC_REF_PLAN_ARR" json:"pc_ref_plan_arr"`			
PcRefPl	int64	`gorm:"column:PC_REF_PL" json:"pc_ref_pl"`			
PcRefPlStat	int64	`gorm:"column:PC_REF_PL_STAT" json:"pc_ref_pl_stat"`			
PlanGen	int64	`gorm:"column:PLAN_GEN" json:"plan_gen"`			
CliQuery	int64	`gorm:"column:CLI_QUERY" json:"cli_query"`			
OutlineExec	int64	`gorm:"column:OUTLINE_EXEC" json:"outline_exec"`			
PlanExplain	int64	`gorm:"column:PLAN_EXPLAIN" json:"plan_explain"`			
AsynBaseline	int64	`gorm:"column:ASYN_BASELINE" json:"asyn_baseline"`			
LoadBaseline	int64	`gorm:"column:LOAD_BASELINE" json:"load_baseline"`			
PsExec	int64	`gorm:"column:PS_EXEC" json:"ps_exec"`			
GvSQL	int64	`gorm:"column:GV_SQL" json:"gv_sql"`			
PlAnon	int64	`gorm:"column:PL_ANON" json:"pl_anon"`			
PlRoutine	int64	`gorm:"column:PL_ROUTINE" json:"pl_routine"`			
PackageVar	int64	`gorm:"column:PACKAGE_VAR" json:"package_var"`			
PackageType	int64	`gorm:"column:PACKAGE_TYPE" json:"package_type"`			
PackageSpec	int64	`gorm:"column:PACKAGE_SPEC" json:"package_spec"`			
PackageBody	int64	`gorm:"column:PACKAGE_BODY" json:"package_body"`			
PackageResv	int64	`gorm:"column:PACKAGE_RESV" json:"package_resv"`			
GetPkg	int64	`gorm:"column:GET_PKG" json:"get_pkg"`			
IndexBuilder	int64	`gorm:"column:INDEX_BUILDER" json:"index_b_ui_lder"`			
PcvSet	int64	`gorm:"column:PCV_SET" json:"pcv_set"`			
PcvRd	int64	`gorm:"column:PCV_RD" json:"pcv_rd"`			
PcvWr	int64	`gorm:"column:PCV_WR" json:"pcv_wr"`			
PcvGetPlanKey	int64	`gorm:"column:PCV_GET_PLAN_KEY" json:"pcv_get_plan_key"`			
PcvGetPlKey	int64	`gorm:"column:PCV_GET_PL_KEY" json:"pcv_get_pl_key"`			
PcvExpireByUsed	int64	`gorm:"column:PCV_EXPIRE_BY_USED" json:"pcv_expire_by_used"`			
PcvExpireByMem	int64	`gorm:"column:PCV_EXPIRE_BY_MEM" json:"pcv_expire_by_mem"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$planCacheReferenceInfo) TableName() string {
	return "gv$plan_cache_reference_info"
}
	

// Gv$planCacheReferenceInfoColumns get sql column name.获取数据库列名
var Gv$planCacheReferenceInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	PcRefPlanLocal string
	PcRefPlanRemote string
	PcRefPlanDist string
	PcRefPlanArr string
	PcRefPl string
	PcRefPlStat string
	PlanGen string
	CliQuery string
	OutlineExec string
	PlanExplain string
	AsynBaseline string
	LoadBaseline string
	PsExec string
	GvSQL string
	PlAnon string
	PlRoutine string
	PackageVar string
	PackageType string
	PackageSpec string
	PackageBody string
	PackageResv string
	GetPkg string
	IndexBuilder string
	PcvSet string
	PcvRd string
	PcvWr string
	PcvGetPlanKey string
	PcvGetPlKey string
	PcvExpireByUsed string
	PcvExpireByMem string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		PcRefPlanLocal:"PC_REF_PLAN_LOCAL",  
		PcRefPlanRemote:"PC_REF_PLAN_REMOTE",  
		PcRefPlanDist:"PC_REF_PLAN_DIST",  
		PcRefPlanArr:"PC_REF_PLAN_ARR",  
		PcRefPl:"PC_REF_PL",  
		PcRefPlStat:"PC_REF_PL_STAT",  
		PlanGen:"PLAN_GEN",  
		CliQuery:"CLI_QUERY",  
		OutlineExec:"OUTLINE_EXEC",  
		PlanExplain:"PLAN_EXPLAIN",  
		AsynBaseline:"ASYN_BASELINE",  
		LoadBaseline:"LOAD_BASELINE",  
		PsExec:"PS_EXEC",  
		GvSQL:"GV_SQL",  
		PlAnon:"PL_ANON",  
		PlRoutine:"PL_ROUTINE",  
		PackageVar:"PACKAGE_VAR",  
		PackageType:"PACKAGE_TYPE",  
		PackageSpec:"PACKAGE_SPEC",  
		PackageBody:"PACKAGE_BODY",  
		PackageResv:"PACKAGE_RESV",  
		GetPkg:"GET_PKG",  
		IndexBuilder:"INDEX_BUILDER",  
		PcvSet:"PCV_SET",  
		PcvRd:"PCV_RD",  
		PcvWr:"PCV_WR",  
		PcvGetPlanKey:"PCV_GET_PLAN_KEY",  
		PcvGetPlKey:"PCV_GET_PL_KEY",  
		PcvExpireByUsed:"PCV_EXPIRE_BY_USED",  
		PcvExpireByMem:"PCV_EXPIRE_BY_MEM",             
	}
	
// Gv$planCacheStat [...]		
type	Gv$planCacheStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
SQLNum	int64	`gorm:"column:sql_num" json:"sql_num"`			
MemUsed	int64	`gorm:"column:mem_used" json:"mem_used"`			
MemHold	int64	`gorm:"column:mem_hold" json:"mem_hold"`			
AccessCount	int64	`gorm:"column:access_count" json:"access_count"`			
HitCount	int64	`gorm:"column:hit_count" json:"hit_count"`			
HitRate	int64	`gorm:"column:hit_rate" json:"hit_rate"`			
PlanNum	int64	`gorm:"column:plan_num" json:"plan_num"`			
MemLimit	int64	`gorm:"column:mem_limit" json:"mem_limit"`			
HashBucket	int64	`gorm:"column:hash_bucket" json:"hash_bucket"`			
StmtkeyNum	int64	`gorm:"column:stmtkey_num" json:"stmtkey_num"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$planCacheStat) TableName() string {
	return "gv$plan_cache_stat"
}
	

// Gv$planCacheStatColumns get sql column name.获取数据库列名
var Gv$planCacheStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	SQLNum string
	MemUsed string
	MemHold string
	AccessCount string
	HitCount string
	HitRate string
	PlanNum string
	MemLimit string
	HashBucket string
	StmtkeyNum string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLNum:"sql_num",  
		MemUsed:"mem_used",  
		MemHold:"mem_hold",  
		AccessCount:"access_count",  
		HitCount:"hit_count",  
		HitRate:"hit_rate",  
		PlanNum:"plan_num",  
		MemLimit:"mem_limit",  
		HashBucket:"hash_bucket",  
		StmtkeyNum:"stmtkey_num",             
	}
	
// Gv$psItemInfo [...]		
type	Gv$psItemInfo	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
StmtID	int64	`gorm:"column:stmt_id" json:"stmt_id"`			
DbID	int64	`gorm:"column:db_id" json:"db_id"`			
PsSQL	string	`gorm:"column:ps_sql" json:"ps_sql"`			
ParamCount	int64	`gorm:"column:param_count" json:"param_count"`			
StmtItemRefCount	int64	`gorm:"column:stmt_item_ref_count" json:"stmt_item_ref_count"`			
StmtInfoRefCount	int64	`gorm:"column:stmt_info_ref_count" json:"stmt_info_ref_count"`			
MemHold	int64	`gorm:"column:mem_hold" json:"mem_hold"`			
StmtType	int64	`gorm:"column:stmt_type" json:"stmt_type"`			
Checksum	int64	`gorm:"column:checksum" json:"checksum"`			
Expired	int8	`gorm:"column:expired" json:"expired"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$psItemInfo) TableName() string {
	return "gv$ps_item_info"
}
	

// Gv$psItemInfoColumns get sql column name.获取数据库列名
var Gv$psItemInfoColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	StmtID string
	DbID string
	PsSQL string
	ParamCount string
	StmtItemRefCount string
	StmtInfoRefCount string
	MemHold string
	StmtType string
	Checksum string
	Expired string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		StmtID:"stmt_id",  
		DbID:"db_id",  
		PsSQL:"ps_sql",  
		ParamCount:"param_count",  
		StmtItemRefCount:"stmt_item_ref_count",  
		StmtInfoRefCount:"stmt_info_ref_count",  
		MemHold:"mem_hold",  
		StmtType:"stmt_type",  
		Checksum:"checksum",  
		Expired:"expired",             
	}
	
// Gv$psStat [...]		
type	Gv$psStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
StmtCount	int64	`gorm:"column:stmt_count" json:"stmt_count"`			
HitCount	int64	`gorm:"column:hit_count" json:"hit_count"`			
AccessCount	int64	`gorm:"column:access_count" json:"access_count"`			
MemHold	int64	`gorm:"column:mem_hold" json:"mem_hold"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$psStat) TableName() string {
	return "gv$ps_stat"
}
	

// Gv$psStatColumns get sql column name.获取数据库列名
var Gv$psStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	StmtCount string
	HitCount string
	AccessCount string
	MemHold string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		StmtCount:"stmt_count",  
		HitCount:"hit_count",  
		AccessCount:"access_count",  
		MemHold:"mem_hold",             
	}
	
// Gv$serverMemstore [...]		
type	Gv$serverMemstore	struct {		
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
Active	int64	`gorm:"column:ACTIVE" json:"active"`			
Total	int64	`gorm:"column:TOTAL" json:"total"`			
FreezeTrigger	int64	`gorm:"column:FREEZE_TRIGGER" json:"freeze_trigger"`			
MemLimit	int64	`gorm:"column:MEM_LIMIT" json:"mem_limit"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$serverMemstore) TableName() string {
	return "gv$server_memstore"
}
	

// Gv$serverMemstoreColumns get sql column name.获取数据库列名
var Gv$serverMemstoreColumns = struct { 
	IP string
	Port string
	Active string
	Total string
	FreezeTrigger string
	MemLimit string    
	}{ 
		IP:"IP",  
		Port:"PORT",  
		Active:"ACTIVE",  
		Total:"TOTAL",  
		FreezeTrigger:"FREEZE_TRIGGER",  
		MemLimit:"MEM_LIMIT",             
	}
	
// Gv$serverSchemaInfo [...]		
type	Gv$serverSchemaInfo	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
RefreshedSchemaVersion	int64	`gorm:"column:REFRESHED_SCHEMA_VERSION" json:"refreshed_schema_version"`			
ReceivedSchemaVersion	int64	`gorm:"column:RECEIVED_SCHEMA_VERSION" json:"received_schema_version"`			
SchemaCount	int64	`gorm:"column:SCHEMA_COUNT" json:"schema_count"`			
SchemaSize	int64	`gorm:"column:SCHEMA_SIZE" json:"schema_size"`			
MinSstableSchemaVersion	int64	`gorm:"column:MIN_SSTABLE_SCHEMA_VERSION" json:"min_sstable_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$serverSchemaInfo) TableName() string {
	return "gv$server_schema_info"
}
	

// Gv$serverSchemaInfoColumns get sql column name.获取数据库列名
var Gv$serverSchemaInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	RefreshedSchemaVersion string
	ReceivedSchemaVersion string
	SchemaCount string
	SchemaSize string
	MinSstableSchemaVersion string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		RefreshedSchemaVersion:"REFRESHED_SCHEMA_VERSION",  
		ReceivedSchemaVersion:"RECEIVED_SCHEMA_VERSION",  
		SchemaCount:"SCHEMA_COUNT",  
		SchemaSize:"SCHEMA_SIZE",  
		MinSstableSchemaVersion:"MIN_SSTABLE_SCHEMA_VERSION",             
	}
	
// Gv$sessionEvent [...]		
type	Gv$sessionEvent	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
EventID	int64	`gorm:"column:EVENT_ID" json:"event_id"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
WaitClassID	int64	`gorm:"column:WAIT_CLASS_ID" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:WAIT_CLASS#" json:"wait_clas_s#"`			
WaitClass	string	`gorm:"column:WAIT_CLASS" json:"wait_class"`			
TotalWaits	int64	`gorm:"column:TOTAL_WAITS" json:"total_waits"`			
TotalTimeouts	int64	`gorm:"column:TOTAL_TIMEOUTS" json:"total_timeouts"`			
TimeWaited	float64	`gorm:"column:TIME_WAITED" json:"time_waited"`			
MaxWait	float64	`gorm:"column:MAX_WAIT" json:"max_wait"`			
AverageWait	float64	`gorm:"column:AVERAGE_WAIT" json:"average_wait"`			
TimeWaitedMicro	int64	`gorm:"column:TIME_WAITED_MICRO" json:"time_waited_micro"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sessionEvent) TableName() string {
	return "gv$session_event"
}
	

// Gv$sessionEventColumns get sql column name.获取数据库列名
var Gv$sessionEventColumns = struct { 
	Sid string
	ConID string
	SvrIP string
	SvrPort string
	EventID string
	Event string
	WaitClassID string
	WaitClass# string
	WaitClass string
	TotalWaits string
	TotalTimeouts string
	TimeWaited string
	MaxWait string
	AverageWait string
	TimeWaitedMicro string    
	}{ 
		Sid:"SID",  
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		EventID:"EVENT_ID",  
		Event:"EVENT",  
		WaitClassID:"WAIT_CLASS_ID",  
		WaitClass#:"WAIT_CLASS#",  
		WaitClass:"WAIT_CLASS",  
		TotalWaits:"TOTAL_WAITS",  
		TotalTimeouts:"TOTAL_TIMEOUTS",  
		TimeWaited:"TIME_WAITED",  
		MaxWait:"MAX_WAIT",  
		AverageWait:"AVERAGE_WAIT",  
		TimeWaitedMicro:"TIME_WAITED_MICRO",             
	}
	
// Gv$sessionLongops [...]		
type	Gv$sessionLongops	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
Opname	string	`gorm:"column:OPNAME" json:"opname"`			
Target	string	`gorm:"column:TARGET" json:"target"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
StartTime	int64	`gorm:"column:START_TIME" json:"start_time"`			
ElapsedSeconds	float64	`gorm:"column:ELAPSED_SECONDS" json:"elapsed_seconds"`			
TimeRemaining	int64	`gorm:"column:TIME_REMAINING" json:"time_remaining"`			
LastUpdateTime	int64	`gorm:"column:LAST_UPDATE_TIME" json:"last_update_time"`			
Message	string	`gorm:"column:MESSAGE" json:"message"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sessionLongops) TableName() string {
	return "gv$session_longops"
}
	

// Gv$sessionLongopsColumns get sql column name.获取数据库列名
var Gv$sessionLongopsColumns = struct { 
	Sid string
	Opname string
	Target string
	SvrIP string
	SvrPort string
	StartTime string
	ElapsedSeconds string
	TimeRemaining string
	LastUpdateTime string
	Message string    
	}{ 
		Sid:"SID",  
		Opname:"OPNAME",  
		Target:"TARGET",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		StartTime:"START_TIME",  
		ElapsedSeconds:"ELAPSED_SECONDS",  
		TimeRemaining:"TIME_REMAINING",  
		LastUpdateTime:"LAST_UPDATE_TIME",  
		Message:"MESSAGE",             
	}
	
// Gv$sessionWait [...]		
type	Gv$sessionWait	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
P1text	string	`gorm:"column:P1TEXT" json:"p1_text"`			
P1	uint64	`gorm:"column:P1" json:"p1"`			
P2text	string	`gorm:"column:P2TEXT" json:"p2_text"`			
P2	uint64	`gorm:"column:P2" json:"p2"`			
P3text	string	`gorm:"column:P3TEXT" json:"p3_text"`			
P3	uint64	`gorm:"column:P3" json:"p3"`			
WaitClassID	int64	`gorm:"column:WAIT_CLASS_ID" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:WAIT_CLASS#" json:"wait_clas_s#"`			
WaitClass	string	`gorm:"column:WAIT_CLASS" json:"wait_class"`			
State	string	`gorm:"column:STATE" json:"state"`			
WaitTimeMicro	int64	`gorm:"column:WAIT_TIME_MICRO" json:"wait_time_micro"`			
TimeRemainingMicro	int64	`gorm:"column:TIME_REMAINING_MICRO" json:"time_remaining_micro"`			
TimeSinceLastWaitMicro	int64	`gorm:"column:TIME_SINCE_LAST_WAIT_MICRO" json:"time_since_last_wait_micro"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sessionWait) TableName() string {
	return "gv$session_wait"
}
	

// Gv$sessionWaitColumns get sql column name.获取数据库列名
var Gv$sessionWaitColumns = struct { 
	Sid string
	ConID string
	SvrIP string
	SvrPort string
	Event string
	P1text string
	P1 string
	P2text string
	P2 string
	P3text string
	P3 string
	WaitClassID string
	WaitClass# string
	WaitClass string
	State string
	WaitTimeMicro string
	TimeRemainingMicro string
	TimeSinceLastWaitMicro string    
	}{ 
		Sid:"SID",  
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		Event:"EVENT",  
		P1text:"P1TEXT",  
		P1:"P1",  
		P2text:"P2TEXT",  
		P2:"P2",  
		P3text:"P3TEXT",  
		P3:"P3",  
		WaitClassID:"WAIT_CLASS_ID",  
		WaitClass#:"WAIT_CLASS#",  
		WaitClass:"WAIT_CLASS",  
		State:"STATE",  
		WaitTimeMicro:"WAIT_TIME_MICRO",  
		TimeRemainingMicro:"TIME_REMAINING_MICRO",  
		TimeSinceLastWaitMicro:"TIME_SINCE_LAST_WAIT_MICRO",             
	}
	
// Gv$sessionWaitHistory [...]		
type	Gv$sessionWaitHistory	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
Seq#	int64	`gorm:"column:SEQ#" json:"se_q#"`			
Event#	int64	`gorm:"column:EVENT#" json:"even_t#"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
P1text	string	`gorm:"column:P1TEXT" json:"p1_text"`			
P1	uint64	`gorm:"column:P1" json:"p1"`			
P2text	string	`gorm:"column:P2TEXT" json:"p2_text"`			
P2	uint64	`gorm:"column:P2" json:"p2"`			
P3text	string	`gorm:"column:P3TEXT" json:"p3_text"`			
P3	uint64	`gorm:"column:P3" json:"p3"`			
WaitTimeMicro	int64	`gorm:"column:WAIT_TIME_MICRO" json:"wait_time_micro"`			
TimeSinceLastWaitMicro	int64	`gorm:"column:TIME_SINCE_LAST_WAIT_MICRO" json:"time_since_last_wait_micro"`			
WaitTime	float64	`gorm:"column:WAIT_TIME" json:"wait_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sessionWaitHistory) TableName() string {
	return "gv$session_wait_history"
}
	

// Gv$sessionWaitHistoryColumns get sql column name.获取数据库列名
var Gv$sessionWaitHistoryColumns = struct { 
	Sid string
	ConID string
	SvrIP string
	SvrPort string
	Seq# string
	Event# string
	Event string
	P1text string
	P1 string
	P2text string
	P2 string
	P3text string
	P3 string
	WaitTimeMicro string
	TimeSinceLastWaitMicro string
	WaitTime string    
	}{ 
		Sid:"SID",  
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		Seq#:"SEQ#",  
		Event#:"EVENT#",  
		Event:"EVENT",  
		P1text:"P1TEXT",  
		P1:"P1",  
		P2text:"P2TEXT",  
		P2:"P2",  
		P3text:"P3TEXT",  
		P3:"P3",  
		WaitTimeMicro:"WAIT_TIME_MICRO",  
		TimeSinceLastWaitMicro:"TIME_SINCE_LAST_WAIT_MICRO",  
		WaitTime:"WAIT_TIME",             
	}
	
// Gv$sesstat [...]		
type	Gv$sesstat	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
Statistic#	int64	`gorm:"column:STATISTIC#" json:"statisti_c#"`			
Value	int64	`gorm:"column:VALUE" json:"value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sesstat) TableName() string {
	return "gv$sesstat"
}
	

// Gv$sesstatColumns get sql column name.获取数据库列名
var Gv$sesstatColumns = struct { 
	Sid string
	ConID string
	SvrIP string
	SvrPort string
	Statistic# string
	Value string    
	}{ 
		Sid:"SID",  
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		Statistic#:"STATISTIC#",  
		Value:"VALUE",             
	}
	
// Gv$sql [...]		
type	Gv$sql	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
SQLID	string	`gorm:"column:SQL_ID" json:"sql_id"`			
Type	int64	`gorm:"column:TYPE" json:"type"`			
SQLText	string	`gorm:"column:SQL_TEXT" json:"sql_text"`			
PlanHashValue	uint64	`gorm:"column:PLAN_HASH_VALUE" json:"plan_hash_value"`			
FirstLoadTime	time.Time	`gorm:"column:FIRST_LOAD_TIME" json:"first_load_time"`			
LastActiveTime	time.Time	`gorm:"column:LAST_ACTIVE_TIME" json:"last_active_time"`			
AvgExeUsec	int64	`gorm:"column:AVG_EXE_USEC" json:"avg_exe_usec"`			
SlowestExeTime	time.Time	`gorm:"column:SLOWEST_EXE_TIME" json:"slowest_exe_time"`			
SlowestExeUsec	int64	`gorm:"column:SLOWEST_EXE_USEC" json:"slowest_exe_usec"`			
SlowCount	int64	`gorm:"column:SLOW_COUNT" json:"slow_count"`			
HitCount	int64	`gorm:"column:HIT_COUNT" json:"hit_count"`			
PlanSize	int64	`gorm:"column:PLAN_SIZE" json:"plan_size"`			
Executions	int64	`gorm:"column:EXECUTIONS" json:"executions"`			
DiskReads	int64	`gorm:"column:DISK_READS" json:"disk_reads"`			
DirectWrites	int64	`gorm:"column:DIRECT_WRITES" json:"direct_writes"`			
BufferGets	int64	`gorm:"column:BUFFER_GETS" json:"buffer_gets"`			
ApplicationWaitTime	uint64	`gorm:"column:APPLICATION_WAIT_TIME" json:"application_wait_time"`			
ConcurrencyWaitTime	uint64	`gorm:"column:CONCURRENCY_WAIT_TIME" json:"concurrency_wait_time"`			
UserIoWaitTime	uint64	`gorm:"column:USER_IO_WAIT_TIME" json:"user_io_wait_time"`			
RowsProcessed	int64	`gorm:"column:ROWS_PROCESSED" json:"rows_processed"`			
ElapsedTime	uint64	`gorm:"column:ELAPSED_TIME" json:"elapsed_time"`			
CPUTime	uint64	`gorm:"column:CPU_TIME" json:"cpu_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sql) TableName() string {
	return "gv$sql"
}
	

// Gv$sqlColumns get sql column name.获取数据库列名
var Gv$sqlColumns = struct { 
	ConID string
	SvrIP string
	SvrPort string
	PlanID string
	SQLID string
	Type string
	SQLText string
	PlanHashValue string
	FirstLoadTime string
	LastActiveTime string
	AvgExeUsec string
	SlowestExeTime string
	SlowestExeUsec string
	SlowCount string
	HitCount string
	PlanSize string
	Executions string
	DiskReads string
	DirectWrites string
	BufferGets string
	ApplicationWaitTime string
	ConcurrencyWaitTime string
	UserIoWaitTime string
	RowsProcessed string
	ElapsedTime string
	CPUTime string    
	}{ 
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		PlanID:"PLAN_ID",  
		SQLID:"SQL_ID",  
		Type:"TYPE",  
		SQLText:"SQL_TEXT",  
		PlanHashValue:"PLAN_HASH_VALUE",  
		FirstLoadTime:"FIRST_LOAD_TIME",  
		LastActiveTime:"LAST_ACTIVE_TIME",  
		AvgExeUsec:"AVG_EXE_USEC",  
		SlowestExeTime:"SLOWEST_EXE_TIME",  
		SlowestExeUsec:"SLOWEST_EXE_USEC",  
		SlowCount:"SLOW_COUNT",  
		HitCount:"HIT_COUNT",  
		PlanSize:"PLAN_SIZE",  
		Executions:"EXECUTIONS",  
		DiskReads:"DISK_READS",  
		DirectWrites:"DIRECT_WRITES",  
		BufferGets:"BUFFER_GETS",  
		ApplicationWaitTime:"APPLICATION_WAIT_TIME",  
		ConcurrencyWaitTime:"CONCURRENCY_WAIT_TIME",  
		UserIoWaitTime:"USER_IO_WAIT_TIME",  
		RowsProcessed:"ROWS_PROCESSED",  
		ElapsedTime:"ELAPSED_TIME",  
		CPUTime:"CPU_TIME",             
	}
	
// Gv$sqlAudit [...]		
type	Gv$sqlAudit	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
RequestID	int64	`gorm:"column:REQUEST_ID" json:"request_id"`			
SQLExecID	int64	`gorm:"column:SQL_EXEC_ID" json:"sql_exec_id"`			
TraceID	string	`gorm:"column:TRACE_ID" json:"trace_id"`			
Sid	uint64	`gorm:"column:SID" json:"s_id"`			
ClientIP	string	`gorm:"column:CLIENT_IP" json:"client_ip"`			
ClientPort	int64	`gorm:"column:CLIENT_PORT" json:"client_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TenantName	string	`gorm:"column:TENANT_NAME" json:"tenant_name"`			
EffectiveTenantID	int64	`gorm:"column:EFFECTIVE_TENANT_ID" json:"effective_tenant_id"`			
UserID	int64	`gorm:"column:USER_ID" json:"user_id"`			
UserName	string	`gorm:"column:USER_NAME" json:"user_name"`			
UserGroup	int64	`gorm:"column:USER_GROUP" json:"user_group"`			
UserClientIP	string	`gorm:"column:USER_CLIENT_IP" json:"user_client_ip"`			
DbID	uint64	`gorm:"column:DB_ID" json:"db_id"`			
DbName	string	`gorm:"column:DB_NAME" json:"db_name"`			
SQLID	string	`gorm:"column:SQL_ID" json:"sql_id"`			
QuerySQL	string	`gorm:"column:QUERY_SQL" json:"query_sql"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
AffectedRows	int64	`gorm:"column:AFFECTED_ROWS" json:"affected_rows"`			
ReturnRows	int64	`gorm:"column:RETURN_ROWS" json:"return_rows"`			
PartitionCnt	int64	`gorm:"column:PARTITION_CNT" json:"partition_cnt"`			
RetCode	int64	`gorm:"column:RET_CODE" json:"ret_code"`			
QcID	uint64	`gorm:"column:QC_ID" json:"qc_id"`			
DfoID	int64	`gorm:"column:DFO_ID" json:"dfo_id"`			
SqcID	int64	`gorm:"column:SQC_ID" json:"sqc_id"`			
WorkerID	int64	`gorm:"column:WORKER_ID" json:"worker_id"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
P1text	string	`gorm:"column:P1TEXT" json:"p1_text"`			
P1	uint64	`gorm:"column:P1" json:"p1"`			
P2text	string	`gorm:"column:P2TEXT" json:"p2_text"`			
P2	uint64	`gorm:"column:P2" json:"p2"`			
P3text	string	`gorm:"column:P3TEXT" json:"p3_text"`			
P3	uint64	`gorm:"column:P3" json:"p3"`			
Level	int64	`gorm:"column:LEVEL" json:"level"`			
WaitClassID	int64	`gorm:"column:WAIT_CLASS_ID" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:WAIT_CLASS#" json:"wait_clas_s#"`			
WaitClass	string	`gorm:"column:WAIT_CLASS" json:"wait_class"`			
State	string	`gorm:"column:STATE" json:"state"`			
WaitTimeMicro	int64	`gorm:"column:WAIT_TIME_MICRO" json:"wait_time_micro"`			
TotalWaitTimeMicro	int64	`gorm:"column:TOTAL_WAIT_TIME_MICRO" json:"total_wait_time_micro"`			
TotalWaits	int64	`gorm:"column:TOTAL_WAITS" json:"total_waits"`			
RPCCount	int64	`gorm:"column:RPC_COUNT" json:"rpc_count"`			
PlanType	int64	`gorm:"column:PLAN_TYPE" json:"plan_type"`			
IsInnerSQL	int8	`gorm:"column:IS_INNER_SQL" json:"is_inner_sql"`			
IsExecutorRPC	int8	`gorm:"column:IS_EXECUTOR_RPC" json:"is_executor_rpc"`			
IsHitPlan	int8	`gorm:"column:IS_HIT_PLAN" json:"is_hit_plan"`			
RequestTime	int64	`gorm:"column:REQUEST_TIME" json:"request_time"`			
ElapsedTime	int64	`gorm:"column:ELAPSED_TIME" json:"elapsed_time"`			
NetTime	int64	`gorm:"column:NET_TIME" json:"net_time"`			
NetWaitTime	int64	`gorm:"column:NET_WAIT_TIME" json:"net_wait_time"`			
QueueTime	int64	`gorm:"column:QUEUE_TIME" json:"queue_time"`			
DecodeTime	int64	`gorm:"column:DECODE_TIME" json:"decode_time"`			
GetPlanTime	int64	`gorm:"column:GET_PLAN_TIME" json:"get_plan_time"`			
ExecuteTime	int64	`gorm:"column:EXECUTE_TIME" json:"execute_time"`			
ApplicationWaitTime	uint64	`gorm:"column:APPLICATION_WAIT_TIME" json:"application_wait_time"`			
ConcurrencyWaitTime	uint64	`gorm:"column:CONCURRENCY_WAIT_TIME" json:"concurrency_wait_time"`			
UserIoWaitTime	uint64	`gorm:"column:USER_IO_WAIT_TIME" json:"user_io_wait_time"`			
ScheduleTime	uint64	`gorm:"column:SCHEDULE_TIME" json:"schedule_time"`			
RowCacheHit	int64	`gorm:"column:ROW_CACHE_HIT" json:"row_cache_hit"`			
BloomFilterCacheHit	int64	`gorm:"column:BLOOM_FILTER_CACHE_HIT" json:"bloom_filter_cache_hit"`			
BlockCacheHit	int64	`gorm:"column:BLOCK_CACHE_HIT" json:"block_cache_hit"`			
BlockIndexCacheHit	int64	`gorm:"column:BLOCK_INDEX_CACHE_HIT" json:"block_index_cache_hit"`			
DiskReads	int64	`gorm:"column:DISK_READS" json:"disk_reads"`			
RetryCnt	int64	`gorm:"column:RETRY_CNT" json:"retry_cnt"`			
TableScan	int8	`gorm:"column:TABLE_SCAN" json:"table_scan"`			
ConsistencyLevel	int64	`gorm:"column:CONSISTENCY_LEVEL" json:"consistency_level"`			
MemstoreReadRowCount	int64	`gorm:"column:MEMSTORE_READ_ROW_COUNT" json:"memstore_read_row_count"`			
SsstoreReadRowCount	int64	`gorm:"column:SSSTORE_READ_ROW_COUNT" json:"ssstore_read_row_count"`			
RequestMemoryUsed	int64	`gorm:"column:REQUEST_MEMORY_USED" json:"request_memory_used"`			
ExpectedWorkerCount	int64	`gorm:"column:EXPECTED_WORKER_COUNT" json:"expected_worker_count"`			
UsedWorkerCount	int64	`gorm:"column:USED_WORKER_COUNT" json:"used_worker_count"`			
SchedInfo	string	`gorm:"column:SCHED_INFO" json:"sched_info"`			
FuseRowCacheHit	int64	`gorm:"column:FUSE_ROW_CACHE_HIT" json:"fuse_row_cache_hit"`			
PsStmtID	int64	`gorm:"column:PS_STMT_ID" json:"ps_stmt_id"`			
TransactionHash	uint64	`gorm:"column:TRANSACTION_HASH" json:"transaction_hash"`			
RequestType	int64	`gorm:"column:REQUEST_TYPE" json:"request_type"`			
IsBatchedMultiStmt	int8	`gorm:"column:IS_BATCHED_MULTI_STMT" json:"is_batched_multi_stmt"`			
ObTraceInfo	string	`gorm:"column:OB_TRACE_INFO" json:"ob_trace_info"`			
PlanHash	uint64	`gorm:"column:PLAN_HASH" json:"plan_hash"`			
LockForReadTime	int64	`gorm:"column:LOCK_FOR_READ_TIME" json:"lock_for_read_time"`			
WaitTrxMigrateTime	int64	`gorm:"column:WAIT_TRX_MIGRATE_TIME" json:"wait_trx_migrate_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sqlAudit) TableName() string {
	return "gv$sql_audit"
}
	

// Gv$sqlAuditColumns get sql column name.获取数据库列名
var Gv$sqlAuditColumns = struct { 
	SvrIP string
	SvrPort string
	RequestID string
	SQLExecID string
	TraceID string
	Sid string
	ClientIP string
	ClientPort string
	TenantID string
	TenantName string
	EffectiveTenantID string
	UserID string
	UserName string
	UserGroup string
	UserClientIP string
	DbID string
	DbName string
	SQLID string
	QuerySQL string
	PlanID string
	AffectedRows string
	ReturnRows string
	PartitionCnt string
	RetCode string
	QcID string
	DfoID string
	SqcID string
	WorkerID string
	Event string
	P1text string
	P1 string
	P2text string
	P2 string
	P3text string
	P3 string
	Level string
	WaitClassID string
	WaitClass# string
	WaitClass string
	State string
	WaitTimeMicro string
	TotalWaitTimeMicro string
	TotalWaits string
	RPCCount string
	PlanType string
	IsInnerSQL string
	IsExecutorRPC string
	IsHitPlan string
	RequestTime string
	ElapsedTime string
	NetTime string
	NetWaitTime string
	QueueTime string
	DecodeTime string
	GetPlanTime string
	ExecuteTime string
	ApplicationWaitTime string
	ConcurrencyWaitTime string
	UserIoWaitTime string
	ScheduleTime string
	RowCacheHit string
	BloomFilterCacheHit string
	BlockCacheHit string
	BlockIndexCacheHit string
	DiskReads string
	RetryCnt string
	TableScan string
	ConsistencyLevel string
	MemstoreReadRowCount string
	SsstoreReadRowCount string
	RequestMemoryUsed string
	ExpectedWorkerCount string
	UsedWorkerCount string
	SchedInfo string
	FuseRowCacheHit string
	PsStmtID string
	TransactionHash string
	RequestType string
	IsBatchedMultiStmt string
	ObTraceInfo string
	PlanHash string
	LockForReadTime string
	WaitTrxMigrateTime string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		RequestID:"REQUEST_ID",  
		SQLExecID:"SQL_EXEC_ID",  
		TraceID:"TRACE_ID",  
		Sid:"SID",  
		ClientIP:"CLIENT_IP",  
		ClientPort:"CLIENT_PORT",  
		TenantID:"TENANT_ID",  
		TenantName:"TENANT_NAME",  
		EffectiveTenantID:"EFFECTIVE_TENANT_ID",  
		UserID:"USER_ID",  
		UserName:"USER_NAME",  
		UserGroup:"USER_GROUP",  
		UserClientIP:"USER_CLIENT_IP",  
		DbID:"DB_ID",  
		DbName:"DB_NAME",  
		SQLID:"SQL_ID",  
		QuerySQL:"QUERY_SQL",  
		PlanID:"PLAN_ID",  
		AffectedRows:"AFFECTED_ROWS",  
		ReturnRows:"RETURN_ROWS",  
		PartitionCnt:"PARTITION_CNT",  
		RetCode:"RET_CODE",  
		QcID:"QC_ID",  
		DfoID:"DFO_ID",  
		SqcID:"SQC_ID",  
		WorkerID:"WORKER_ID",  
		Event:"EVENT",  
		P1text:"P1TEXT",  
		P1:"P1",  
		P2text:"P2TEXT",  
		P2:"P2",  
		P3text:"P3TEXT",  
		P3:"P3",  
		Level:"LEVEL",  
		WaitClassID:"WAIT_CLASS_ID",  
		WaitClass#:"WAIT_CLASS#",  
		WaitClass:"WAIT_CLASS",  
		State:"STATE",  
		WaitTimeMicro:"WAIT_TIME_MICRO",  
		TotalWaitTimeMicro:"TOTAL_WAIT_TIME_MICRO",  
		TotalWaits:"TOTAL_WAITS",  
		RPCCount:"RPC_COUNT",  
		PlanType:"PLAN_TYPE",  
		IsInnerSQL:"IS_INNER_SQL",  
		IsExecutorRPC:"IS_EXECUTOR_RPC",  
		IsHitPlan:"IS_HIT_PLAN",  
		RequestTime:"REQUEST_TIME",  
		ElapsedTime:"ELAPSED_TIME",  
		NetTime:"NET_TIME",  
		NetWaitTime:"NET_WAIT_TIME",  
		QueueTime:"QUEUE_TIME",  
		DecodeTime:"DECODE_TIME",  
		GetPlanTime:"GET_PLAN_TIME",  
		ExecuteTime:"EXECUTE_TIME",  
		ApplicationWaitTime:"APPLICATION_WAIT_TIME",  
		ConcurrencyWaitTime:"CONCURRENCY_WAIT_TIME",  
		UserIoWaitTime:"USER_IO_WAIT_TIME",  
		ScheduleTime:"SCHEDULE_TIME",  
		RowCacheHit:"ROW_CACHE_HIT",  
		BloomFilterCacheHit:"BLOOM_FILTER_CACHE_HIT",  
		BlockCacheHit:"BLOCK_CACHE_HIT",  
		BlockIndexCacheHit:"BLOCK_INDEX_CACHE_HIT",  
		DiskReads:"DISK_READS",  
		RetryCnt:"RETRY_CNT",  
		TableScan:"TABLE_SCAN",  
		ConsistencyLevel:"CONSISTENCY_LEVEL",  
		MemstoreReadRowCount:"MEMSTORE_READ_ROW_COUNT",  
		SsstoreReadRowCount:"SSSTORE_READ_ROW_COUNT",  
		RequestMemoryUsed:"REQUEST_MEMORY_USED",  
		ExpectedWorkerCount:"EXPECTED_WORKER_COUNT",  
		UsedWorkerCount:"USED_WORKER_COUNT",  
		SchedInfo:"SCHED_INFO",  
		FuseRowCacheHit:"FUSE_ROW_CACHE_HIT",  
		PsStmtID:"PS_STMT_ID",  
		TransactionHash:"TRANSACTION_HASH",  
		RequestType:"REQUEST_TYPE",  
		IsBatchedMultiStmt:"IS_BATCHED_MULTI_STMT",  
		ObTraceInfo:"OB_TRACE_INFO",  
		PlanHash:"PLAN_HASH",  
		LockForReadTime:"LOCK_FOR_READ_TIME",  
		WaitTrxMigrateTime:"WAIT_TRX_MIGRATE_TIME",             
	}
	
// Gv$sqlMonitor [...]		
type	Gv$sqlMonitor	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SQLExecID	int64	`gorm:"column:SQL_EXEC_ID" json:"sql_exec_id"`			
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TaskID	int64	`gorm:"column:TASK_ID" json:"task_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
SQLExecStart	time.Time	`gorm:"column:SQL_EXEC_START" json:"sql_exec_start"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
SchedulerIP	string	`gorm:"column:SCHEDULER_IP" json:"scheduler_ip"`			
SchedulerPort	int64	`gorm:"column:SCHEDULER_PORT" json:"scheduler_port"`			
MonitorInfo	string	`gorm:"column:MONITOR_INFO" json:"monitor_info"`			
ExtendInfo	string	`gorm:"column:EXTEND_INFO" json:"extend_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sqlMonitor) TableName() string {
	return "gv$sql_monitor"
}
	

// Gv$sqlMonitorColumns get sql column name.获取数据库列名
var Gv$sqlMonitorColumns = struct { 
	ConID string
	SQLExecID string
	JobID string
	TaskID string
	SvrIP string
	SvrPort string
	SQLExecStart string
	PlanID string
	SchedulerIP string
	SchedulerPort string
	MonitorInfo string
	ExtendInfo string    
	}{ 
		ConID:"CON_ID",  
		SQLExecID:"SQL_EXEC_ID",  
		JobID:"JOB_ID",  
		TaskID:"TASK_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		SQLExecStart:"SQL_EXEC_START",  
		PlanID:"PLAN_ID",  
		SchedulerIP:"SCHEDULER_IP",  
		SchedulerPort:"SCHEDULER_PORT",  
		MonitorInfo:"MONITOR_INFO",  
		ExtendInfo:"EXTEND_INFO",             
	}
	
// Gv$sqlPlanMonitor [...]		
type	Gv$sqlPlanMonitor	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
RequestID	int64	`gorm:"column:REQUEST_ID" json:"request_id"`			
Key	string	`gorm:"column:KEY" json:"key"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TraceID	string	`gorm:"column:TRACE_ID" json:"trace_id"`			
FirstRefreshTime	time.Time	`gorm:"column:FIRST_REFRESH_TIME" json:"first_refresh_time"`			
LastRefreshTime	time.Time	`gorm:"column:LAST_REFRESH_TIME" json:"last_refresh_time"`			
FirstChangeTime	time.Time	`gorm:"column:FIRST_CHANGE_TIME" json:"first_change_time"`			
LastChangeTime	time.Time	`gorm:"column:LAST_CHANGE_TIME" json:"last_change_time"`			
RefreshCount	string	`gorm:"column:REFRESH_COUNT" json:"refresh_count"`			
Sid	string	`gorm:"column:SID" json:"s_id"`			
ProcessName	int64	`gorm:"column:PROCESS_NAME" json:"process_name"`			
SQLID	string	`gorm:"column:SQL_ID" json:"sql_id"`			
SQLExecStart	string	`gorm:"column:SQL_EXEC_START" json:"sql_exec_start"`			
SQLExecID	string	`gorm:"column:SQL_EXEC_ID" json:"sql_exec_id"`			
SQLPlanHashValue	string	`gorm:"column:SQL_PLAN_HASH_VALUE" json:"sql_plan_hash_value"`			
SQLChildAddress	string	`gorm:"column:SQL_CHILD_ADDRESS" json:"sql_child_address"`			
PlanParentID	string	`gorm:"column:PLAN_PARENT_ID" json:"plan_parent_id"`			
PlanLineID	int64	`gorm:"column:PLAN_LINE_ID" json:"plan_line_id"`			
PlanOperation	string	`gorm:"column:PLAN_OPERATION" json:"plan_operation"`			
PlanOptions	string	`gorm:"column:PLAN_OPTIONS" json:"plan_options"`			
PlanObjectOwner	string	`gorm:"column:PLAN_OBJECT_OWNER" json:"plan_object_owner"`			
PlanObjectName	string	`gorm:"column:PLAN_OBJECT_NAME" json:"plan_object_name"`			
PlanObjectType	string	`gorm:"column:PLAN_OBJECT_TYPE" json:"plan_object_type"`			
PlanDepth	int64	`gorm:"column:PLAN_DEPTH" json:"plan_depth"`			
PlanPosition	string	`gorm:"column:PLAN_POSITION" json:"plan_position"`			
PlanCost	string	`gorm:"column:PLAN_COST" json:"plan_cost"`			
PlanCardinality	string	`gorm:"column:PLAN_CARDINALITY" json:"plan_cardinality"`			
PlanBytes	string	`gorm:"column:PLAN_BYTES" json:"plan_bytes"`			
PlanTime	string	`gorm:"column:PLAN_TIME" json:"plan_time"`			
PlanPartitionStart	string	`gorm:"column:PLAN_PARTITION_START" json:"plan_partition_start"`			
PlanPartitionStop	string	`gorm:"column:PLAN_PARTITION_STOP" json:"plan_partition_stop"`			
PlanCPUCost	string	`gorm:"column:PLAN_CPU_COST" json:"plan_cpu_cost"`			
PlanIoCost	string	`gorm:"column:PLAN_IO_COST" json:"plan_io_cost"`			
PlanTempSpace	string	`gorm:"column:PLAN_TEMP_SPACE" json:"plan_temp_space"`			
Starts	int64	`gorm:"column:STARTS" json:"starts"`			
OutputRows	int64	`gorm:"column:OUTPUT_ROWS" json:"output_rows"`			
IoInterconnectBytes	string	`gorm:"column:IO_INTERCONNECT_BYTES" json:"io_interconnect_bytes"`			
PhysicalReadRequests	string	`gorm:"column:PHYSICAL_READ_REQUESTS" json:"physical_read_requests"`			
PhysicalReadBytes	string	`gorm:"column:PHYSICAL_READ_BYTES" json:"physical_read_bytes"`			
PhysicalWriteRequests	string	`gorm:"column:PHYSICAL_WRITE_REQUESTS" json:"physical_write_requests"`			
PhysicalWriteBytes	string	`gorm:"column:PHYSICAL_WRITE_BYTES" json:"physical_write_bytes"`			
WorkareaMem	string	`gorm:"column:WORKAREA_MEM" json:"workarea_mem"`			
WorkareaMaxMem	string	`gorm:"column:WORKAREA_MAX_MEM" json:"workarea_max_mem"`			
WorkareaTempseg	string	`gorm:"column:WORKAREA_TEMPSEG" json:"workarea_tempseg"`			
WorkareaMaxTempseg	string	`gorm:"column:WORKAREA_MAX_TEMPSEG" json:"workarea_max_tempseg"`			
OtherstatGroupID	string	`gorm:"column:OTHERSTAT_GROUP_ID" json:"otherstat_group_id"`			
Otherstat1ID	int64	`gorm:"column:OTHERSTAT_1_ID" json:"otherstat_1_id"`			
Otherstat1Type	string	`gorm:"column:OTHERSTAT_1_TYPE" json:"otherstat_1_type"`			
Otherstat1Value	int64	`gorm:"column:OTHERSTAT_1_VALUE" json:"otherstat_1_value"`			
Otherstat2ID	int64	`gorm:"column:OTHERSTAT_2_ID" json:"otherstat_2_id"`			
Otherstat2Type	string	`gorm:"column:OTHERSTAT_2_TYPE" json:"otherstat_2_type"`			
Otherstat2Value	int64	`gorm:"column:OTHERSTAT_2_VALUE" json:"otherstat_2_value"`			
Otherstat3ID	int64	`gorm:"column:OTHERSTAT_3_ID" json:"otherstat_3_id"`			
Otherstat3Type	string	`gorm:"column:OTHERSTAT_3_TYPE" json:"otherstat_3_type"`			
Otherstat3Value	int64	`gorm:"column:OTHERSTAT_3_VALUE" json:"otherstat_3_value"`			
Otherstat4ID	int64	`gorm:"column:OTHERSTAT_4_ID" json:"otherstat_4_id"`			
Otherstat4Type	string	`gorm:"column:OTHERSTAT_4_TYPE" json:"otherstat_4_type"`			
Otherstat4Value	int64	`gorm:"column:OTHERSTAT_4_VALUE" json:"otherstat_4_value"`			
Otherstat5ID	int64	`gorm:"column:OTHERSTAT_5_ID" json:"otherstat_5_id"`			
Otherstat5Type	string	`gorm:"column:OTHERSTAT_5_TYPE" json:"otherstat_5_type"`			
Otherstat5Value	int64	`gorm:"column:OTHERSTAT_5_VALUE" json:"otherstat_5_value"`			
Otherstat6ID	int64	`gorm:"column:OTHERSTAT_6_ID" json:"otherstat_6_id"`			
Otherstat6Type	string	`gorm:"column:OTHERSTAT_6_TYPE" json:"otherstat_6_type"`			
Otherstat6Value	int64	`gorm:"column:OTHERSTAT_6_VALUE" json:"otherstat_6_value"`			
Otherstat7ID	int64	`gorm:"column:OTHERSTAT_7_ID" json:"otherstat_7_id"`			
Otherstat7Type	string	`gorm:"column:OTHERSTAT_7_TYPE" json:"otherstat_7_type"`			
Otherstat7Value	int64	`gorm:"column:OTHERSTAT_7_VALUE" json:"otherstat_7_value"`			
Otherstat8ID	int64	`gorm:"column:OTHERSTAT_8_ID" json:"otherstat_8_id"`			
Otherstat8Type	string	`gorm:"column:OTHERSTAT_8_TYPE" json:"otherstat_8_type"`			
Otherstat8Value	int64	`gorm:"column:OTHERSTAT_8_VALUE" json:"otherstat_8_value"`			
Otherstat9ID	int64	`gorm:"column:OTHERSTAT_9_ID" json:"otherstat_9_id"`			
Otherstat9Type	string	`gorm:"column:OTHERSTAT_9_TYPE" json:"otherstat_9_type"`			
Otherstat9Value	int64	`gorm:"column:OTHERSTAT_9_VALUE" json:"otherstat_9_value"`			
Otherstat10ID	int64	`gorm:"column:OTHERSTAT_10_ID" json:"otherstat_10_id"`			
Otherstat10Type	string	`gorm:"column:OTHERSTAT_10_TYPE" json:"otherstat_10_type"`			
Otherstat10Value	int64	`gorm:"column:OTHERSTAT_10_VALUE" json:"otherstat_10_value"`			
OtherXML	string	`gorm:"column:OTHER_XML" json:"other_xml"`			
PlanOperationInactive	string	`gorm:"column:PLAN_OPERATION_INACTIVE" json:"plan_operation_inactive"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sqlPlanMonitor) TableName() string {
	return "gv$sql_plan_monitor"
}
	

// Gv$sqlPlanMonitorColumns get sql column name.获取数据库列名
var Gv$sqlPlanMonitorColumns = struct { 
	ConID string
	RequestID string
	Key string
	Status string
	SvrIP string
	SvrPort string
	TraceID string
	FirstRefreshTime string
	LastRefreshTime string
	FirstChangeTime string
	LastChangeTime string
	RefreshCount string
	Sid string
	ProcessName string
	SQLID string
	SQLExecStart string
	SQLExecID string
	SQLPlanHashValue string
	SQLChildAddress string
	PlanParentID string
	PlanLineID string
	PlanOperation string
	PlanOptions string
	PlanObjectOwner string
	PlanObjectName string
	PlanObjectType string
	PlanDepth string
	PlanPosition string
	PlanCost string
	PlanCardinality string
	PlanBytes string
	PlanTime string
	PlanPartitionStart string
	PlanPartitionStop string
	PlanCPUCost string
	PlanIoCost string
	PlanTempSpace string
	Starts string
	OutputRows string
	IoInterconnectBytes string
	PhysicalReadRequests string
	PhysicalReadBytes string
	PhysicalWriteRequests string
	PhysicalWriteBytes string
	WorkareaMem string
	WorkareaMaxMem string
	WorkareaTempseg string
	WorkareaMaxTempseg string
	OtherstatGroupID string
	Otherstat1ID string
	Otherstat1Type string
	Otherstat1Value string
	Otherstat2ID string
	Otherstat2Type string
	Otherstat2Value string
	Otherstat3ID string
	Otherstat3Type string
	Otherstat3Value string
	Otherstat4ID string
	Otherstat4Type string
	Otherstat4Value string
	Otherstat5ID string
	Otherstat5Type string
	Otherstat5Value string
	Otherstat6ID string
	Otherstat6Type string
	Otherstat6Value string
	Otherstat7ID string
	Otherstat7Type string
	Otherstat7Value string
	Otherstat8ID string
	Otherstat8Type string
	Otherstat8Value string
	Otherstat9ID string
	Otherstat9Type string
	Otherstat9Value string
	Otherstat10ID string
	Otherstat10Type string
	Otherstat10Value string
	OtherXML string
	PlanOperationInactive string    
	}{ 
		ConID:"CON_ID",  
		RequestID:"REQUEST_ID",  
		Key:"KEY",  
		Status:"STATUS",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TraceID:"TRACE_ID",  
		FirstRefreshTime:"FIRST_REFRESH_TIME",  
		LastRefreshTime:"LAST_REFRESH_TIME",  
		FirstChangeTime:"FIRST_CHANGE_TIME",  
		LastChangeTime:"LAST_CHANGE_TIME",  
		RefreshCount:"REFRESH_COUNT",  
		Sid:"SID",  
		ProcessName:"PROCESS_NAME",  
		SQLID:"SQL_ID",  
		SQLExecStart:"SQL_EXEC_START",  
		SQLExecID:"SQL_EXEC_ID",  
		SQLPlanHashValue:"SQL_PLAN_HASH_VALUE",  
		SQLChildAddress:"SQL_CHILD_ADDRESS",  
		PlanParentID:"PLAN_PARENT_ID",  
		PlanLineID:"PLAN_LINE_ID",  
		PlanOperation:"PLAN_OPERATION",  
		PlanOptions:"PLAN_OPTIONS",  
		PlanObjectOwner:"PLAN_OBJECT_OWNER",  
		PlanObjectName:"PLAN_OBJECT_NAME",  
		PlanObjectType:"PLAN_OBJECT_TYPE",  
		PlanDepth:"PLAN_DEPTH",  
		PlanPosition:"PLAN_POSITION",  
		PlanCost:"PLAN_COST",  
		PlanCardinality:"PLAN_CARDINALITY",  
		PlanBytes:"PLAN_BYTES",  
		PlanTime:"PLAN_TIME",  
		PlanPartitionStart:"PLAN_PARTITION_START",  
		PlanPartitionStop:"PLAN_PARTITION_STOP",  
		PlanCPUCost:"PLAN_CPU_COST",  
		PlanIoCost:"PLAN_IO_COST",  
		PlanTempSpace:"PLAN_TEMP_SPACE",  
		Starts:"STARTS",  
		OutputRows:"OUTPUT_ROWS",  
		IoInterconnectBytes:"IO_INTERCONNECT_BYTES",  
		PhysicalReadRequests:"PHYSICAL_READ_REQUESTS",  
		PhysicalReadBytes:"PHYSICAL_READ_BYTES",  
		PhysicalWriteRequests:"PHYSICAL_WRITE_REQUESTS",  
		PhysicalWriteBytes:"PHYSICAL_WRITE_BYTES",  
		WorkareaMem:"WORKAREA_MEM",  
		WorkareaMaxMem:"WORKAREA_MAX_MEM",  
		WorkareaTempseg:"WORKAREA_TEMPSEG",  
		WorkareaMaxTempseg:"WORKAREA_MAX_TEMPSEG",  
		OtherstatGroupID:"OTHERSTAT_GROUP_ID",  
		Otherstat1ID:"OTHERSTAT_1_ID",  
		Otherstat1Type:"OTHERSTAT_1_TYPE",  
		Otherstat1Value:"OTHERSTAT_1_VALUE",  
		Otherstat2ID:"OTHERSTAT_2_ID",  
		Otherstat2Type:"OTHERSTAT_2_TYPE",  
		Otherstat2Value:"OTHERSTAT_2_VALUE",  
		Otherstat3ID:"OTHERSTAT_3_ID",  
		Otherstat3Type:"OTHERSTAT_3_TYPE",  
		Otherstat3Value:"OTHERSTAT_3_VALUE",  
		Otherstat4ID:"OTHERSTAT_4_ID",  
		Otherstat4Type:"OTHERSTAT_4_TYPE",  
		Otherstat4Value:"OTHERSTAT_4_VALUE",  
		Otherstat5ID:"OTHERSTAT_5_ID",  
		Otherstat5Type:"OTHERSTAT_5_TYPE",  
		Otherstat5Value:"OTHERSTAT_5_VALUE",  
		Otherstat6ID:"OTHERSTAT_6_ID",  
		Otherstat6Type:"OTHERSTAT_6_TYPE",  
		Otherstat6Value:"OTHERSTAT_6_VALUE",  
		Otherstat7ID:"OTHERSTAT_7_ID",  
		Otherstat7Type:"OTHERSTAT_7_TYPE",  
		Otherstat7Value:"OTHERSTAT_7_VALUE",  
		Otherstat8ID:"OTHERSTAT_8_ID",  
		Otherstat8Type:"OTHERSTAT_8_TYPE",  
		Otherstat8Value:"OTHERSTAT_8_VALUE",  
		Otherstat9ID:"OTHERSTAT_9_ID",  
		Otherstat9Type:"OTHERSTAT_9_TYPE",  
		Otherstat9Value:"OTHERSTAT_9_VALUE",  
		Otherstat10ID:"OTHERSTAT_10_ID",  
		Otherstat10Type:"OTHERSTAT_10_TYPE",  
		Otherstat10Value:"OTHERSTAT_10_VALUE",  
		OtherXML:"OTHER_XML",  
		PlanOperationInactive:"PLAN_OPERATION_INACTIVE",             
	}
	
// Gv$sqlPlanStatistics [...]		
type	Gv$sqlPlanStatistics	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
OperationID	int64	`gorm:"column:OPERATION_ID" json:"operation_id"`			
Executions	int64	`gorm:"column:EXECUTIONS" json:"executions"`			
OutputRows	int64	`gorm:"column:OUTPUT_ROWS" json:"output_rows"`			
InputRows	int64	`gorm:"column:INPUT_ROWS" json:"input_rows"`			
RescanTimes	int64	`gorm:"column:RESCAN_TIMES" json:"rescan_times"`			
BufferGets	int64	`gorm:"column:BUFFER_GETS" json:"buffer_gets"`			
DiskReads	int64	`gorm:"column:DISK_READS" json:"disk_reads"`			
DiskWrites	int64	`gorm:"column:DISK_WRITES" json:"disk_writes"`			
ElapsedTime	int64	`gorm:"column:ELAPSED_TIME" json:"elapsed_time"`			
ExtendInfo1	string	`gorm:"column:EXTEND_INFO1" json:"extend_info1"`			
ExtendInfo2	string	`gorm:"column:EXTEND_INFO2" json:"extend_info2"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sqlPlanStatistics) TableName() string {
	return "gv$sql_plan_statistics"
}
	

// Gv$sqlPlanStatisticsColumns get sql column name.获取数据库列名
var Gv$sqlPlanStatisticsColumns = struct { 
	ConID string
	SvrIP string
	SvrPort string
	PlanID string
	OperationID string
	Executions string
	OutputRows string
	InputRows string
	RescanTimes string
	BufferGets string
	DiskReads string
	DiskWrites string
	ElapsedTime string
	ExtendInfo1 string
	ExtendInfo2 string    
	}{ 
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		PlanID:"PLAN_ID",  
		OperationID:"OPERATION_ID",  
		Executions:"EXECUTIONS",  
		OutputRows:"OUTPUT_ROWS",  
		InputRows:"INPUT_ROWS",  
		RescanTimes:"RESCAN_TIMES",  
		BufferGets:"BUFFER_GETS",  
		DiskReads:"DISK_READS",  
		DiskWrites:"DISK_WRITES",  
		ElapsedTime:"ELAPSED_TIME",  
		ExtendInfo1:"EXTEND_INFO1",  
		ExtendInfo2:"EXTEND_INFO2",             
	}
	
// Gv$sqlWorkarea [...]		
type	Gv$sqlWorkarea	struct {		
Address	[]byte	`gorm:"column:address" json:"address"`			
HashValue	int64	`gorm:"column:hash_value" json:"hash_value"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
ChildNumber	int64	`gorm:"column:child_number" json:"child_number"`			
WorkareaAddress	[]byte	`gorm:"column:workarea_address" json:"workarea_address"`			
OperationType	string	`gorm:"column:operation_type" json:"operation_type"`			
OperationID	int64	`gorm:"column:operation_id" json:"operation_id"`			
Policy	string	`gorm:"column:policy" json:"policy"`			
EstimatedOptimalSize	int64	`gorm:"column:estimated_optimal_size" json:"estimated_optimal_size"`			
EstimatedOnepassSize	int64	`gorm:"column:estimated_onepass_size" json:"estimated_onepass_size"`			
LastMemoryUsed	int64	`gorm:"column:last_memory_used" json:"last_memory_used"`			
LastExecution	string	`gorm:"column:last_execution" json:"last_execution"`			
LastDegree	int64	`gorm:"column:last_degree" json:"last_degree"`			
TotalExecutions	int64	`gorm:"column:total_executions" json:"total_executions"`			
OptimalExecutions	int64	`gorm:"column:optimal_executions" json:"optimal_executions"`			
OnepassExecutions	int64	`gorm:"column:onepass_executions" json:"onepass_executions"`			
MultipassesExecutions	int64	`gorm:"column:multipasses_executions" json:"multipasses_executions"`			
ActiveTime	int64	`gorm:"column:active_time" json:"active_time"`			
MaxTempsegSize	int64	`gorm:"column:max_tempseg_size" json:"max_tempseg_size"`			
LastTempsegSize	int64	`gorm:"column:last_tempseg_size" json:"last_tempseg_size"`			
ConID	int64	`gorm:"column:con_id" json:"con_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sqlWorkarea) TableName() string {
	return "gv$sql_workarea"
}
	

// Gv$sqlWorkareaColumns get sql column name.获取数据库列名
var Gv$sqlWorkareaColumns = struct { 
	Address string
	HashValue string
	SQLID string
	ChildNumber string
	WorkareaAddress string
	OperationType string
	OperationID string
	Policy string
	EstimatedOptimalSize string
	EstimatedOnepassSize string
	LastMemoryUsed string
	LastExecution string
	LastDegree string
	TotalExecutions string
	OptimalExecutions string
	OnepassExecutions string
	MultipassesExecutions string
	ActiveTime string
	MaxTempsegSize string
	LastTempsegSize string
	ConID string    
	}{ 
		Address:"address",  
		HashValue:"hash_value",  
		SQLID:"sql_id",  
		ChildNumber:"child_number",  
		WorkareaAddress:"workarea_address",  
		OperationType:"operation_type",  
		OperationID:"operation_id",  
		Policy:"policy",  
		EstimatedOptimalSize:"estimated_optimal_size",  
		EstimatedOnepassSize:"estimated_onepass_size",  
		LastMemoryUsed:"last_memory_used",  
		LastExecution:"last_execution",  
		LastDegree:"last_degree",  
		TotalExecutions:"total_executions",  
		OptimalExecutions:"optimal_executions",  
		OnepassExecutions:"onepass_executions",  
		MultipassesExecutions:"multipasses_executions",  
		ActiveTime:"active_time",  
		MaxTempsegSize:"max_tempseg_size",  
		LastTempsegSize:"last_tempseg_size",  
		ConID:"con_id",             
	}
	
// Gv$sqlWorkareaActive [...]		
type	Gv$sqlWorkareaActive	struct {		
SQLHashValue	int64	`gorm:"column:sql_hash_value" json:"sql_hash_value"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
SQLExecStart	datatypes.Date	`gorm:"column:sql_exec_start" json:"sql_exec_start"`			
SQLExecID	int64	`gorm:"column:sql_exec_id" json:"sql_exec_id"`			
WorkareaAddress	[]byte	`gorm:"column:workarea_address" json:"workarea_address"`			
OperationType	string	`gorm:"column:operation_type" json:"operation_type"`			
OperationID	int64	`gorm:"column:operation_id" json:"operation_id"`			
Policy	string	`gorm:"column:policy" json:"policy"`			
Sid	int64	`gorm:"column:sid" json:"sid"`			
QcinstID	int64	`gorm:"column:qcinst_id" json:"qcinst_id"`			
Qcsid	int64	`gorm:"column:qcsid" json:"qcsid"`			
ActiveTime	int64	`gorm:"column:active_time" json:"active_time"`			
WorkAreaSize	int64	`gorm:"column:work_area_size" json:"work_area_size"`			
ExpectSize	int64	`gorm:"column:expect_size" json:"expect_size"`			
ActualMemUsed	int64	`gorm:"column:actual_mem_used" json:"actual_mem_used"`			
MaxMemUsed	int64	`gorm:"column:max_mem_used" json:"max_mem_used"`			
NumberPasses	int64	`gorm:"column:number_passes" json:"number_passes"`			
TempsegSize	int64	`gorm:"column:tempseg_size" json:"tempseg_size"`			
Tablespace	string	`gorm:"column:tablespace" json:"tablespace"`			
Segrfno#	int64	`gorm:"column:segrfno#" json:"segrfno#"`			
Segblk#	int64	`gorm:"column:segblk#" json:"segblk#"`			
ConID	int64	`gorm:"column:con_id" json:"con_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sqlWorkareaActive) TableName() string {
	return "gv$sql_workarea_active"
}
	

// Gv$sqlWorkareaActiveColumns get sql column name.获取数据库列名
var Gv$sqlWorkareaActiveColumns = struct { 
	SQLHashValue string
	SQLID string
	SQLExecStart string
	SQLExecID string
	WorkareaAddress string
	OperationType string
	OperationID string
	Policy string
	Sid string
	QcinstID string
	Qcsid string
	ActiveTime string
	WorkAreaSize string
	ExpectSize string
	ActualMemUsed string
	MaxMemUsed string
	NumberPasses string
	TempsegSize string
	Tablespace string
	Segrfno# string
	Segblk# string
	ConID string    
	}{ 
		SQLHashValue:"sql_hash_value",  
		SQLID:"sql_id",  
		SQLExecStart:"sql_exec_start",  
		SQLExecID:"sql_exec_id",  
		WorkareaAddress:"workarea_address",  
		OperationType:"operation_type",  
		OperationID:"operation_id",  
		Policy:"policy",  
		Sid:"sid",  
		QcinstID:"qcinst_id",  
		Qcsid:"qcsid",  
		ActiveTime:"active_time",  
		WorkAreaSize:"work_area_size",  
		ExpectSize:"expect_size",  
		ActualMemUsed:"actual_mem_used",  
		MaxMemUsed:"max_mem_used",  
		NumberPasses:"number_passes",  
		TempsegSize:"tempseg_size",  
		Tablespace:"tablespace",  
		Segrfno#:"segrfno#",  
		Segblk#:"segblk#",  
		ConID:"con_id",             
	}
	
// Gv$sqlWorkareaHistogram [...]		
type	Gv$sqlWorkareaHistogram	struct {		
LowOptimalSize	int64	`gorm:"column:low_optimal_size" json:"low_optimal_size"`			
HighOptimalSize	int64	`gorm:"column:high_optimal_size" json:"high_optimal_size"`			
OptimalExecutions	int64	`gorm:"column:optimal_executions" json:"optimal_executions"`			
OnepassExecutions	int64	`gorm:"column:onepass_executions" json:"onepass_executions"`			
MultipassesExecutions	int64	`gorm:"column:multipasses_executions" json:"multipasses_executions"`			
TotalExecutions	int64	`gorm:"column:total_executions" json:"total_executions"`			
ConID	int64	`gorm:"column:con_id" json:"con_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sqlWorkareaHistogram) TableName() string {
	return "gv$sql_workarea_histogram"
}
	

// Gv$sqlWorkareaHistogramColumns get sql column name.获取数据库列名
var Gv$sqlWorkareaHistogramColumns = struct { 
	LowOptimalSize string
	HighOptimalSize string
	OptimalExecutions string
	OnepassExecutions string
	MultipassesExecutions string
	TotalExecutions string
	ConID string    
	}{ 
		LowOptimalSize:"low_optimal_size",  
		HighOptimalSize:"high_optimal_size",  
		OptimalExecutions:"optimal_executions",  
		OnepassExecutions:"onepass_executions",  
		MultipassesExecutions:"multipasses_executions",  
		TotalExecutions:"total_executions",  
		ConID:"con_id",             
	}
	
// Gv$sstable [...]		
type	Gv$sstable	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TableType	int64	`gorm:"column:TABLE_TYPE" json:"table_type"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
TableName	string	`gorm:"column:TABLE_NAME" json:"table_name"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
IndexID	int64	`gorm:"column:INDEX_ID" json:"index_id"`			
BaseVersion	int64	`gorm:"column:BASE_VERSION" json:"base_version"`			
MultiVersionStart	int64	`gorm:"column:MULTI_VERSION_START" json:"multi_version_start"`			
SnapshotVersion	int64	`gorm:"column:SNAPSHOT_VERSION" json:"snapshot_version"`			
StartLogTs	uint64	`gorm:"column:START_LOG_TS" json:"start_log_ts"`			
EndLogTs	uint64	`gorm:"column:END_LOG_TS" json:"end_log_ts"`			
MaxLogTs	uint64	`gorm:"column:MAX_LOG_TS" json:"max_log_ts"`			
Version	int64	`gorm:"column:VERSION" json:"version"`			
LogicalDataVersion	int64	`gorm:"column:LOGICAL_DATA_VERSION" json:"logical_data_version"`			
Size	int64	`gorm:"column:SIZE" json:"size"`			
IsActive	int64	`gorm:"column:IS_ACTIVE" json:"is_active"`			
Ref	int64	`gorm:"column:REF" json:"ref"`			
WriteRef	int64	`gorm:"column:WRITE_REF" json:"write_ref"`			
TrxCount	int64	`gorm:"column:TRX_COUNT" json:"trx_count"`			
PendingLogPersistingRowCnt	int64	`gorm:"column:PENDING_LOG_PERSISTING_ROW_CNT" json:"pending_log_persisting_row_cnt"`			
UpperTransVersion	int64	`gorm:"column:UPPER_TRANS_VERSION" json:"upper_trans_version"`			
ContainUncommittedRow	int8	`gorm:"column:CONTAIN_UNCOMMITTED_ROW" json:"contain_uncommitted_row"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sstable) TableName() string {
	return "gv$sstable"
}
	

// Gv$sstableColumns get sql column name.获取数据库列名
var Gv$sstableColumns = struct { 
	SvrIP string
	SvrPort string
	TableType string
	TableID string
	TableName string
	TenantID string
	PartitionID string
	IndexID string
	BaseVersion string
	MultiVersionStart string
	SnapshotVersion string
	StartLogTs string
	EndLogTs string
	MaxLogTs string
	Version string
	LogicalDataVersion string
	Size string
	IsActive string
	Ref string
	WriteRef string
	TrxCount string
	PendingLogPersistingRowCnt string
	UpperTransVersion string
	ContainUncommittedRow string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TableType:"TABLE_TYPE",  
		TableID:"TABLE_ID",  
		TableName:"TABLE_NAME",  
		TenantID:"TENANT_ID",  
		PartitionID:"PARTITION_ID",  
		IndexID:"INDEX_ID",  
		BaseVersion:"BASE_VERSION",  
		MultiVersionStart:"MULTI_VERSION_START",  
		SnapshotVersion:"SNAPSHOT_VERSION",  
		StartLogTs:"START_LOG_TS",  
		EndLogTs:"END_LOG_TS",  
		MaxLogTs:"MAX_LOG_TS",  
		Version:"VERSION",  
		LogicalDataVersion:"LOGICAL_DATA_VERSION",  
		Size:"SIZE",  
		IsActive:"IS_ACTIVE",  
		Ref:"REF",  
		WriteRef:"WRITE_REF",  
		TrxCount:"TRX_COUNT",  
		PendingLogPersistingRowCnt:"PENDING_LOG_PERSISTING_ROW_CNT",  
		UpperTransVersion:"UPPER_TRANS_VERSION",  
		ContainUncommittedRow:"CONTAIN_UNCOMMITTED_ROW",             
	}
	
// Gv$sysstat [...]		
type	Gv$sysstat	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
Statistic#	int64	`gorm:"column:STATISTIC#" json:"statisti_c#"`			
Value	int64	`gorm:"column:VALUE" json:"value"`			
StatID	int64	`gorm:"column:STAT_ID" json:"stat_id"`			
Name	string	`gorm:"column:NAME" json:"name"`			
Class	int64	`gorm:"column:CLASS" json:"class"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$sysstat) TableName() string {
	return "gv$sysstat"
}
	

// Gv$sysstatColumns get sql column name.获取数据库列名
var Gv$sysstatColumns = struct { 
	ConID string
	SvrIP string
	SvrPort string
	Statistic# string
	Value string
	StatID string
	Name string
	Class string    
	}{ 
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		Statistic#:"STATISTIC#",  
		Value:"VALUE",  
		StatID:"STAT_ID",  
		Name:"NAME",  
		Class:"CLASS",             
	}
	
// Gv$systemEvent [...]		
type	Gv$systemEvent	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
EventID	int64	`gorm:"column:EVENT_ID" json:"event_id"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
WaitClassID	int64	`gorm:"column:WAIT_CLASS_ID" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:WAIT_CLASS#" json:"wait_clas_s#"`			
WaitClass	string	`gorm:"column:WAIT_CLASS" json:"wait_class"`			
TotalWaits	int64	`gorm:"column:TOTAL_WAITS" json:"total_waits"`			
TotalTimeouts	int64	`gorm:"column:TOTAL_TIMEOUTS" json:"total_timeouts"`			
TimeWaited	float64	`gorm:"column:TIME_WAITED" json:"time_waited"`			
AverageWait	float64	`gorm:"column:AVERAGE_WAIT" json:"average_wait"`			
TimeWaitedMicro	int64	`gorm:"column:TIME_WAITED_MICRO" json:"time_waited_micro"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$systemEvent) TableName() string {
	return "gv$system_event"
}
	

// Gv$systemEventColumns get sql column name.获取数据库列名
var Gv$systemEventColumns = struct { 
	ConID string
	SvrIP string
	SvrPort string
	EventID string
	Event string
	WaitClassID string
	WaitClass# string
	WaitClass string
	TotalWaits string
	TotalTimeouts string
	TimeWaited string
	AverageWait string
	TimeWaitedMicro string    
	}{ 
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		EventID:"EVENT_ID",  
		Event:"EVENT",  
		WaitClassID:"WAIT_CLASS_ID",  
		WaitClass#:"WAIT_CLASS#",  
		WaitClass:"WAIT_CLASS",  
		TotalWaits:"TOTAL_WAITS",  
		TotalTimeouts:"TOTAL_TIMEOUTS",  
		TimeWaited:"TIME_WAITED",  
		AverageWait:"AVERAGE_WAIT",  
		TimeWaitedMicro:"TIME_WAITED_MICRO",             
	}
	
// Gv$table [...]		
type	Gv$table	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
TableName	string	`gorm:"column:table_name" json:"table_name"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
DatabaseName	string	`gorm:"column:database_name" json:"database_name"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
TablegroupName	string	`gorm:"column:tablegroup_name" json:"tablegroup_name"`			
TableType	int64	`gorm:"column:table_type" json:"table_type"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
IndexStatus	int64	`gorm:"column:index_status" json:"index_status"`			
IndexType	int64	`gorm:"column:index_type" json:"index_type"`			
PartLevel	int64	`gorm:"column:part_level" json:"part_level"`			
PartFuncType	int64	`gorm:"column:part_func_type" json:"part_func_type"`			
PartFuncExpr	string	`gorm:"column:part_func_expr" json:"part_func_expr"`			
PartNum	int64	`gorm:"column:part_num" json:"part_num"`			
SubPartFuncType	int64	`gorm:"column:sub_part_func_type" json:"sub_part_func_type"`			
SubPartFuncExpr	string	`gorm:"column:sub_part_func_expr" json:"sub_part_func_expr"`			
SubPartNum	int64	`gorm:"column:sub_part_num" json:"sub_part_num"`			
Dop	int64	`gorm:"column:dop" json:"dop"`			
AutoPart	int8	`gorm:"column:auto_part" json:"auto_part"`			
AutoPartSize	int64	`gorm:"column:auto_part_size" json:"auto_part_size"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$table) TableName() string {
	return "gv$table"
}
	

// Gv$tableColumns get sql column name.获取数据库列名
var Gv$tableColumns = struct { 
	TenantID string
	TenantName string
	TableID string
	TableName string
	DatabaseID string
	DatabaseName string
	TablegroupID string
	TablegroupName string
	TableType string
	ZoneList string
	PrimaryZone string
	CollationType string
	Locality string
	SchemaVersion string
	ReadOnly string
	Comment string
	IndexStatus string
	IndexType string
	PartLevel string
	PartFuncType string
	PartFuncExpr string
	PartNum string
	SubPartFuncType string
	SubPartFuncExpr string
	SubPartNum string
	Dop string
	AutoPart string
	AutoPartSize string    
	}{ 
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		TableID:"table_id",  
		TableName:"table_name",  
		DatabaseID:"database_id",  
		DatabaseName:"database_name",  
		TablegroupID:"tablegroup_id",  
		TablegroupName:"tablegroup_name",  
		TableType:"table_type",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		CollationType:"collation_type",  
		Locality:"locality",  
		SchemaVersion:"schema_version",  
		ReadOnly:"read_only",  
		Comment:"comment",  
		IndexStatus:"index_status",  
		IndexType:"index_type",  
		PartLevel:"part_level",  
		PartFuncType:"part_func_type",  
		PartFuncExpr:"part_func_expr",  
		PartNum:"part_num",  
		SubPartFuncType:"sub_part_func_type",  
		SubPartFuncExpr:"sub_part_func_expr",  
		SubPartNum:"sub_part_num",  
		Dop:"dop",  
		AutoPart:"auto_part",  
		AutoPartSize:"auto_part_size",             
	}
	
// Gv$tenant [...]		
type	Gv$tenant	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
ZoneList	string	`gorm:"column:zone_list" json:"zone_list"`			
PrimaryZone	string	`gorm:"column:primary_zone" json:"primary_zone"`			
CollationType	int64	`gorm:"column:collation_type" json:"collation_type"`			
Info	string	`gorm:"column:info" json:"info"`			
ReadOnly	int64	`gorm:"column:read_only" json:"read_only"`			
Locality	string	`gorm:"column:locality" json:"locality"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$tenant) TableName() string {
	return "gv$tenant"
}
	

// Gv$tenantColumns get sql column name.获取数据库列名
var Gv$tenantColumns = struct { 
	TenantID string
	TenantName string
	ZoneList string
	PrimaryZone string
	CollationType string
	Info string
	ReadOnly string
	Locality string    
	}{ 
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		ZoneList:"zone_list",  
		PrimaryZone:"primary_zone",  
		CollationType:"collation_type",  
		Info:"info",  
		ReadOnly:"read_only",  
		Locality:"locality",             
	}
	
// Gv$tenantMemstoreAllocatorInfo [...]		
type	Gv$tenantMemstoreAllocatorInfo	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
MtBaseVersion	int64	`gorm:"column:MT_BASE_VERSION" json:"mt_base_version"`			
RetireClock	int64	`gorm:"column:RETIRE_CLOCK" json:"retire_clock"`			
MtIsFrozen	int64	`gorm:"column:MT_IS_FROZEN" json:"mt_is_frozen"`			
MtProtectionClock	int64	`gorm:"column:MT_PROTECTION_CLOCK" json:"mt_protection_clock"`			
MtSnapshotVersion	int64	`gorm:"column:MT_SNAPSHOT_VERSION" json:"mt_snapshot_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$tenantMemstoreAllocatorInfo) TableName() string {
	return "gv$tenant_memstore_allocator_info"
}
	

// Gv$tenantMemstoreAllocatorInfoColumns get sql column name.获取数据库列名
var Gv$tenantMemstoreAllocatorInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	MtBaseVersion string
	RetireClock string
	MtIsFrozen string
	MtProtectionClock string
	MtSnapshotVersion string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		MtBaseVersion:"MT_BASE_VERSION",  
		RetireClock:"RETIRE_CLOCK",  
		MtIsFrozen:"MT_IS_FROZEN",  
		MtProtectionClock:"MT_PROTECTION_CLOCK",  
		MtSnapshotVersion:"MT_SNAPSHOT_VERSION",             
	}
	
// Gv$tenantPxWorkerStat [...]		
type	Gv$tenantPxWorkerStat	struct {		
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
QcID	int64	`gorm:"column:qc_id" json:"qc_id"`			
SqcID	int64	`gorm:"column:sqc_id" json:"sqc_id"`			
WorkerID	int64	`gorm:"column:worker_id" json:"worker_id"`			
DfoID	int64	`gorm:"column:dfo_id" json:"dfo_id"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$tenantPxWorkerStat) TableName() string {
	return "gv$tenant_px_worker_stat"
}
	

// Gv$tenantPxWorkerStatColumns get sql column name.获取数据库列名
var Gv$tenantPxWorkerStatColumns = struct { 
	SessionID string
	TenantID string
	SvrIP string
	SvrPort string
	TraceID string
	QcID string
	SqcID string
	WorkerID string
	DfoID string
	StartTime string    
	}{ 
		SessionID:"session_id",  
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TraceID:"trace_id",  
		QcID:"qc_id",  
		SqcID:"sqc_id",  
		WorkerID:"worker_id",  
		DfoID:"dfo_id",  
		StartTime:"start_time",             
	}
	
// Gv$tenantSequenceObject [...]		
type	Gv$tenantSequenceObject	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SequenceID	int64	`gorm:"column:sequence_id" json:"sequence_id"`			
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
GmtModified	time.Time	`gorm:"column:gmt_modified" json:"gmt_modified"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
DatabaseID	int64	`gorm:"column:database_id" json:"database_id"`			
SequenceName	string	`gorm:"column:sequence_name" json:"sequence_name"`			
MinValue	float64	`gorm:"column:min_value" json:"min_value"`			
MaxValue	float64	`gorm:"column:max_value" json:"max_value"`			
IncrementBy	float64	`gorm:"column:increment_by" json:"increment_by"`			
StartWith	float64	`gorm:"column:start_with" json:"start_with"`			
CacheSize	float64	`gorm:"column:cache_size" json:"cache_size"`			
OrderFlag	int8	`gorm:"column:order_flag" json:"order_flag"`			
CycleFlag	int8	`gorm:"column:cycle_flag" json:"cycle_flag"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$tenantSequenceObject) TableName() string {
	return "gv$tenant_sequence_object"
}
	

// Gv$tenantSequenceObjectColumns get sql column name.获取数据库列名
var Gv$tenantSequenceObjectColumns = struct { 
	TenantID string
	SequenceID string
	GmtCreate string
	GmtModified string
	SchemaVersion string
	DatabaseID string
	SequenceName string
	MinValue string
	MaxValue string
	IncrementBy string
	StartWith string
	CacheSize string
	OrderFlag string
	CycleFlag string    
	}{ 
		TenantID:"tenant_id",  
		SequenceID:"sequence_id",  
		GmtCreate:"gmt_create",  
		GmtModified:"gmt_modified",  
		SchemaVersion:"schema_version",  
		DatabaseID:"database_id",  
		SequenceName:"sequence_name",  
		MinValue:"min_value",  
		MaxValue:"max_value",  
		IncrementBy:"increment_by",  
		StartWith:"start_with",  
		CacheSize:"cache_size",  
		OrderFlag:"order_flag",  
		CycleFlag:"cycle_flag",             
	}
	
// Gv$unit [...]		
type	Gv$unit	struct {		
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
UnitConfigID	int64	`gorm:"column:unit_config_id" json:"unit_config_id"`			
UnitConfigName	string	`gorm:"column:unit_config_name" json:"unit_config_name"`			
ResourcePoolID	int64	`gorm:"column:resource_pool_id" json:"resource_pool_id"`			
ResourcePoolName	string	`gorm:"column:resource_pool_name" json:"resource_pool_name"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
MigrateFromSvrIP	string	`gorm:"column:migrate_from_svr_ip" json:"migrate_from_svr_ip"`			
MigrateFromSvrPort	int64	`gorm:"column:migrate_from_svr_port" json:"migrate_from_svr_port"`			
MaxCPU	float64	`gorm:"column:max_cpu" json:"max_cpu"`			
MinCPU	float64	`gorm:"column:min_cpu" json:"min_cpu"`			
MaxMemory	int64	`gorm:"column:max_memory" json:"max_memory"`			
MinMemory	int64	`gorm:"column:min_memory" json:"min_memory"`			
MaxIops	int64	`gorm:"column:max_iops" json:"max_iops"`			
MinIops	int64	`gorm:"column:min_iops" json:"min_iops"`			
MaxDiskSize	int64	`gorm:"column:max_disk_size" json:"max_disk_size"`			
MaxSessionNum	int64	`gorm:"column:max_session_num" json:"max_session_num"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$unit) TableName() string {
	return "gv$unit"
}
	

// Gv$unitColumns get sql column name.获取数据库列名
var Gv$unitColumns = struct { 
	UnitID string
	UnitConfigID string
	UnitConfigName string
	ResourcePoolID string
	ResourcePoolName string
	Zone string
	TenantID string
	TenantName string
	SvrIP string
	SvrPort string
	MigrateFromSvrIP string
	MigrateFromSvrPort string
	MaxCPU string
	MinCPU string
	MaxMemory string
	MinMemory string
	MaxIops string
	MinIops string
	MaxDiskSize string
	MaxSessionNum string    
	}{ 
		UnitID:"unit_id",  
		UnitConfigID:"unit_config_id",  
		UnitConfigName:"unit_config_name",  
		ResourcePoolID:"resource_pool_id",  
		ResourcePoolName:"resource_pool_name",  
		Zone:"zone",  
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		MigrateFromSvrIP:"migrate_from_svr_ip",  
		MigrateFromSvrPort:"migrate_from_svr_port",  
		MaxCPU:"max_cpu",  
		MinCPU:"min_cpu",  
		MaxMemory:"max_memory",  
		MinMemory:"min_memory",  
		MaxIops:"max_iops",  
		MinIops:"min_iops",  
		MaxDiskSize:"max_disk_size",  
		MaxSessionNum:"max_session_num",             
	}
	
// Gv$unitLoadBalanceEventHistory [...]		
type	Gv$unitLoadBalanceEventHistory	struct {		
GmtCreate	time.Time	`gorm:"column:gmt_create" json:"gmt_create"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
TableID	string	`gorm:"column:table_id" json:"table_id"`			
PartitionID	string	`gorm:"column:partition_id" json:"partition_id"`			
DataSize	string	`gorm:"column:data_size" json:"data_size"`			
ReplicaType	string	`gorm:"column:replica_type" json:"replica_type"`			
SrcIP	string	`gorm:"column:src_ip" json:"src_ip"`			
SrcPort	string	`gorm:"column:src_port" json:"src_port"`			
DestUnitID	string	`gorm:"column:dest_unit_id" json:"dest_unit_id"`			
DestIP	string	`gorm:"column:dest_ip" json:"dest_ip"`			
DestPort	string	`gorm:"column:dest_port" json:"dest_port"`			
DataSrcIP	string	`gorm:"column:data_src_ip" json:"data_src_ip"`			
DataSrcPort	string	`gorm:"column:data_src_port" json:"data_src_port"`			
ResultCode	string	`gorm:"column:result_code" json:"result_code"`			
ResultStr	string	`gorm:"column:result_str" json:"result_str"`			
Comment	string	`gorm:"column:comment" json:"comment"`			
RsSvrIP	string	`gorm:"column:rs_svr_ip" json:"rs_svr_ip"`			
RsSvrPort	int64	`gorm:"column:rs_svr_port" json:"rs_svr_port"`			
}		

// TableName get sql table name.获取数据库表名
func (m *Gv$unitLoadBalanceEventHistory) TableName() string {
	return "gv$unit_load_balance_event_history"
}
	

// Gv$unitLoadBalanceEventHistoryColumns get sql column name.获取数据库列名
var Gv$unitLoadBalanceEventHistoryColumns = struct { 
	GmtCreate string
	Zone string
	TableID string
	PartitionID string
	DataSize string
	ReplicaType string
	SrcIP string
	SrcPort string
	DestUnitID string
	DestIP string
	DestPort string
	DataSrcIP string
	DataSrcPort string
	ResultCode string
	ResultStr string
	Comment string
	RsSvrIP string
	RsSvrPort string    
	}{ 
		GmtCreate:"gmt_create",  
		Zone:"zone",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		DataSize:"data_size",  
		ReplicaType:"replica_type",  
		SrcIP:"src_ip",  
		SrcPort:"src_port",  
		DestUnitID:"dest_unit_id",  
		DestIP:"dest_ip",  
		DestPort:"dest_port",  
		DataSrcIP:"data_src_ip",  
		DataSrcPort:"data_src_port",  
		ResultCode:"result_code",  
		ResultStr:"result_str",  
		Comment:"comment",  
		RsSvrIP:"rs_svr_ip",  
		RsSvrPort:"rs_svr_port",             
	}
	
// V$eventName [...]		
type	V$eventName	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
EventID	int64	`gorm:"column:EVENT_ID" json:"event_id"`			
Event#	int64	`gorm:"column:EVENT#" json:"even_t#"`			
Name	string	`gorm:"column:NAME" json:"name"`			
DisplayName	string	`gorm:"column:DISPLAY_NAME" json:"display_name"`			
Parameter1	string	`gorm:"column:PARAMETER1" json:"pa_ram_eter1"`			
Parameter2	string	`gorm:"column:PARAMETER2" json:"pa_ram_eter2"`			
Parameter3	string	`gorm:"column:PARAMETER3" json:"pa_ram_eter3"`			
WaitClassID	int64	`gorm:"column:WAIT_CLASS_ID" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:WAIT_CLASS#" json:"wait_clas_s#"`			
WaitClass	string	`gorm:"column:WAIT_CLASS" json:"wait_class"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$eventName) TableName() string {
	return "v$event_name"
}
	

// V$eventNameColumns get sql column name.获取数据库列名
var V$eventNameColumns = struct { 
	ConID string
	EventID string
	Event# string
	Name string
	DisplayName string
	Parameter1 string
	Parameter2 string
	Parameter3 string
	WaitClassID string
	WaitClass# string
	WaitClass string    
	}{ 
		ConID:"CON_ID",  
		EventID:"EVENT_ID",  
		Event#:"EVENT#",  
		Name:"NAME",  
		DisplayName:"DISPLAY_NAME",  
		Parameter1:"PARAMETER1",  
		Parameter2:"PARAMETER2",  
		Parameter3:"PARAMETER3",  
		WaitClassID:"WAIT_CLASS_ID",  
		WaitClass#:"WAIT_CLASS#",  
		WaitClass:"WAIT_CLASS",             
	}
	
// V$latch [...]		
type	V$latch	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
Addr	string	`gorm:"column:ADDR" json:"addr"`			
Latch#	int64	`gorm:"column:LATCH#" json:"latc_h#"`			
Level#	int64	`gorm:"column:LEVEL#" json:"leve_l#"`			
Name	string	`gorm:"column:NAME" json:"name"`			
Hash	int64	`gorm:"column:HASH" json:"hash"`			
Gets	int64	`gorm:"column:GETS" json:"gets"`			
Misses	int64	`gorm:"column:MISSES" json:"misses"`			
Sleeps	int64	`gorm:"column:SLEEPS" json:"sleeps"`			
ImmediateGets	int64	`gorm:"column:IMMEDIATE_GETS" json:"immediate_gets"`			
ImmediateMisses	int64	`gorm:"column:IMMEDIATE_MISSES" json:"immediate_misses"`			
SpinGets	int64	`gorm:"column:SPIN_GETS" json:"spin_gets"`			
WaitTime	int64	`gorm:"column:WAIT_TIME" json:"wait_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$latch) TableName() string {
	return "v$latch"
}
	

// V$latchColumns get sql column name.获取数据库列名
var V$latchColumns = struct { 
	ConID string
	SvrIP string
	SvrPort string
	Addr string
	Latch# string
	Level# string
	Name string
	Hash string
	Gets string
	Misses string
	Sleeps string
	ImmediateGets string
	ImmediateMisses string
	SpinGets string
	WaitTime string    
	}{ 
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		Addr:"ADDR",  
		Latch#:"LATCH#",  
		Level#:"LEVEL#",  
		Name:"NAME",  
		Hash:"HASH",  
		Gets:"GETS",  
		Misses:"MISSES",  
		Sleeps:"SLEEPS",  
		ImmediateGets:"IMMEDIATE_GETS",  
		ImmediateMisses:"IMMEDIATE_MISSES",  
		SpinGets:"SPIN_GETS",  
		WaitTime:"WAIT_TIME",             
	}
	
// V$lock [...]		
type	V$lock	struct {		
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
Addr	string	`gorm:"column:ADDR" json:"addr"`			
Kaddr	uint64	`gorm:"column:KADDR" json:"kaddr"`			
Sid	int64	`gorm:"column:SID" json:"s_id"`			
Type	int64	`gorm:"column:TYPE" json:"type"`			
Lmode	int64	`gorm:"column:LMODE" json:"lmode"`			
Request	int64	`gorm:"column:REQUEST" json:"request"`			
Ctime	int64	`gorm:"column:CTIME" json:"ctime"`			
Block	int64	`gorm:"column:BLOCK" json:"block"`			
ConID	uint64	`gorm:"column:CON_ID" json:"con_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$lock) TableName() string {
	return "v$lock"
}
	

// V$lockColumns get sql column name.获取数据库列名
var V$lockColumns = struct { 
	TableID string
	Addr string
	Kaddr string
	Sid string
	Type string
	Lmode string
	Request string
	Ctime string
	Block string
	ConID string    
	}{ 
		TableID:"TABLE_ID",  
		Addr:"ADDR",  
		Kaddr:"KADDR",  
		Sid:"SID",  
		Type:"TYPE",  
		Lmode:"LMODE",  
		Request:"REQUEST",  
		Ctime:"CTIME",  
		Block:"BLOCK",  
		ConID:"CON_ID",             
	}
	
// V$lockWaitStat [...]		
type	V$lockWaitStat	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
TableName	string	`gorm:"column:TABLE_NAME" json:"table_name"`			
Rowkey	string	`gorm:"column:ROWKEY" json:"rowkey"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
SessionID	int64	`gorm:"column:SESSION_ID" json:"session_id"`			
NeedWait	int8	`gorm:"column:NEED_WAIT" json:"need_wait"`			
RecvTs	int64	`gorm:"column:RECV_TS" json:"recv_ts"`			
LockTs	int64	`gorm:"column:LOCK_TS" json:"lock_ts"`			
AbsTimeout	int64	`gorm:"column:ABS_TIMEOUT" json:"abs_timeout"`			
TryLockTimes	int64	`gorm:"column:TRY_LOCK_TIMES" json:"try_lock_times"`			
TimeAfterRecv	int64	`gorm:"column:TIME_AFTER_RECV" json:"time_after_recv"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$lockWaitStat) TableName() string {
	return "v$lock_wait_stat"
}
	

// V$lockWaitStatColumns get sql column name.获取数据库列名
var V$lockWaitStatColumns = struct { 
	TenantID string
	TableID string
	TableName string
	Rowkey string
	SvrIP string
	SvrPort string
	SessionID string
	NeedWait string
	RecvTs string
	LockTs string
	AbsTimeout string
	TryLockTimes string
	TimeAfterRecv string    
	}{ 
		TenantID:"TENANT_ID",  
		TableID:"TABLE_ID",  
		TableName:"TABLE_NAME",  
		Rowkey:"ROWKEY",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		SessionID:"SESSION_ID",  
		NeedWait:"NEED_WAIT",  
		RecvTs:"RECV_TS",  
		LockTs:"LOCK_TS",  
		AbsTimeout:"ABS_TIMEOUT",  
		TryLockTimes:"TRY_LOCK_TIMES",  
		TimeAfterRecv:"TIME_AFTER_RECV",             
	}
	
// V$memory [...]		
type	V$memory	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Context	string	`gorm:"column:CONTEXT" json:"context"`			
Count	float64	`gorm:"column:COUNT" json:"count"`			
Used	float64	`gorm:"column:USED" json:"used"`			
AllocCount	float64	`gorm:"column:ALLOC_COUNT" json:"alloc_count"`			
FreeCount	float64	`gorm:"column:FREE_COUNT" json:"free_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$memory) TableName() string {
	return "v$memory"
}
	

// V$memoryColumns get sql column name.获取数据库列名
var V$memoryColumns = struct { 
	TenantID string
	Context string
	Count string
	Used string
	AllocCount string
	FreeCount string    
	}{ 
		TenantID:"TENANT_ID",  
		Context:"CONTEXT",  
		Count:"COUNT",  
		Used:"USED",  
		AllocCount:"ALLOC_COUNT",  
		FreeCount:"FREE_COUNT",             
	}
	
// V$memstore [...]		
type	V$memstore	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Active	int64	`gorm:"column:ACTIVE" json:"active"`			
Total	int64	`gorm:"column:TOTAL" json:"total"`			
FreezeTrigger	int64	`gorm:"column:FREEZE_TRIGGER" json:"freeze_trigger"`			
MemLimit	int64	`gorm:"column:MEM_LIMIT" json:"mem_limit"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$memstore) TableName() string {
	return "v$memstore"
}
	

// V$memstoreColumns get sql column name.获取数据库列名
var V$memstoreColumns = struct { 
	TenantID string
	Active string
	Total string
	FreezeTrigger string
	MemLimit string    
	}{ 
		TenantID:"TENANT_ID",  
		Active:"ACTIVE",  
		Total:"TOTAL",  
		FreezeTrigger:"FREEZE_TRIGGER",  
		MemLimit:"MEM_LIMIT",             
	}
	
// V$memstoreInfo [...]		
type	V$memstoreInfo	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
Version	string	`gorm:"column:VERSION" json:"version"`			
BaseVersion	int64	`gorm:"column:BASE_VERSION" json:"base_version"`			
MultiVersionStart	int64	`gorm:"column:MULTI_VERSION_START" json:"multi_version_start"`			
SnapshotVersion	int64	`gorm:"column:SNAPSHOT_VERSION" json:"snapshot_version"`			
IsActive	int64	`gorm:"column:IS_ACTIVE" json:"is_active"`			
Used	int64	`gorm:"column:USED" json:"used"`			
HashItems	int64	`gorm:"column:HASH_ITEMS" json:"hash_items"`			
BtreeItems	int64	`gorm:"column:BTREE_ITEMS" json:"btree_items"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$memstoreInfo) TableName() string {
	return "v$memstore_info"
}
	

// V$memstoreInfoColumns get sql column name.获取数据库列名
var V$memstoreInfoColumns = struct { 
	TenantID string
	IP string
	Port string
	TableID string
	PartitionID string
	Version string
	BaseVersion string
	MultiVersionStart string
	SnapshotVersion string
	IsActive string
	Used string
	HashItems string
	BtreeItems string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		Version:"VERSION",  
		BaseVersion:"BASE_VERSION",  
		MultiVersionStart:"MULTI_VERSION_START",  
		SnapshotVersion:"SNAPSHOT_VERSION",  
		IsActive:"IS_ACTIVE",  
		Used:"USED",  
		HashItems:"HASH_ITEMS",  
		BtreeItems:"BTREE_ITEMS",             
	}
	
// V$mergeInfo [...]		
type	V$mergeInfo	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
Type	string	`gorm:"column:TYPE" json:"type"`			
Action	string	`gorm:"column:ACTION" json:"action"`			
Version	string	`gorm:"column:VERSION" json:"version"`			
StartTime	time.Time	`gorm:"column:START_TIME" json:"start_time"`			
EndTime	time.Time	`gorm:"column:END_TIME" json:"end_time"`			
MacroBlockCount	int64	`gorm:"column:MACRO_BLOCK_COUNT" json:"macro_block_count"`			
ReusePct	float64	`gorm:"column:REUSE_PCT" json:"reuse_pct"`			
ParallelDegree	int64	`gorm:"column:PARALLEL_DEGREE" json:"parallel_degree"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$mergeInfo) TableName() string {
	return "v$merge_info"
}
	

// V$mergeInfoColumns get sql column name.获取数据库列名
var V$mergeInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	Type string
	Action string
	Version string
	StartTime string
	EndTime string
	MacroBlockCount string
	ReusePct string
	ParallelDegree string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		Type:"TYPE",  
		Action:"ACTION",  
		Version:"VERSION",  
		StartTime:"START_TIME",  
		EndTime:"END_TIME",  
		MacroBlockCount:"MACRO_BLOCK_COUNT",  
		ReusePct:"REUSE_PCT",  
		ParallelDegree:"PARALLEL_DEGREE",             
	}
	
// V$obAllClusters [...]		
type	V$obAllClusters	struct {		
}		

// TableName get sql table name.获取数据库表名
func (m *V$obAllClusters) TableName() string {
	return "v$ob_all_clusters"
}
	

// V$obAllClustersColumns get sql column name.获取数据库列名
var V$obAllClustersColumns = struct {     
	}{            
	}
	
// V$obCluster [...]		
type	V$obCluster	struct {		
ClusterID	int64	`gorm:"column:cluster_id" json:"cluster_id"`			
ClusterName	string	`gorm:"column:cluster_name" json:"cluster_name"`			
Created	time.Time	`gorm:"column:created" json:"created"`			
ClusterRole	string	`gorm:"column:cluster_role" json:"cluster_role"`			
ClusterStatus	string	`gorm:"column:cluster_status" json:"cluster_status"`			
Switchover#	int64	`gorm:"column:switchover#" json:"switchover#"`			
SwitchoverStatus	string	`gorm:"column:switchover_status" json:"switchover_status"`			
SwitchoverInfo	string	`gorm:"column:switchover_info" json:"switchover_info"`			
CurrentScn	int64	`gorm:"column:current_scn" json:"current_scn"`			
StandbyBecamePrimaryScn	int64	`gorm:"column:standby_became_primary_scn" json:"standby_became_primary_scn"`			
PrimaryClusterID	int64	`gorm:"column:primary_cluster_id" json:"primary_cluster_id"`			
ProtectionMode	string	`gorm:"column:protection_mode" json:"protection_mode"`			
ProtectionLevel	string	`gorm:"column:protection_level" json:"protection_level"`			
RedoTransportOptions	string	`gorm:"column:redo_transport_options" json:"redo_transport_options"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$obCluster) TableName() string {
	return "v$ob_cluster"
}
	

// V$obClusterColumns get sql column name.获取数据库列名
var V$obClusterColumns = struct { 
	ClusterID string
	ClusterName string
	Created string
	ClusterRole string
	ClusterStatus string
	Switchover# string
	SwitchoverStatus string
	SwitchoverInfo string
	CurrentScn string
	StandbyBecamePrimaryScn string
	PrimaryClusterID string
	ProtectionMode string
	ProtectionLevel string
	RedoTransportOptions string    
	}{ 
		ClusterID:"cluster_id",  
		ClusterName:"cluster_name",  
		Created:"created",  
		ClusterRole:"cluster_role",  
		ClusterStatus:"cluster_status",  
		Switchover#:"switchover#",  
		SwitchoverStatus:"switchover_status",  
		SwitchoverInfo:"switchover_info",  
		CurrentScn:"current_scn",  
		StandbyBecamePrimaryScn:"standby_became_primary_scn",  
		PrimaryClusterID:"primary_cluster_id",  
		ProtectionMode:"protection_mode",  
		ProtectionLevel:"protection_level",  
		RedoTransportOptions:"redo_transport_options",             
	}
	
// V$obSQLWorkareaMemoryInfo [...]		
type	V$obSQLWorkareaMemoryInfo	struct {		
MaxWorkareaSize	int64	`gorm:"column:max_workarea_size" json:"max_workarea_size"`			
WorkareaHoldSize	int64	`gorm:"column:workarea_hold_size" json:"workarea_hold_size"`			
MaxAutoWorkareaSize	int64	`gorm:"column:max_auto_workarea_size" json:"max_auto_workarea_size"`			
MemTarget	int64	`gorm:"column:mem_target" json:"mem_target"`			
TotalMemUsed	int64	`gorm:"column:total_mem_used" json:"total_mem_used"`			
GlobalMemBound	int64	`gorm:"column:global_mem_bound" json:"global_mem_bound"`			
DriftSize	int64	`gorm:"column:drift_size" json:"drift_size"`			
WorkareaCount	int64	`gorm:"column:workarea_count" json:"workarea_count"`			
ManualCalcCount	int64	`gorm:"column:manual_calc_count" json:"manual_calc_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$obSQLWorkareaMemoryInfo) TableName() string {
	return "v$ob_sql_workarea_memory_info"
}
	

// V$obSQLWorkareaMemoryInfoColumns get sql column name.获取数据库列名
var V$obSQLWorkareaMemoryInfoColumns = struct { 
	MaxWorkareaSize string
	WorkareaHoldSize string
	MaxAutoWorkareaSize string
	MemTarget string
	TotalMemUsed string
	GlobalMemBound string
	DriftSize string
	WorkareaCount string
	ManualCalcCount string    
	}{ 
		MaxWorkareaSize:"max_workarea_size",  
		WorkareaHoldSize:"workarea_hold_size",  
		MaxAutoWorkareaSize:"max_auto_workarea_size",  
		MemTarget:"mem_target",  
		TotalMemUsed:"total_mem_used",  
		GlobalMemBound:"global_mem_bound",  
		DriftSize:"drift_size",  
		WorkareaCount:"workarea_count",  
		ManualCalcCount:"manual_calc_count",             
	}
	
// V$obTimestampService [...]		
type	V$obTimestampService	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TsType	string	`gorm:"column:ts_type" json:"ts_type"`			
TsValue	int64	`gorm:"column:ts_value" json:"ts_value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$obTimestampService) TableName() string {
	return "v$ob_timestamp_service"
}
	

// V$obTimestampServiceColumns get sql column name.获取数据库列名
var V$obTimestampServiceColumns = struct { 
	TenantID string
	TsType string
	TsValue string    
	}{ 
		TenantID:"tenant_id",  
		TsType:"ts_type",  
		TsValue:"ts_value",             
	}
	
// V$obTransTableStatus [...]		
type	V$obTransTableStatus	struct {		
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
EndLogID	int64	`gorm:"column:END_LOG_ID" json:"end_log_id"`			
TransCnt	int64	`gorm:"column:TRANS_CNT" json:"trans_cnt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$obTransTableStatus) TableName() string {
	return "v$ob_trans_table_status"
}
	

// V$obTransTableStatusColumns get sql column name.获取数据库列名
var V$obTransTableStatusColumns = struct { 
	TableID string
	PartitionID string
	EndLogID string
	TransCnt string    
	}{ 
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		EndLogID:"END_LOG_ID",  
		TransCnt:"TRANS_CNT",             
	}
	
// V$obrpcIncoming [...]		
type	V$obrpcIncoming	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
Pcode	int64	`gorm:"column:PCODE" json:"pcode"`			
PcodeName	string	`gorm:"column:PCODE_NAME" json:"pcode_name"`			
Count	int64	`gorm:"column:COUNT" json:"count"`			
TotalSize	int64	`gorm:"column:TOTAL_SIZE" json:"total_size"`			
NetTime	int64	`gorm:"column:NET_TIME" json:"net_time"`			
WaitTime	int64	`gorm:"column:WAIT_TIME" json:"wait_time"`			
QueueTime	int64	`gorm:"column:QUEUE_TIME" json:"queue_time"`			
ProcessTime	int64	`gorm:"column:PROCESS_TIME" json:"process_time"`			
LastTimestamp	time.Time	`gorm:"column:LAST_TIMESTAMP" json:"last_timestamp"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$obrpcIncoming) TableName() string {
	return "v$obrpc_incoming"
}
	

// V$obrpcIncomingColumns get sql column name.获取数据库列名
var V$obrpcIncomingColumns = struct { 
	TenantID string
	IP string
	Port string
	Pcode string
	PcodeName string
	Count string
	TotalSize string
	NetTime string
	WaitTime string
	QueueTime string
	ProcessTime string
	LastTimestamp string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		Pcode:"PCODE",  
		PcodeName:"PCODE_NAME",  
		Count:"COUNT",  
		TotalSize:"TOTAL_SIZE",  
		NetTime:"NET_TIME",  
		WaitTime:"WAIT_TIME",  
		QueueTime:"QUEUE_TIME",  
		ProcessTime:"PROCESS_TIME",  
		LastTimestamp:"LAST_TIMESTAMP",             
	}
	
// V$obrpcOutgoing [...]		
type	V$obrpcOutgoing	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
Pcode	int64	`gorm:"column:PCODE" json:"pcode"`			
PcodeName	string	`gorm:"column:PCODE_NAME" json:"pcode_name"`			
Count	int64	`gorm:"column:COUNT" json:"count"`			
TotalTime	int64	`gorm:"column:TOTAL_TIME" json:"total_time"`			
TotalSize	int64	`gorm:"column:TOTAL_SIZE" json:"total_size"`			
Failure	int64	`gorm:"column:FAILURE" json:"failure"`			
Timeout	int64	`gorm:"column:TIMEOUT" json:"timeout"`			
Sync	int64	`gorm:"column:SYNC" json:"sync"`			
Async	int64	`gorm:"column:ASYNC" json:"async"`			
LastTimestamp	time.Time	`gorm:"column:LAST_TIMESTAMP" json:"last_timestamp"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$obrpcOutgoing) TableName() string {
	return "v$obrpc_outgoing"
}
	

// V$obrpcOutgoingColumns get sql column name.获取数据库列名
var V$obrpcOutgoingColumns = struct { 
	TenantID string
	IP string
	Port string
	Pcode string
	PcodeName string
	Count string
	TotalTime string
	TotalSize string
	Failure string
	Timeout string
	Sync string
	Async string
	LastTimestamp string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		Pcode:"PCODE",  
		PcodeName:"PCODE_NAME",  
		Count:"COUNT",  
		TotalTime:"TOTAL_TIME",  
		TotalSize:"TOTAL_SIZE",  
		Failure:"FAILURE",  
		Timeout:"TIMEOUT",  
		Sync:"SYNC",  
		Async:"ASYNC",  
		LastTimestamp:"LAST_TIMESTAMP",             
	}
	
// V$partition [...]		
type	V$partition	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
TablegroupID	int64	`gorm:"column:tablegroup_id" json:"tablegroup_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
SQLPort	int64	`gorm:"column:sql_port" json:"sql_port"`			
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
PartitionCnt	int64	`gorm:"column:partition_cnt" json:"partition_cnt"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
Role	int64	`gorm:"column:role" json:"role"`			
MemberList	string	`gorm:"column:member_list" json:"member_list"`			
RowCount	int64	`gorm:"column:row_count" json:"row_count"`			
DataSize	int64	`gorm:"column:data_size" json:"data_size"`			
DataVersion	int64	`gorm:"column:data_version" json:"data_version"`			
PartitionChecksum	int64	`gorm:"column:partition_checksum" json:"partition_checksum"`			
DataChecksum	int64	`gorm:"column:data_checksum" json:"data_checksum"`			
RowChecksum	int64	`gorm:"column:row_checksum" json:"row_checksum"`			
ColumnChecksum	string	`gorm:"column:column_checksum" json:"column_checksum"`			
Rebuild	int64	`gorm:"column:rebuild" json:"rebuild"`			
ReplicaType	int64	`gorm:"column:replica_type" json:"replica_type"`			
RequiredSize	int64	`gorm:"column:required_size" json:"required_size"`			
Status	string	`gorm:"column:status" json:"status"`			
IsRestore	int64	`gorm:"column:is_restore" json:"is_restore"`			
Quorum	int64	`gorm:"column:quorum" json:"quorum"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$partition) TableName() string {
	return "v$partition"
}
	

// V$partitionColumns get sql column name.获取数据库列名
var V$partitionColumns = struct { 
	TenantID string
	TableID string
	TablegroupID string
	PartitionID string
	SvrIP string
	SvrPort string
	SQLPort string
	UnitID string
	PartitionCnt string
	Zone string
	Role string
	MemberList string
	RowCount string
	DataSize string
	DataVersion string
	PartitionChecksum string
	DataChecksum string
	RowChecksum string
	ColumnChecksum string
	Rebuild string
	ReplicaType string
	RequiredSize string
	Status string
	IsRestore string
	Quorum string    
	}{ 
		TenantID:"tenant_id",  
		TableID:"table_id",  
		TablegroupID:"tablegroup_id",  
		PartitionID:"partition_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLPort:"sql_port",  
		UnitID:"unit_id",  
		PartitionCnt:"partition_cnt",  
		Zone:"zone",  
		Role:"role",  
		MemberList:"member_list",  
		RowCount:"row_count",  
		DataSize:"data_size",  
		DataVersion:"data_version",  
		PartitionChecksum:"partition_checksum",  
		DataChecksum:"data_checksum",  
		RowChecksum:"row_checksum",  
		ColumnChecksum:"column_checksum",  
		Rebuild:"rebuild",  
		ReplicaType:"replica_type",  
		RequiredSize:"required_size",  
		Status:"status",  
		IsRestore:"is_restore",  
		Quorum:"quorum",             
	}
	
// V$partitionAudit [...]		
type	V$partitionAudit	struct {		
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TableID	int64	`gorm:"column:table_id" json:"table_id"`			
PartitionID	int64	`gorm:"column:partition_id" json:"partition_id"`			
PartitionStatus	int64	`gorm:"column:partition_status" json:"partition_status"`			
BaseRowCount	int64	`gorm:"column:base_row_count" json:"base_row_count"`			
InsertRowCount	int64	`gorm:"column:insert_row_count" json:"insert_row_count"`			
DeleteRowCount	int64	`gorm:"column:delete_row_count" json:"delete_row_count"`			
UpdateRowCount	int64	`gorm:"column:update_row_count" json:"update_row_count"`			
QueryRowCount	int64	`gorm:"column:query_row_count" json:"query_row_count"`			
InsertSQLCount	int64	`gorm:"column:insert_sql_count" json:"insert_sql_count"`			
DeleteSQLCount	int64	`gorm:"column:delete_sql_count" json:"delete_sql_count"`			
UpdateSQLCount	int64	`gorm:"column:update_sql_count" json:"update_sql_count"`			
QuerySQLCount	int64	`gorm:"column:query_sql_count" json:"query_sql_count"`			
TransCount	int64	`gorm:"column:trans_count" json:"trans_count"`			
SQLCount	int64	`gorm:"column:sql_count" json:"sql_count"`			
RollbackInsertRowCount	int64	`gorm:"column:rollback_insert_row_count" json:"rollback_insert_row_count"`			
RollbackDeleteRowCount	int64	`gorm:"column:rollback_delete_row_count" json:"rollback_delete_row_count"`			
RollbackUpdateRowCount	int64	`gorm:"column:rollback_update_row_count" json:"rollback_update_row_count"`			
RollbackInsertSQLCount	int64	`gorm:"column:rollback_insert_sql_count" json:"rollback_insert_sql_count"`			
RollbackDeleteSQLCount	int64	`gorm:"column:rollback_delete_sql_count" json:"rollback_delete_sql_count"`			
RollbackUpdateSQLCount	int64	`gorm:"column:rollback_update_sql_count" json:"rollback_update_sql_count"`			
RollbackTransCount	int64	`gorm:"column:rollback_trans_count" json:"rollback_trans_count"`			
RollbackSQLCount	int64	`gorm:"column:rollback_sql_count" json:"rollback_sql_count"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$partitionAudit) TableName() string {
	return "v$partition_audit"
}
	

// V$partitionAuditColumns get sql column name.获取数据库列名
var V$partitionAuditColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	PartitionStatus string
	BaseRowCount string
	InsertRowCount string
	DeleteRowCount string
	UpdateRowCount string
	QueryRowCount string
	InsertSQLCount string
	DeleteSQLCount string
	UpdateSQLCount string
	QuerySQLCount string
	TransCount string
	SQLCount string
	RollbackInsertRowCount string
	RollbackDeleteRowCount string
	RollbackUpdateRowCount string
	RollbackInsertSQLCount string
	RollbackDeleteSQLCount string
	RollbackUpdateSQLCount string
	RollbackTransCount string
	RollbackSQLCount string    
	}{ 
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TenantID:"tenant_id",  
		TableID:"table_id",  
		PartitionID:"partition_id",  
		PartitionStatus:"partition_status",  
		BaseRowCount:"base_row_count",  
		InsertRowCount:"insert_row_count",  
		DeleteRowCount:"delete_row_count",  
		UpdateRowCount:"update_row_count",  
		QueryRowCount:"query_row_count",  
		InsertSQLCount:"insert_sql_count",  
		DeleteSQLCount:"delete_sql_count",  
		UpdateSQLCount:"update_sql_count",  
		QuerySQLCount:"query_sql_count",  
		TransCount:"trans_count",  
		SQLCount:"sql_count",  
		RollbackInsertRowCount:"rollback_insert_row_count",  
		RollbackDeleteRowCount:"rollback_delete_row_count",  
		RollbackUpdateRowCount:"rollback_update_row_count",  
		RollbackInsertSQLCount:"rollback_insert_sql_count",  
		RollbackDeleteSQLCount:"rollback_delete_sql_count",  
		RollbackUpdateSQLCount:"rollback_update_sql_count",  
		RollbackTransCount:"rollback_trans_count",  
		RollbackSQLCount:"rollback_sql_count",             
	}
	
// V$planCachePlanExplain [...]		
type	V$planCachePlanExplain	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
IP	string	`gorm:"column:IP" json:"ip"`			
Port	int64	`gorm:"column:PORT" json:"port"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
PlanDepth	int64	`gorm:"column:PLAN_DEPTH" json:"plan_depth"`			
PlanLineID	int64	`gorm:"column:PLAN_LINE_ID" json:"plan_line_id"`			
Operator	string	`gorm:"column:OPERATOR" json:"operator"`			
Name	string	`gorm:"column:NAME" json:"name"`			
Rows	int64	`gorm:"column:ROWS" json:"rows"`			
Cost	int64	`gorm:"column:COST" json:"cost"`			
Property	string	`gorm:"column:PROPERTY" json:"property"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$planCachePlanExplain) TableName() string {
	return "v$plan_cache_plan_explain"
}
	

// V$planCachePlanExplainColumns get sql column name.获取数据库列名
var V$planCachePlanExplainColumns = struct { 
	TenantID string
	IP string
	Port string
	PlanID string
	PlanDepth string
	PlanLineID string
	Operator string
	Name string
	Rows string
	Cost string
	Property string    
	}{ 
		TenantID:"TENANT_ID",  
		IP:"IP",  
		Port:"PORT",  
		PlanID:"PLAN_ID",  
		PlanDepth:"PLAN_DEPTH",  
		PlanLineID:"PLAN_LINE_ID",  
		Operator:"OPERATOR",  
		Name:"NAME",  
		Rows:"ROWS",  
		Cost:"COST",  
		Property:"PROPERTY",             
	}
	
// V$planCachePlanStat [...]		
type	V$planCachePlanStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
PlanID	int64	`gorm:"column:plan_id" json:"plan_id"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
Type	int64	`gorm:"column:type" json:"type"`			
IsBindSensitive	int64	`gorm:"column:is_bind_sensitive" json:"is_bind_sensitive"`			
IsBindAware	int64	`gorm:"column:is_bind_aware" json:"is_bind_aware"`			
DbID	uint64	`gorm:"column:db_id" json:"db_id"`			
Statement	string	`gorm:"column:statement" json:"statement"`			
QuerySQL	string	`gorm:"column:query_sql" json:"query_sql"`			
SpecialParams	string	`gorm:"column:special_params" json:"special_params"`			
ParamInfos	string	`gorm:"column:param_infos" json:"param_infos"`			
SysVars	string	`gorm:"column:sys_vars" json:"sys_vars"`			
PlanHash	uint64	`gorm:"column:plan_hash" json:"plan_hash"`			
FirstLoadTime	time.Time	`gorm:"column:first_load_time" json:"first_load_time"`			
SchemaVersion	int64	`gorm:"column:schema_version" json:"schema_version"`			
MergedVersion	int64	`gorm:"column:merged_version" json:"merged_version"`			
LastActiveTime	time.Time	`gorm:"column:last_active_time" json:"last_active_time"`			
AvgExeUsec	int64	`gorm:"column:avg_exe_usec" json:"avg_exe_usec"`			
SlowestExeTime	time.Time	`gorm:"column:slowest_exe_time" json:"slowest_exe_time"`			
SlowestExeUsec	int64	`gorm:"column:slowest_exe_usec" json:"slowest_exe_usec"`			
SlowCount	int64	`gorm:"column:slow_count" json:"slow_count"`			
HitCount	int64	`gorm:"column:hit_count" json:"hit_count"`			
PlanSize	int64	`gorm:"column:plan_size" json:"plan_size"`			
Executions	int64	`gorm:"column:executions" json:"executions"`			
DiskReads	int64	`gorm:"column:disk_reads" json:"disk_reads"`			
DirectWrites	int64	`gorm:"column:direct_writes" json:"direct_writes"`			
BufferGets	int64	`gorm:"column:buffer_gets" json:"buffer_gets"`			
ApplicationWaitTime	uint64	`gorm:"column:application_wait_time" json:"application_wait_time"`			
ConcurrencyWaitTime	uint64	`gorm:"column:concurrency_wait_time" json:"concurrency_wait_time"`			
UserIoWaitTime	uint64	`gorm:"column:user_io_wait_time" json:"user_io_wait_time"`			
RowsProcessed	int64	`gorm:"column:rows_processed" json:"rows_processed"`			
ElapsedTime	uint64	`gorm:"column:elapsed_time" json:"elapsed_time"`			
CPUTime	uint64	`gorm:"column:cpu_time" json:"cpu_time"`			
LargeQuerys	int64	`gorm:"column:large_querys" json:"large_querys"`			
DelayedLargeQuerys	int64	`gorm:"column:delayed_large_querys" json:"delayed_large_querys"`			
DelayedPxQuerys	int64	`gorm:"column:delayed_px_querys" json:"delayed_px_querys"`			
OutlineVersion	int64	`gorm:"column:outline_version" json:"outline_version"`			
OutlineID	int64	`gorm:"column:outline_id" json:"outline_id"`			
OutlineData	string	`gorm:"column:outline_data" json:"outline_data"`			
AcsSelInfo	string	`gorm:"column:acs_sel_info" json:"acs_sel_info"`			
TableScan	int8	`gorm:"column:table_scan" json:"table_scan"`			
Evolution	int8	`gorm:"column:evolution" json:"evolution"`			
EvoExecutions	int64	`gorm:"column:evo_executions" json:"evo_executions"`			
EvoCPUTime	uint64	`gorm:"column:evo_cpu_time" json:"evo_cpu_time"`			
TimeoutCount	int64	`gorm:"column:timeout_count" json:"timeout_count"`			
PsStmtID	int64	`gorm:"column:ps_stmt_id" json:"ps_stmt_id"`			
Sessid	uint64	`gorm:"column:sessid" json:"sessid"`			
TempTables	string	`gorm:"column:temp_tables" json:"temp_tables"`			
IsUseJit	int8	`gorm:"column:is_use_jit" json:"is_use_jit"`			
ObjectType	string	`gorm:"column:object_type" json:"object_type"`			
HintsInfo	string	`gorm:"column:hints_info" json:"hints_info"`			
HintsAllWorked	int8	`gorm:"column:hints_all_worked" json:"hints_all_worked"`			
PlSchemaID	uint64	`gorm:"column:pl_schema_id" json:"pl_schema_id"`			
IsBatchedMultiStmt	int8	`gorm:"column:is_batched_multi_stmt" json:"is_batched_multi_stmt"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$planCachePlanStat) TableName() string {
	return "v$plan_cache_plan_stat"
}
	

// V$planCachePlanStatColumns get sql column name.获取数据库列名
var V$planCachePlanStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	PlanID string
	SQLID string
	Type string
	IsBindSensitive string
	IsBindAware string
	DbID string
	Statement string
	QuerySQL string
	SpecialParams string
	ParamInfos string
	SysVars string
	PlanHash string
	FirstLoadTime string
	SchemaVersion string
	MergedVersion string
	LastActiveTime string
	AvgExeUsec string
	SlowestExeTime string
	SlowestExeUsec string
	SlowCount string
	HitCount string
	PlanSize string
	Executions string
	DiskReads string
	DirectWrites string
	BufferGets string
	ApplicationWaitTime string
	ConcurrencyWaitTime string
	UserIoWaitTime string
	RowsProcessed string
	ElapsedTime string
	CPUTime string
	LargeQuerys string
	DelayedLargeQuerys string
	DelayedPxQuerys string
	OutlineVersion string
	OutlineID string
	OutlineData string
	AcsSelInfo string
	TableScan string
	Evolution string
	EvoExecutions string
	EvoCPUTime string
	TimeoutCount string
	PsStmtID string
	Sessid string
	TempTables string
	IsUseJit string
	ObjectType string
	HintsInfo string
	HintsAllWorked string
	PlSchemaID string
	IsBatchedMultiStmt string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		PlanID:"plan_id",  
		SQLID:"sql_id",  
		Type:"type",  
		IsBindSensitive:"is_bind_sensitive",  
		IsBindAware:"is_bind_aware",  
		DbID:"db_id",  
		Statement:"statement",  
		QuerySQL:"query_sql",  
		SpecialParams:"special_params",  
		ParamInfos:"param_infos",  
		SysVars:"sys_vars",  
		PlanHash:"plan_hash",  
		FirstLoadTime:"first_load_time",  
		SchemaVersion:"schema_version",  
		MergedVersion:"merged_version",  
		LastActiveTime:"last_active_time",  
		AvgExeUsec:"avg_exe_usec",  
		SlowestExeTime:"slowest_exe_time",  
		SlowestExeUsec:"slowest_exe_usec",  
		SlowCount:"slow_count",  
		HitCount:"hit_count",  
		PlanSize:"plan_size",  
		Executions:"executions",  
		DiskReads:"disk_reads",  
		DirectWrites:"direct_writes",  
		BufferGets:"buffer_gets",  
		ApplicationWaitTime:"application_wait_time",  
		ConcurrencyWaitTime:"concurrency_wait_time",  
		UserIoWaitTime:"user_io_wait_time",  
		RowsProcessed:"rows_processed",  
		ElapsedTime:"elapsed_time",  
		CPUTime:"cpu_time",  
		LargeQuerys:"large_querys",  
		DelayedLargeQuerys:"delayed_large_querys",  
		DelayedPxQuerys:"delayed_px_querys",  
		OutlineVersion:"outline_version",  
		OutlineID:"outline_id",  
		OutlineData:"outline_data",  
		AcsSelInfo:"acs_sel_info",  
		TableScan:"table_scan",  
		Evolution:"evolution",  
		EvoExecutions:"evo_executions",  
		EvoCPUTime:"evo_cpu_time",  
		TimeoutCount:"timeout_count",  
		PsStmtID:"ps_stmt_id",  
		Sessid:"sessid",  
		TempTables:"temp_tables",  
		IsUseJit:"is_use_jit",  
		ObjectType:"object_type",  
		HintsInfo:"hints_info",  
		HintsAllWorked:"hints_all_worked",  
		PlSchemaID:"pl_schema_id",  
		IsBatchedMultiStmt:"is_batched_multi_stmt",             
	}
	
// V$planCacheReferenceInfo [...]		
type	V$planCacheReferenceInfo	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
PcRefPlanLocal	int64	`gorm:"column:PC_REF_PLAN_LOCAL" json:"pc_ref_plan_local"`			
PcRefPlanRemote	int64	`gorm:"column:PC_REF_PLAN_REMOTE" json:"pc_ref_plan_remote"`			
PcRefPlanDist	int64	`gorm:"column:PC_REF_PLAN_DIST" json:"pc_ref_plan_dist"`			
PcRefPlanArr	int64	`gorm:"column:PC_REF_PLAN_ARR" json:"pc_ref_plan_arr"`			
PcRefPl	int64	`gorm:"column:PC_REF_PL" json:"pc_ref_pl"`			
PcRefPlStat	int64	`gorm:"column:PC_REF_PL_STAT" json:"pc_ref_pl_stat"`			
PlanGen	int64	`gorm:"column:PLAN_GEN" json:"plan_gen"`			
CliQuery	int64	`gorm:"column:CLI_QUERY" json:"cli_query"`			
OutlineExec	int64	`gorm:"column:OUTLINE_EXEC" json:"outline_exec"`			
PlanExplain	int64	`gorm:"column:PLAN_EXPLAIN" json:"plan_explain"`			
AsynBaseline	int64	`gorm:"column:ASYN_BASELINE" json:"asyn_baseline"`			
LoadBaseline	int64	`gorm:"column:LOAD_BASELINE" json:"load_baseline"`			
PsExec	int64	`gorm:"column:PS_EXEC" json:"ps_exec"`			
GvSQL	int64	`gorm:"column:GV_SQL" json:"gv_sql"`			
PlAnon	int64	`gorm:"column:PL_ANON" json:"pl_anon"`			
PlRoutine	int64	`gorm:"column:PL_ROUTINE" json:"pl_routine"`			
PackageVar	int64	`gorm:"column:PACKAGE_VAR" json:"package_var"`			
PackageType	int64	`gorm:"column:PACKAGE_TYPE" json:"package_type"`			
PackageSpec	int64	`gorm:"column:PACKAGE_SPEC" json:"package_spec"`			
PackageBody	int64	`gorm:"column:PACKAGE_BODY" json:"package_body"`			
PackageResv	int64	`gorm:"column:PACKAGE_RESV" json:"package_resv"`			
GetPkg	int64	`gorm:"column:GET_PKG" json:"get_pkg"`			
IndexBuilder	int64	`gorm:"column:INDEX_BUILDER" json:"index_b_ui_lder"`			
PcvSet	int64	`gorm:"column:PCV_SET" json:"pcv_set"`			
PcvRd	int64	`gorm:"column:PCV_RD" json:"pcv_rd"`			
PcvWr	int64	`gorm:"column:PCV_WR" json:"pcv_wr"`			
PcvGetPlanKey	int64	`gorm:"column:PCV_GET_PLAN_KEY" json:"pcv_get_plan_key"`			
PcvGetPlKey	int64	`gorm:"column:PCV_GET_PL_KEY" json:"pcv_get_pl_key"`			
PcvExpireByUsed	int64	`gorm:"column:PCV_EXPIRE_BY_USED" json:"pcv_expire_by_used"`			
PcvExpireByMem	int64	`gorm:"column:PCV_EXPIRE_BY_MEM" json:"pcv_expire_by_mem"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$planCacheReferenceInfo) TableName() string {
	return "v$plan_cache_reference_info"
}
	

// V$planCacheReferenceInfoColumns get sql column name.获取数据库列名
var V$planCacheReferenceInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	PcRefPlanLocal string
	PcRefPlanRemote string
	PcRefPlanDist string
	PcRefPlanArr string
	PcRefPl string
	PcRefPlStat string
	PlanGen string
	CliQuery string
	OutlineExec string
	PlanExplain string
	AsynBaseline string
	LoadBaseline string
	PsExec string
	GvSQL string
	PlAnon string
	PlRoutine string
	PackageVar string
	PackageType string
	PackageSpec string
	PackageBody string
	PackageResv string
	GetPkg string
	IndexBuilder string
	PcvSet string
	PcvRd string
	PcvWr string
	PcvGetPlanKey string
	PcvGetPlKey string
	PcvExpireByUsed string
	PcvExpireByMem string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		PcRefPlanLocal:"PC_REF_PLAN_LOCAL",  
		PcRefPlanRemote:"PC_REF_PLAN_REMOTE",  
		PcRefPlanDist:"PC_REF_PLAN_DIST",  
		PcRefPlanArr:"PC_REF_PLAN_ARR",  
		PcRefPl:"PC_REF_PL",  
		PcRefPlStat:"PC_REF_PL_STAT",  
		PlanGen:"PLAN_GEN",  
		CliQuery:"CLI_QUERY",  
		OutlineExec:"OUTLINE_EXEC",  
		PlanExplain:"PLAN_EXPLAIN",  
		AsynBaseline:"ASYN_BASELINE",  
		LoadBaseline:"LOAD_BASELINE",  
		PsExec:"PS_EXEC",  
		GvSQL:"GV_SQL",  
		PlAnon:"PL_ANON",  
		PlRoutine:"PL_ROUTINE",  
		PackageVar:"PACKAGE_VAR",  
		PackageType:"PACKAGE_TYPE",  
		PackageSpec:"PACKAGE_SPEC",  
		PackageBody:"PACKAGE_BODY",  
		PackageResv:"PACKAGE_RESV",  
		GetPkg:"GET_PKG",  
		IndexBuilder:"INDEX_BUILDER",  
		PcvSet:"PCV_SET",  
		PcvRd:"PCV_RD",  
		PcvWr:"PCV_WR",  
		PcvGetPlanKey:"PCV_GET_PLAN_KEY",  
		PcvGetPlKey:"PCV_GET_PL_KEY",  
		PcvExpireByUsed:"PCV_EXPIRE_BY_USED",  
		PcvExpireByMem:"PCV_EXPIRE_BY_MEM",             
	}
	
// V$planCacheStat [...]		
type	V$planCacheStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
SQLNum	int64	`gorm:"column:sql_num" json:"sql_num"`			
MemUsed	int64	`gorm:"column:mem_used" json:"mem_used"`			
MemHold	int64	`gorm:"column:mem_hold" json:"mem_hold"`			
AccessCount	int64	`gorm:"column:access_count" json:"access_count"`			
HitCount	int64	`gorm:"column:hit_count" json:"hit_count"`			
HitRate	int64	`gorm:"column:hit_rate" json:"hit_rate"`			
PlanNum	int64	`gorm:"column:plan_num" json:"plan_num"`			
MemLimit	int64	`gorm:"column:mem_limit" json:"mem_limit"`			
HashBucket	int64	`gorm:"column:hash_bucket" json:"hash_bucket"`			
StmtkeyNum	int64	`gorm:"column:stmtkey_num" json:"stmtkey_num"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$planCacheStat) TableName() string {
	return "v$plan_cache_stat"
}
	

// V$planCacheStatColumns get sql column name.获取数据库列名
var V$planCacheStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	SQLNum string
	MemUsed string
	MemHold string
	AccessCount string
	HitCount string
	HitRate string
	PlanNum string
	MemLimit string
	HashBucket string
	StmtkeyNum string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		SQLNum:"sql_num",  
		MemUsed:"mem_used",  
		MemHold:"mem_hold",  
		AccessCount:"access_count",  
		HitCount:"hit_count",  
		HitRate:"hit_rate",  
		PlanNum:"plan_num",  
		MemLimit:"mem_limit",  
		HashBucket:"hash_bucket",  
		StmtkeyNum:"stmtkey_num",             
	}
	
// V$psItemInfo [...]		
type	V$psItemInfo	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
StmtID	int64	`gorm:"column:stmt_id" json:"stmt_id"`			
DbID	int64	`gorm:"column:db_id" json:"db_id"`			
PsSQL	string	`gorm:"column:ps_sql" json:"ps_sql"`			
ParamCount	int64	`gorm:"column:param_count" json:"param_count"`			
StmtItemRefCount	int64	`gorm:"column:stmt_item_ref_count" json:"stmt_item_ref_count"`			
StmtInfoRefCount	int64	`gorm:"column:stmt_info_ref_count" json:"stmt_info_ref_count"`			
MemHold	int64	`gorm:"column:mem_hold" json:"mem_hold"`			
StmtType	int64	`gorm:"column:stmt_type" json:"stmt_type"`			
Checksum	int64	`gorm:"column:checksum" json:"checksum"`			
Expired	int8	`gorm:"column:expired" json:"expired"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$psItemInfo) TableName() string {
	return "v$ps_item_info"
}
	

// V$psItemInfoColumns get sql column name.获取数据库列名
var V$psItemInfoColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	StmtID string
	DbID string
	PsSQL string
	ParamCount string
	StmtItemRefCount string
	StmtInfoRefCount string
	MemHold string
	StmtType string
	Checksum string
	Expired string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		StmtID:"stmt_id",  
		DbID:"db_id",  
		PsSQL:"ps_sql",  
		ParamCount:"param_count",  
		StmtItemRefCount:"stmt_item_ref_count",  
		StmtInfoRefCount:"stmt_info_ref_count",  
		MemHold:"mem_hold",  
		StmtType:"stmt_type",  
		Checksum:"checksum",  
		Expired:"expired",             
	}
	
// V$psStat [...]		
type	V$psStat	struct {		
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
StmtCount	int64	`gorm:"column:stmt_count" json:"stmt_count"`			
HitCount	int64	`gorm:"column:hit_count" json:"hit_count"`			
AccessCount	int64	`gorm:"column:access_count" json:"access_count"`			
MemHold	int64	`gorm:"column:mem_hold" json:"mem_hold"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$psStat) TableName() string {
	return "v$ps_stat"
}
	

// V$psStatColumns get sql column name.获取数据库列名
var V$psStatColumns = struct { 
	TenantID string
	SvrIP string
	SvrPort string
	StmtCount string
	HitCount string
	AccessCount string
	MemHold string    
	}{ 
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		StmtCount:"stmt_count",  
		HitCount:"hit_count",  
		AccessCount:"access_count",  
		MemHold:"mem_hold",             
	}
	
// V$restorePoint [...]		
type	V$restorePoint	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
Snapshot	int64	`gorm:"column:SNAPSHOT" json:"snapshot"`			
Time	time.Time	`gorm:"column:TIME" json:"time"`			
Name	string	`gorm:"column:NAME" json:"name"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$restorePoint) TableName() string {
	return "v$restore_point"
}
	

// V$restorePointColumns get sql column name.获取数据库列名
var V$restorePointColumns = struct { 
	TenantID string
	Snapshot string
	Time string
	Name string    
	}{ 
		TenantID:"TENANT_ID",  
		Snapshot:"SNAPSHOT",  
		Time:"TIME",  
		Name:"NAME",             
	}
	
// V$serverSchemaInfo [...]		
type	V$serverSchemaInfo	struct {		
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
RefreshedSchemaVersion	int64	`gorm:"column:REFRESHED_SCHEMA_VERSION" json:"refreshed_schema_version"`			
ReceivedSchemaVersion	int64	`gorm:"column:RECEIVED_SCHEMA_VERSION" json:"received_schema_version"`			
SchemaCount	int64	`gorm:"column:SCHEMA_COUNT" json:"schema_count"`			
SchemaSize	int64	`gorm:"column:SCHEMA_SIZE" json:"schema_size"`			
MinSstableSchemaVersion	int64	`gorm:"column:MIN_SSTABLE_SCHEMA_VERSION" json:"min_sstable_schema_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$serverSchemaInfo) TableName() string {
	return "v$server_schema_info"
}
	

// V$serverSchemaInfoColumns get sql column name.获取数据库列名
var V$serverSchemaInfoColumns = struct { 
	TenantID string
	RefreshedSchemaVersion string
	ReceivedSchemaVersion string
	SchemaCount string
	SchemaSize string
	MinSstableSchemaVersion string    
	}{ 
		TenantID:"TENANT_ID",  
		RefreshedSchemaVersion:"REFRESHED_SCHEMA_VERSION",  
		ReceivedSchemaVersion:"RECEIVED_SCHEMA_VERSION",  
		SchemaCount:"SCHEMA_COUNT",  
		SchemaSize:"SCHEMA_SIZE",  
		MinSstableSchemaVersion:"MIN_SSTABLE_SCHEMA_VERSION",             
	}
	
// V$sessionEvent [...]		
type	V$sessionEvent	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
EventID	int64	`gorm:"column:EVENT_ID" json:"event_id"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
WaitClassID	int64	`gorm:"column:WAIT_CLASS_ID" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:WAIT_CLASS#" json:"wait_clas_s#"`			
WaitClass	string	`gorm:"column:WAIT_CLASS" json:"wait_class"`			
TotalWaits	int64	`gorm:"column:TOTAL_WAITS" json:"total_waits"`			
TotalTimeouts	int64	`gorm:"column:TOTAL_TIMEOUTS" json:"total_timeouts"`			
TimeWaited	float64	`gorm:"column:TIME_WAITED" json:"time_waited"`			
MaxWait	float64	`gorm:"column:MAX_WAIT" json:"max_wait"`			
AverageWait	float64	`gorm:"column:AVERAGE_WAIT" json:"average_wait"`			
TimeWaitedMicro	int64	`gorm:"column:TIME_WAITED_MICRO" json:"time_waited_micro"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sessionEvent) TableName() string {
	return "v$session_event"
}
	

// V$sessionEventColumns get sql column name.获取数据库列名
var V$sessionEventColumns = struct { 
	Sid string
	ConID string
	EventID string
	Event string
	WaitClassID string
	WaitClass# string
	WaitClass string
	TotalWaits string
	TotalTimeouts string
	TimeWaited string
	MaxWait string
	AverageWait string
	TimeWaitedMicro string    
	}{ 
		Sid:"SID",  
		ConID:"CON_ID",  
		EventID:"EVENT_ID",  
		Event:"EVENT",  
		WaitClassID:"WAIT_CLASS_ID",  
		WaitClass#:"WAIT_CLASS#",  
		WaitClass:"WAIT_CLASS",  
		TotalWaits:"TOTAL_WAITS",  
		TotalTimeouts:"TOTAL_TIMEOUTS",  
		TimeWaited:"TIME_WAITED",  
		MaxWait:"MAX_WAIT",  
		AverageWait:"AVERAGE_WAIT",  
		TimeWaitedMicro:"TIME_WAITED_MICRO",             
	}
	
// V$sessionLongops [...]		
type	V$sessionLongops	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
Opname	string	`gorm:"column:OPNAME" json:"opname"`			
Target	string	`gorm:"column:TARGET" json:"target"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
StartTime	int64	`gorm:"column:START_TIME" json:"start_time"`			
ElapsedSeconds	float64	`gorm:"column:ELAPSED_SECONDS" json:"elapsed_seconds"`			
TimeRemaining	int64	`gorm:"column:TIME_REMAINING" json:"time_remaining"`			
LastUpdateTime	int64	`gorm:"column:LAST_UPDATE_TIME" json:"last_update_time"`			
Message	string	`gorm:"column:MESSAGE" json:"message"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sessionLongops) TableName() string {
	return "v$session_longops"
}
	

// V$sessionLongopsColumns get sql column name.获取数据库列名
var V$sessionLongopsColumns = struct { 
	Sid string
	Opname string
	Target string
	SvrIP string
	SvrPort string
	StartTime string
	ElapsedSeconds string
	TimeRemaining string
	LastUpdateTime string
	Message string    
	}{ 
		Sid:"SID",  
		Opname:"OPNAME",  
		Target:"TARGET",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		StartTime:"START_TIME",  
		ElapsedSeconds:"ELAPSED_SECONDS",  
		TimeRemaining:"TIME_REMAINING",  
		LastUpdateTime:"LAST_UPDATE_TIME",  
		Message:"MESSAGE",             
	}
	
// V$sessionWait [...]		
type	V$sessionWait	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
P1text	string	`gorm:"column:P1TEXT" json:"p1_text"`			
P1	uint64	`gorm:"column:P1" json:"p1"`			
P2text	string	`gorm:"column:P2TEXT" json:"p2_text"`			
P2	uint64	`gorm:"column:P2" json:"p2"`			
P3text	string	`gorm:"column:P3TEXT" json:"p3_text"`			
P3	uint64	`gorm:"column:P3" json:"p3"`			
WaitClassID	int64	`gorm:"column:WAIT_CLASS_ID" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:WAIT_CLASS#" json:"wait_clas_s#"`			
WaitClass	string	`gorm:"column:WAIT_CLASS" json:"wait_class"`			
State	string	`gorm:"column:STATE" json:"state"`			
WaitTimeMicro	int64	`gorm:"column:WAIT_TIME_MICRO" json:"wait_time_micro"`			
TimeRemainingMicro	int64	`gorm:"column:TIME_REMAINING_MICRO" json:"time_remaining_micro"`			
TimeSinceLastWaitMicro	int64	`gorm:"column:TIME_SINCE_LAST_WAIT_MICRO" json:"time_since_last_wait_micro"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sessionWait) TableName() string {
	return "v$session_wait"
}
	

// V$sessionWaitColumns get sql column name.获取数据库列名
var V$sessionWaitColumns = struct { 
	Sid string
	ConID string
	Event string
	P1text string
	P1 string
	P2text string
	P2 string
	P3text string
	P3 string
	WaitClassID string
	WaitClass# string
	WaitClass string
	State string
	WaitTimeMicro string
	TimeRemainingMicro string
	TimeSinceLastWaitMicro string    
	}{ 
		Sid:"SID",  
		ConID:"CON_ID",  
		Event:"EVENT",  
		P1text:"P1TEXT",  
		P1:"P1",  
		P2text:"P2TEXT",  
		P2:"P2",  
		P3text:"P3TEXT",  
		P3:"P3",  
		WaitClassID:"WAIT_CLASS_ID",  
		WaitClass#:"WAIT_CLASS#",  
		WaitClass:"WAIT_CLASS",  
		State:"STATE",  
		WaitTimeMicro:"WAIT_TIME_MICRO",  
		TimeRemainingMicro:"TIME_REMAINING_MICRO",  
		TimeSinceLastWaitMicro:"TIME_SINCE_LAST_WAIT_MICRO",             
	}
	
// V$sessionWaitHistory [...]		
type	V$sessionWaitHistory	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
Seq#	int64	`gorm:"column:SEQ#" json:"se_q#"`			
Event#	int64	`gorm:"column:EVENT#" json:"even_t#"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
P1text	string	`gorm:"column:P1TEXT" json:"p1_text"`			
P1	uint64	`gorm:"column:P1" json:"p1"`			
P2text	string	`gorm:"column:P2TEXT" json:"p2_text"`			
P2	uint64	`gorm:"column:P2" json:"p2"`			
P3text	string	`gorm:"column:P3TEXT" json:"p3_text"`			
P3	uint64	`gorm:"column:P3" json:"p3"`			
WaitTimeMicro	int64	`gorm:"column:WAIT_TIME_MICRO" json:"wait_time_micro"`			
TimeSinceLastWaitMicro	int64	`gorm:"column:TIME_SINCE_LAST_WAIT_MICRO" json:"time_since_last_wait_micro"`			
WaitTime	float64	`gorm:"column:WAIT_TIME" json:"wait_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sessionWaitHistory) TableName() string {
	return "v$session_wait_history"
}
	

// V$sessionWaitHistoryColumns get sql column name.获取数据库列名
var V$sessionWaitHistoryColumns = struct { 
	Sid string
	ConID string
	Seq# string
	Event# string
	Event string
	P1text string
	P1 string
	P2text string
	P2 string
	P3text string
	P3 string
	WaitTimeMicro string
	TimeSinceLastWaitMicro string
	WaitTime string    
	}{ 
		Sid:"SID",  
		ConID:"CON_ID",  
		Seq#:"SEQ#",  
		Event#:"EVENT#",  
		Event:"EVENT",  
		P1text:"P1TEXT",  
		P1:"P1",  
		P2text:"P2TEXT",  
		P2:"P2",  
		P3text:"P3TEXT",  
		P3:"P3",  
		WaitTimeMicro:"WAIT_TIME_MICRO",  
		TimeSinceLastWaitMicro:"TIME_SINCE_LAST_WAIT_MICRO",  
		WaitTime:"WAIT_TIME",             
	}
	
// V$sesstat [...]		
type	V$sesstat	struct {		
Sid	int64	`gorm:"column:SID" json:"s_id"`			
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
Statistic#	int64	`gorm:"column:STATISTIC#" json:"statisti_c#"`			
Value	int64	`gorm:"column:VALUE" json:"value"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sesstat) TableName() string {
	return "v$sesstat"
}
	

// V$sesstatColumns get sql column name.获取数据库列名
var V$sesstatColumns = struct { 
	Sid string
	ConID string
	Statistic# string
	Value string    
	}{ 
		Sid:"SID",  
		ConID:"CON_ID",  
		Statistic#:"STATISTIC#",  
		Value:"VALUE",             
	}
	
// V$sql [...]		
type	V$sql	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
SQLID	string	`gorm:"column:SQL_ID" json:"sql_id"`			
Type	int64	`gorm:"column:TYPE" json:"type"`			
SQLText	string	`gorm:"column:SQL_TEXT" json:"sql_text"`			
PlanHashValue	uint64	`gorm:"column:PLAN_HASH_VALUE" json:"plan_hash_value"`			
FirstLoadTime	time.Time	`gorm:"column:FIRST_LOAD_TIME" json:"first_load_time"`			
LastActiveTime	time.Time	`gorm:"column:LAST_ACTIVE_TIME" json:"last_active_time"`			
AvgExeUsec	int64	`gorm:"column:AVG_EXE_USEC" json:"avg_exe_usec"`			
SlowestExeTime	time.Time	`gorm:"column:SLOWEST_EXE_TIME" json:"slowest_exe_time"`			
SlowestExeUsec	int64	`gorm:"column:SLOWEST_EXE_USEC" json:"slowest_exe_usec"`			
SlowCount	int64	`gorm:"column:SLOW_COUNT" json:"slow_count"`			
HitCount	int64	`gorm:"column:HIT_COUNT" json:"hit_count"`			
PlanSize	int64	`gorm:"column:PLAN_SIZE" json:"plan_size"`			
Executions	int64	`gorm:"column:EXECUTIONS" json:"executions"`			
DiskReads	int64	`gorm:"column:DISK_READS" json:"disk_reads"`			
DirectWrites	int64	`gorm:"column:DIRECT_WRITES" json:"direct_writes"`			
BufferGets	int64	`gorm:"column:BUFFER_GETS" json:"buffer_gets"`			
ApplicationWaitTime	uint64	`gorm:"column:APPLICATION_WAIT_TIME" json:"application_wait_time"`			
ConcurrencyWaitTime	uint64	`gorm:"column:CONCURRENCY_WAIT_TIME" json:"concurrency_wait_time"`			
UserIoWaitTime	uint64	`gorm:"column:USER_IO_WAIT_TIME" json:"user_io_wait_time"`			
RowsProcessed	int64	`gorm:"column:ROWS_PROCESSED" json:"rows_processed"`			
ElapsedTime	uint64	`gorm:"column:ELAPSED_TIME" json:"elapsed_time"`			
CPUTime	uint64	`gorm:"column:CPU_TIME" json:"cpu_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sql) TableName() string {
	return "v$sql"
}
	

// V$sqlColumns get sql column name.获取数据库列名
var V$sqlColumns = struct { 
	ConID string
	SvrIP string
	SvrPort string
	PlanID string
	SQLID string
	Type string
	SQLText string
	PlanHashValue string
	FirstLoadTime string
	LastActiveTime string
	AvgExeUsec string
	SlowestExeTime string
	SlowestExeUsec string
	SlowCount string
	HitCount string
	PlanSize string
	Executions string
	DiskReads string
	DirectWrites string
	BufferGets string
	ApplicationWaitTime string
	ConcurrencyWaitTime string
	UserIoWaitTime string
	RowsProcessed string
	ElapsedTime string
	CPUTime string    
	}{ 
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		PlanID:"PLAN_ID",  
		SQLID:"SQL_ID",  
		Type:"TYPE",  
		SQLText:"SQL_TEXT",  
		PlanHashValue:"PLAN_HASH_VALUE",  
		FirstLoadTime:"FIRST_LOAD_TIME",  
		LastActiveTime:"LAST_ACTIVE_TIME",  
		AvgExeUsec:"AVG_EXE_USEC",  
		SlowestExeTime:"SLOWEST_EXE_TIME",  
		SlowestExeUsec:"SLOWEST_EXE_USEC",  
		SlowCount:"SLOW_COUNT",  
		HitCount:"HIT_COUNT",  
		PlanSize:"PLAN_SIZE",  
		Executions:"EXECUTIONS",  
		DiskReads:"DISK_READS",  
		DirectWrites:"DIRECT_WRITES",  
		BufferGets:"BUFFER_GETS",  
		ApplicationWaitTime:"APPLICATION_WAIT_TIME",  
		ConcurrencyWaitTime:"CONCURRENCY_WAIT_TIME",  
		UserIoWaitTime:"USER_IO_WAIT_TIME",  
		RowsProcessed:"ROWS_PROCESSED",  
		ElapsedTime:"ELAPSED_TIME",  
		CPUTime:"CPU_TIME",             
	}
	
// V$sqlAudit [...]		
type	V$sqlAudit	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
RequestID	int64	`gorm:"column:REQUEST_ID" json:"request_id"`			
SQLExecID	int64	`gorm:"column:SQL_EXEC_ID" json:"sql_exec_id"`			
TraceID	string	`gorm:"column:TRACE_ID" json:"trace_id"`			
Sid	uint64	`gorm:"column:SID" json:"s_id"`			
ClientIP	string	`gorm:"column:CLIENT_IP" json:"client_ip"`			
ClientPort	int64	`gorm:"column:CLIENT_PORT" json:"client_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TenantName	string	`gorm:"column:TENANT_NAME" json:"tenant_name"`			
EffectiveTenantID	int64	`gorm:"column:EFFECTIVE_TENANT_ID" json:"effective_tenant_id"`			
UserID	int64	`gorm:"column:USER_ID" json:"user_id"`			
UserName	string	`gorm:"column:USER_NAME" json:"user_name"`			
UserGroup	int64	`gorm:"column:USER_GROUP" json:"user_group"`			
UserClientIP	string	`gorm:"column:USER_CLIENT_IP" json:"user_client_ip"`			
DbID	uint64	`gorm:"column:DB_ID" json:"db_id"`			
DbName	string	`gorm:"column:DB_NAME" json:"db_name"`			
SQLID	string	`gorm:"column:SQL_ID" json:"sql_id"`			
QuerySQL	string	`gorm:"column:QUERY_SQL" json:"query_sql"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
AffectedRows	int64	`gorm:"column:AFFECTED_ROWS" json:"affected_rows"`			
ReturnRows	int64	`gorm:"column:RETURN_ROWS" json:"return_rows"`			
PartitionCnt	int64	`gorm:"column:PARTITION_CNT" json:"partition_cnt"`			
RetCode	int64	`gorm:"column:RET_CODE" json:"ret_code"`			
QcID	uint64	`gorm:"column:QC_ID" json:"qc_id"`			
DfoID	int64	`gorm:"column:DFO_ID" json:"dfo_id"`			
SqcID	int64	`gorm:"column:SQC_ID" json:"sqc_id"`			
WorkerID	int64	`gorm:"column:WORKER_ID" json:"worker_id"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
P1text	string	`gorm:"column:P1TEXT" json:"p1_text"`			
P1	uint64	`gorm:"column:P1" json:"p1"`			
P2text	string	`gorm:"column:P2TEXT" json:"p2_text"`			
P2	uint64	`gorm:"column:P2" json:"p2"`			
P3text	string	`gorm:"column:P3TEXT" json:"p3_text"`			
P3	uint64	`gorm:"column:P3" json:"p3"`			
Level	int64	`gorm:"column:LEVEL" json:"level"`			
WaitClassID	int64	`gorm:"column:WAIT_CLASS_ID" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:WAIT_CLASS#" json:"wait_clas_s#"`			
WaitClass	string	`gorm:"column:WAIT_CLASS" json:"wait_class"`			
State	string	`gorm:"column:STATE" json:"state"`			
WaitTimeMicro	int64	`gorm:"column:WAIT_TIME_MICRO" json:"wait_time_micro"`			
TotalWaitTimeMicro	int64	`gorm:"column:TOTAL_WAIT_TIME_MICRO" json:"total_wait_time_micro"`			
TotalWaits	int64	`gorm:"column:TOTAL_WAITS" json:"total_waits"`			
RPCCount	int64	`gorm:"column:RPC_COUNT" json:"rpc_count"`			
PlanType	int64	`gorm:"column:PLAN_TYPE" json:"plan_type"`			
IsInnerSQL	int8	`gorm:"column:IS_INNER_SQL" json:"is_inner_sql"`			
IsExecutorRPC	int8	`gorm:"column:IS_EXECUTOR_RPC" json:"is_executor_rpc"`			
IsHitPlan	int8	`gorm:"column:IS_HIT_PLAN" json:"is_hit_plan"`			
RequestTime	int64	`gorm:"column:REQUEST_TIME" json:"request_time"`			
ElapsedTime	int64	`gorm:"column:ELAPSED_TIME" json:"elapsed_time"`			
NetTime	int64	`gorm:"column:NET_TIME" json:"net_time"`			
NetWaitTime	int64	`gorm:"column:NET_WAIT_TIME" json:"net_wait_time"`			
QueueTime	int64	`gorm:"column:QUEUE_TIME" json:"queue_time"`			
DecodeTime	int64	`gorm:"column:DECODE_TIME" json:"decode_time"`			
GetPlanTime	int64	`gorm:"column:GET_PLAN_TIME" json:"get_plan_time"`			
ExecuteTime	int64	`gorm:"column:EXECUTE_TIME" json:"execute_time"`			
ApplicationWaitTime	uint64	`gorm:"column:APPLICATION_WAIT_TIME" json:"application_wait_time"`			
ConcurrencyWaitTime	uint64	`gorm:"column:CONCURRENCY_WAIT_TIME" json:"concurrency_wait_time"`			
UserIoWaitTime	uint64	`gorm:"column:USER_IO_WAIT_TIME" json:"user_io_wait_time"`			
ScheduleTime	uint64	`gorm:"column:SCHEDULE_TIME" json:"schedule_time"`			
RowCacheHit	int64	`gorm:"column:ROW_CACHE_HIT" json:"row_cache_hit"`			
BloomFilterCacheHit	int64	`gorm:"column:BLOOM_FILTER_CACHE_HIT" json:"bloom_filter_cache_hit"`			
BlockCacheHit	int64	`gorm:"column:BLOCK_CACHE_HIT" json:"block_cache_hit"`			
BlockIndexCacheHit	int64	`gorm:"column:BLOCK_INDEX_CACHE_HIT" json:"block_index_cache_hit"`			
DiskReads	int64	`gorm:"column:DISK_READS" json:"disk_reads"`			
RetryCnt	int64	`gorm:"column:RETRY_CNT" json:"retry_cnt"`			
TableScan	int8	`gorm:"column:TABLE_SCAN" json:"table_scan"`			
ConsistencyLevel	int64	`gorm:"column:CONSISTENCY_LEVEL" json:"consistency_level"`			
MemstoreReadRowCount	int64	`gorm:"column:MEMSTORE_READ_ROW_COUNT" json:"memstore_read_row_count"`			
SsstoreReadRowCount	int64	`gorm:"column:SSSTORE_READ_ROW_COUNT" json:"ssstore_read_row_count"`			
RequestMemoryUsed	int64	`gorm:"column:REQUEST_MEMORY_USED" json:"request_memory_used"`			
ExpectedWorkerCount	int64	`gorm:"column:EXPECTED_WORKER_COUNT" json:"expected_worker_count"`			
UsedWorkerCount	int64	`gorm:"column:USED_WORKER_COUNT" json:"used_worker_count"`			
SchedInfo	string	`gorm:"column:SCHED_INFO" json:"sched_info"`			
FuseRowCacheHit	int64	`gorm:"column:FUSE_ROW_CACHE_HIT" json:"fuse_row_cache_hit"`			
PsStmtID	int64	`gorm:"column:PS_STMT_ID" json:"ps_stmt_id"`			
TransactionHash	uint64	`gorm:"column:TRANSACTION_HASH" json:"transaction_hash"`			
RequestType	int64	`gorm:"column:REQUEST_TYPE" json:"request_type"`			
IsBatchedMultiStmt	int8	`gorm:"column:IS_BATCHED_MULTI_STMT" json:"is_batched_multi_stmt"`			
ObTraceInfo	string	`gorm:"column:OB_TRACE_INFO" json:"ob_trace_info"`			
PlanHash	uint64	`gorm:"column:PLAN_HASH" json:"plan_hash"`			
LockForReadTime	int64	`gorm:"column:LOCK_FOR_READ_TIME" json:"lock_for_read_time"`			
WaitTrxMigrateTime	int64	`gorm:"column:WAIT_TRX_MIGRATE_TIME" json:"wait_trx_migrate_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sqlAudit) TableName() string {
	return "v$sql_audit"
}
	

// V$sqlAuditColumns get sql column name.获取数据库列名
var V$sqlAuditColumns = struct { 
	SvrIP string
	SvrPort string
	RequestID string
	SQLExecID string
	TraceID string
	Sid string
	ClientIP string
	ClientPort string
	TenantID string
	TenantName string
	EffectiveTenantID string
	UserID string
	UserName string
	UserGroup string
	UserClientIP string
	DbID string
	DbName string
	SQLID string
	QuerySQL string
	PlanID string
	AffectedRows string
	ReturnRows string
	PartitionCnt string
	RetCode string
	QcID string
	DfoID string
	SqcID string
	WorkerID string
	Event string
	P1text string
	P1 string
	P2text string
	P2 string
	P3text string
	P3 string
	Level string
	WaitClassID string
	WaitClass# string
	WaitClass string
	State string
	WaitTimeMicro string
	TotalWaitTimeMicro string
	TotalWaits string
	RPCCount string
	PlanType string
	IsInnerSQL string
	IsExecutorRPC string
	IsHitPlan string
	RequestTime string
	ElapsedTime string
	NetTime string
	NetWaitTime string
	QueueTime string
	DecodeTime string
	GetPlanTime string
	ExecuteTime string
	ApplicationWaitTime string
	ConcurrencyWaitTime string
	UserIoWaitTime string
	ScheduleTime string
	RowCacheHit string
	BloomFilterCacheHit string
	BlockCacheHit string
	BlockIndexCacheHit string
	DiskReads string
	RetryCnt string
	TableScan string
	ConsistencyLevel string
	MemstoreReadRowCount string
	SsstoreReadRowCount string
	RequestMemoryUsed string
	ExpectedWorkerCount string
	UsedWorkerCount string
	SchedInfo string
	FuseRowCacheHit string
	PsStmtID string
	TransactionHash string
	RequestType string
	IsBatchedMultiStmt string
	ObTraceInfo string
	PlanHash string
	LockForReadTime string
	WaitTrxMigrateTime string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		RequestID:"REQUEST_ID",  
		SQLExecID:"SQL_EXEC_ID",  
		TraceID:"TRACE_ID",  
		Sid:"SID",  
		ClientIP:"CLIENT_IP",  
		ClientPort:"CLIENT_PORT",  
		TenantID:"TENANT_ID",  
		TenantName:"TENANT_NAME",  
		EffectiveTenantID:"EFFECTIVE_TENANT_ID",  
		UserID:"USER_ID",  
		UserName:"USER_NAME",  
		UserGroup:"USER_GROUP",  
		UserClientIP:"USER_CLIENT_IP",  
		DbID:"DB_ID",  
		DbName:"DB_NAME",  
		SQLID:"SQL_ID",  
		QuerySQL:"QUERY_SQL",  
		PlanID:"PLAN_ID",  
		AffectedRows:"AFFECTED_ROWS",  
		ReturnRows:"RETURN_ROWS",  
		PartitionCnt:"PARTITION_CNT",  
		RetCode:"RET_CODE",  
		QcID:"QC_ID",  
		DfoID:"DFO_ID",  
		SqcID:"SQC_ID",  
		WorkerID:"WORKER_ID",  
		Event:"EVENT",  
		P1text:"P1TEXT",  
		P1:"P1",  
		P2text:"P2TEXT",  
		P2:"P2",  
		P3text:"P3TEXT",  
		P3:"P3",  
		Level:"LEVEL",  
		WaitClassID:"WAIT_CLASS_ID",  
		WaitClass#:"WAIT_CLASS#",  
		WaitClass:"WAIT_CLASS",  
		State:"STATE",  
		WaitTimeMicro:"WAIT_TIME_MICRO",  
		TotalWaitTimeMicro:"TOTAL_WAIT_TIME_MICRO",  
		TotalWaits:"TOTAL_WAITS",  
		RPCCount:"RPC_COUNT",  
		PlanType:"PLAN_TYPE",  
		IsInnerSQL:"IS_INNER_SQL",  
		IsExecutorRPC:"IS_EXECUTOR_RPC",  
		IsHitPlan:"IS_HIT_PLAN",  
		RequestTime:"REQUEST_TIME",  
		ElapsedTime:"ELAPSED_TIME",  
		NetTime:"NET_TIME",  
		NetWaitTime:"NET_WAIT_TIME",  
		QueueTime:"QUEUE_TIME",  
		DecodeTime:"DECODE_TIME",  
		GetPlanTime:"GET_PLAN_TIME",  
		ExecuteTime:"EXECUTE_TIME",  
		ApplicationWaitTime:"APPLICATION_WAIT_TIME",  
		ConcurrencyWaitTime:"CONCURRENCY_WAIT_TIME",  
		UserIoWaitTime:"USER_IO_WAIT_TIME",  
		ScheduleTime:"SCHEDULE_TIME",  
		RowCacheHit:"ROW_CACHE_HIT",  
		BloomFilterCacheHit:"BLOOM_FILTER_CACHE_HIT",  
		BlockCacheHit:"BLOCK_CACHE_HIT",  
		BlockIndexCacheHit:"BLOCK_INDEX_CACHE_HIT",  
		DiskReads:"DISK_READS",  
		RetryCnt:"RETRY_CNT",  
		TableScan:"TABLE_SCAN",  
		ConsistencyLevel:"CONSISTENCY_LEVEL",  
		MemstoreReadRowCount:"MEMSTORE_READ_ROW_COUNT",  
		SsstoreReadRowCount:"SSSTORE_READ_ROW_COUNT",  
		RequestMemoryUsed:"REQUEST_MEMORY_USED",  
		ExpectedWorkerCount:"EXPECTED_WORKER_COUNT",  
		UsedWorkerCount:"USED_WORKER_COUNT",  
		SchedInfo:"SCHED_INFO",  
		FuseRowCacheHit:"FUSE_ROW_CACHE_HIT",  
		PsStmtID:"PS_STMT_ID",  
		TransactionHash:"TRANSACTION_HASH",  
		RequestType:"REQUEST_TYPE",  
		IsBatchedMultiStmt:"IS_BATCHED_MULTI_STMT",  
		ObTraceInfo:"OB_TRACE_INFO",  
		PlanHash:"PLAN_HASH",  
		LockForReadTime:"LOCK_FOR_READ_TIME",  
		WaitTrxMigrateTime:"WAIT_TRX_MIGRATE_TIME",             
	}
	
// V$sqlMonitor [...]		
type	V$sqlMonitor	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SQLExecID	int64	`gorm:"column:SQL_EXEC_ID" json:"sql_exec_id"`			
JobID	int64	`gorm:"column:JOB_ID" json:"job_id"`			
TaskID	int64	`gorm:"column:TASK_ID" json:"task_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
SQLExecStart	time.Time	`gorm:"column:SQL_EXEC_START" json:"sql_exec_start"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
SchedulerIP	string	`gorm:"column:SCHEDULER_IP" json:"scheduler_ip"`			
SchedulerPort	int64	`gorm:"column:SCHEDULER_PORT" json:"scheduler_port"`			
MonitorInfo	string	`gorm:"column:MONITOR_INFO" json:"monitor_info"`			
ExtendInfo	string	`gorm:"column:EXTEND_INFO" json:"extend_info"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sqlMonitor) TableName() string {
	return "v$sql_monitor"
}
	

// V$sqlMonitorColumns get sql column name.获取数据库列名
var V$sqlMonitorColumns = struct { 
	ConID string
	SQLExecID string
	JobID string
	TaskID string
	SvrIP string
	SvrPort string
	SQLExecStart string
	PlanID string
	SchedulerIP string
	SchedulerPort string
	MonitorInfo string
	ExtendInfo string    
	}{ 
		ConID:"CON_ID",  
		SQLExecID:"SQL_EXEC_ID",  
		JobID:"JOB_ID",  
		TaskID:"TASK_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		SQLExecStart:"SQL_EXEC_START",  
		PlanID:"PLAN_ID",  
		SchedulerIP:"SCHEDULER_IP",  
		SchedulerPort:"SCHEDULER_PORT",  
		MonitorInfo:"MONITOR_INFO",  
		ExtendInfo:"EXTEND_INFO",             
	}
	
// V$sqlMonitorStatname [...]		
type	V$sqlMonitorStatname	struct {		
ConID	string	`gorm:"column:CON_ID" json:"con_id"`			
ID	int64	`gorm:"column:ID" json:"id"`			
GroupID	int64	`gorm:"column:GROUP_ID" json:"group_id"`			
Name	string	`gorm:"column:NAME" json:"name"`			
Description	string	`gorm:"column:DESCRIPTION" json:"descr_ip_tion"`			
Type	int64	`gorm:"column:TYPE" json:"type"`			
Flags	int64	`gorm:"column:FLAGS" json:"flags"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sqlMonitorStatname) TableName() string {
	return "v$sql_monitor_statname"
}
	

// V$sqlMonitorStatnameColumns get sql column name.获取数据库列名
var V$sqlMonitorStatnameColumns = struct { 
	ConID string
	ID string
	GroupID string
	Name string
	Description string
	Type string
	Flags string    
	}{ 
		ConID:"CON_ID",  
		ID:"ID",  
		GroupID:"GROUP_ID",  
		Name:"NAME",  
		Description:"DESCRIPTION",  
		Type:"TYPE",  
		Flags:"FLAGS",             
	}
	
// V$sqlPlanMonitor [...]		
type	V$sqlPlanMonitor	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
RequestID	int64	`gorm:"column:REQUEST_ID" json:"request_id"`			
Key	string	`gorm:"column:KEY" json:"key"`			
Status	string	`gorm:"column:STATUS" json:"status"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TraceID	string	`gorm:"column:TRACE_ID" json:"trace_id"`			
FirstRefreshTime	time.Time	`gorm:"column:FIRST_REFRESH_TIME" json:"first_refresh_time"`			
LastRefreshTime	time.Time	`gorm:"column:LAST_REFRESH_TIME" json:"last_refresh_time"`			
FirstChangeTime	time.Time	`gorm:"column:FIRST_CHANGE_TIME" json:"first_change_time"`			
LastChangeTime	time.Time	`gorm:"column:LAST_CHANGE_TIME" json:"last_change_time"`			
RefreshCount	string	`gorm:"column:REFRESH_COUNT" json:"refresh_count"`			
Sid	string	`gorm:"column:SID" json:"s_id"`			
ProcessName	int64	`gorm:"column:PROCESS_NAME" json:"process_name"`			
SQLID	string	`gorm:"column:SQL_ID" json:"sql_id"`			
SQLExecStart	string	`gorm:"column:SQL_EXEC_START" json:"sql_exec_start"`			
SQLExecID	string	`gorm:"column:SQL_EXEC_ID" json:"sql_exec_id"`			
SQLPlanHashValue	string	`gorm:"column:SQL_PLAN_HASH_VALUE" json:"sql_plan_hash_value"`			
SQLChildAddress	string	`gorm:"column:SQL_CHILD_ADDRESS" json:"sql_child_address"`			
PlanParentID	string	`gorm:"column:PLAN_PARENT_ID" json:"plan_parent_id"`			
PlanLineID	int64	`gorm:"column:PLAN_LINE_ID" json:"plan_line_id"`			
PlanOperation	string	`gorm:"column:PLAN_OPERATION" json:"plan_operation"`			
PlanOptions	string	`gorm:"column:PLAN_OPTIONS" json:"plan_options"`			
PlanObjectOwner	string	`gorm:"column:PLAN_OBJECT_OWNER" json:"plan_object_owner"`			
PlanObjectName	string	`gorm:"column:PLAN_OBJECT_NAME" json:"plan_object_name"`			
PlanObjectType	string	`gorm:"column:PLAN_OBJECT_TYPE" json:"plan_object_type"`			
PlanDepth	int64	`gorm:"column:PLAN_DEPTH" json:"plan_depth"`			
PlanPosition	string	`gorm:"column:PLAN_POSITION" json:"plan_position"`			
PlanCost	string	`gorm:"column:PLAN_COST" json:"plan_cost"`			
PlanCardinality	string	`gorm:"column:PLAN_CARDINALITY" json:"plan_cardinality"`			
PlanBytes	string	`gorm:"column:PLAN_BYTES" json:"plan_bytes"`			
PlanTime	string	`gorm:"column:PLAN_TIME" json:"plan_time"`			
PlanPartitionStart	string	`gorm:"column:PLAN_PARTITION_START" json:"plan_partition_start"`			
PlanPartitionStop	string	`gorm:"column:PLAN_PARTITION_STOP" json:"plan_partition_stop"`			
PlanCPUCost	string	`gorm:"column:PLAN_CPU_COST" json:"plan_cpu_cost"`			
PlanIoCost	string	`gorm:"column:PLAN_IO_COST" json:"plan_io_cost"`			
PlanTempSpace	string	`gorm:"column:PLAN_TEMP_SPACE" json:"plan_temp_space"`			
Starts	int64	`gorm:"column:STARTS" json:"starts"`			
OutputRows	int64	`gorm:"column:OUTPUT_ROWS" json:"output_rows"`			
IoInterconnectBytes	string	`gorm:"column:IO_INTERCONNECT_BYTES" json:"io_interconnect_bytes"`			
PhysicalReadRequests	string	`gorm:"column:PHYSICAL_READ_REQUESTS" json:"physical_read_requests"`			
PhysicalReadBytes	string	`gorm:"column:PHYSICAL_READ_BYTES" json:"physical_read_bytes"`			
PhysicalWriteRequests	string	`gorm:"column:PHYSICAL_WRITE_REQUESTS" json:"physical_write_requests"`			
PhysicalWriteBytes	string	`gorm:"column:PHYSICAL_WRITE_BYTES" json:"physical_write_bytes"`			
WorkareaMem	string	`gorm:"column:WORKAREA_MEM" json:"workarea_mem"`			
WorkareaMaxMem	string	`gorm:"column:WORKAREA_MAX_MEM" json:"workarea_max_mem"`			
WorkareaTempseg	string	`gorm:"column:WORKAREA_TEMPSEG" json:"workarea_tempseg"`			
WorkareaMaxTempseg	string	`gorm:"column:WORKAREA_MAX_TEMPSEG" json:"workarea_max_tempseg"`			
OtherstatGroupID	string	`gorm:"column:OTHERSTAT_GROUP_ID" json:"otherstat_group_id"`			
Otherstat1ID	int64	`gorm:"column:OTHERSTAT_1_ID" json:"otherstat_1_id"`			
Otherstat1Type	string	`gorm:"column:OTHERSTAT_1_TYPE" json:"otherstat_1_type"`			
Otherstat1Value	int64	`gorm:"column:OTHERSTAT_1_VALUE" json:"otherstat_1_value"`			
Otherstat2ID	int64	`gorm:"column:OTHERSTAT_2_ID" json:"otherstat_2_id"`			
Otherstat2Type	string	`gorm:"column:OTHERSTAT_2_TYPE" json:"otherstat_2_type"`			
Otherstat2Value	int64	`gorm:"column:OTHERSTAT_2_VALUE" json:"otherstat_2_value"`			
Otherstat3ID	int64	`gorm:"column:OTHERSTAT_3_ID" json:"otherstat_3_id"`			
Otherstat3Type	string	`gorm:"column:OTHERSTAT_3_TYPE" json:"otherstat_3_type"`			
Otherstat3Value	int64	`gorm:"column:OTHERSTAT_3_VALUE" json:"otherstat_3_value"`			
Otherstat4ID	int64	`gorm:"column:OTHERSTAT_4_ID" json:"otherstat_4_id"`			
Otherstat4Type	string	`gorm:"column:OTHERSTAT_4_TYPE" json:"otherstat_4_type"`			
Otherstat4Value	int64	`gorm:"column:OTHERSTAT_4_VALUE" json:"otherstat_4_value"`			
Otherstat5ID	int64	`gorm:"column:OTHERSTAT_5_ID" json:"otherstat_5_id"`			
Otherstat5Type	string	`gorm:"column:OTHERSTAT_5_TYPE" json:"otherstat_5_type"`			
Otherstat5Value	int64	`gorm:"column:OTHERSTAT_5_VALUE" json:"otherstat_5_value"`			
Otherstat6ID	int64	`gorm:"column:OTHERSTAT_6_ID" json:"otherstat_6_id"`			
Otherstat6Type	string	`gorm:"column:OTHERSTAT_6_TYPE" json:"otherstat_6_type"`			
Otherstat6Value	int64	`gorm:"column:OTHERSTAT_6_VALUE" json:"otherstat_6_value"`			
Otherstat7ID	int64	`gorm:"column:OTHERSTAT_7_ID" json:"otherstat_7_id"`			
Otherstat7Type	string	`gorm:"column:OTHERSTAT_7_TYPE" json:"otherstat_7_type"`			
Otherstat7Value	int64	`gorm:"column:OTHERSTAT_7_VALUE" json:"otherstat_7_value"`			
Otherstat8ID	int64	`gorm:"column:OTHERSTAT_8_ID" json:"otherstat_8_id"`			
Otherstat8Type	string	`gorm:"column:OTHERSTAT_8_TYPE" json:"otherstat_8_type"`			
Otherstat8Value	int64	`gorm:"column:OTHERSTAT_8_VALUE" json:"otherstat_8_value"`			
Otherstat9ID	int64	`gorm:"column:OTHERSTAT_9_ID" json:"otherstat_9_id"`			
Otherstat9Type	string	`gorm:"column:OTHERSTAT_9_TYPE" json:"otherstat_9_type"`			
Otherstat9Value	int64	`gorm:"column:OTHERSTAT_9_VALUE" json:"otherstat_9_value"`			
Otherstat10ID	int64	`gorm:"column:OTHERSTAT_10_ID" json:"otherstat_10_id"`			
Otherstat10Type	string	`gorm:"column:OTHERSTAT_10_TYPE" json:"otherstat_10_type"`			
Otherstat10Value	int64	`gorm:"column:OTHERSTAT_10_VALUE" json:"otherstat_10_value"`			
OtherXML	string	`gorm:"column:OTHER_XML" json:"other_xml"`			
PlanOperationInactive	string	`gorm:"column:PLAN_OPERATION_INACTIVE" json:"plan_operation_inactive"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sqlPlanMonitor) TableName() string {
	return "v$sql_plan_monitor"
}
	

// V$sqlPlanMonitorColumns get sql column name.获取数据库列名
var V$sqlPlanMonitorColumns = struct { 
	ConID string
	RequestID string
	Key string
	Status string
	SvrIP string
	SvrPort string
	TraceID string
	FirstRefreshTime string
	LastRefreshTime string
	FirstChangeTime string
	LastChangeTime string
	RefreshCount string
	Sid string
	ProcessName string
	SQLID string
	SQLExecStart string
	SQLExecID string
	SQLPlanHashValue string
	SQLChildAddress string
	PlanParentID string
	PlanLineID string
	PlanOperation string
	PlanOptions string
	PlanObjectOwner string
	PlanObjectName string
	PlanObjectType string
	PlanDepth string
	PlanPosition string
	PlanCost string
	PlanCardinality string
	PlanBytes string
	PlanTime string
	PlanPartitionStart string
	PlanPartitionStop string
	PlanCPUCost string
	PlanIoCost string
	PlanTempSpace string
	Starts string
	OutputRows string
	IoInterconnectBytes string
	PhysicalReadRequests string
	PhysicalReadBytes string
	PhysicalWriteRequests string
	PhysicalWriteBytes string
	WorkareaMem string
	WorkareaMaxMem string
	WorkareaTempseg string
	WorkareaMaxTempseg string
	OtherstatGroupID string
	Otherstat1ID string
	Otherstat1Type string
	Otherstat1Value string
	Otherstat2ID string
	Otherstat2Type string
	Otherstat2Value string
	Otherstat3ID string
	Otherstat3Type string
	Otherstat3Value string
	Otherstat4ID string
	Otherstat4Type string
	Otherstat4Value string
	Otherstat5ID string
	Otherstat5Type string
	Otherstat5Value string
	Otherstat6ID string
	Otherstat6Type string
	Otherstat6Value string
	Otherstat7ID string
	Otherstat7Type string
	Otherstat7Value string
	Otherstat8ID string
	Otherstat8Type string
	Otherstat8Value string
	Otherstat9ID string
	Otherstat9Type string
	Otherstat9Value string
	Otherstat10ID string
	Otherstat10Type string
	Otherstat10Value string
	OtherXML string
	PlanOperationInactive string    
	}{ 
		ConID:"CON_ID",  
		RequestID:"REQUEST_ID",  
		Key:"KEY",  
		Status:"STATUS",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TraceID:"TRACE_ID",  
		FirstRefreshTime:"FIRST_REFRESH_TIME",  
		LastRefreshTime:"LAST_REFRESH_TIME",  
		FirstChangeTime:"FIRST_CHANGE_TIME",  
		LastChangeTime:"LAST_CHANGE_TIME",  
		RefreshCount:"REFRESH_COUNT",  
		Sid:"SID",  
		ProcessName:"PROCESS_NAME",  
		SQLID:"SQL_ID",  
		SQLExecStart:"SQL_EXEC_START",  
		SQLExecID:"SQL_EXEC_ID",  
		SQLPlanHashValue:"SQL_PLAN_HASH_VALUE",  
		SQLChildAddress:"SQL_CHILD_ADDRESS",  
		PlanParentID:"PLAN_PARENT_ID",  
		PlanLineID:"PLAN_LINE_ID",  
		PlanOperation:"PLAN_OPERATION",  
		PlanOptions:"PLAN_OPTIONS",  
		PlanObjectOwner:"PLAN_OBJECT_OWNER",  
		PlanObjectName:"PLAN_OBJECT_NAME",  
		PlanObjectType:"PLAN_OBJECT_TYPE",  
		PlanDepth:"PLAN_DEPTH",  
		PlanPosition:"PLAN_POSITION",  
		PlanCost:"PLAN_COST",  
		PlanCardinality:"PLAN_CARDINALITY",  
		PlanBytes:"PLAN_BYTES",  
		PlanTime:"PLAN_TIME",  
		PlanPartitionStart:"PLAN_PARTITION_START",  
		PlanPartitionStop:"PLAN_PARTITION_STOP",  
		PlanCPUCost:"PLAN_CPU_COST",  
		PlanIoCost:"PLAN_IO_COST",  
		PlanTempSpace:"PLAN_TEMP_SPACE",  
		Starts:"STARTS",  
		OutputRows:"OUTPUT_ROWS",  
		IoInterconnectBytes:"IO_INTERCONNECT_BYTES",  
		PhysicalReadRequests:"PHYSICAL_READ_REQUESTS",  
		PhysicalReadBytes:"PHYSICAL_READ_BYTES",  
		PhysicalWriteRequests:"PHYSICAL_WRITE_REQUESTS",  
		PhysicalWriteBytes:"PHYSICAL_WRITE_BYTES",  
		WorkareaMem:"WORKAREA_MEM",  
		WorkareaMaxMem:"WORKAREA_MAX_MEM",  
		WorkareaTempseg:"WORKAREA_TEMPSEG",  
		WorkareaMaxTempseg:"WORKAREA_MAX_TEMPSEG",  
		OtherstatGroupID:"OTHERSTAT_GROUP_ID",  
		Otherstat1ID:"OTHERSTAT_1_ID",  
		Otherstat1Type:"OTHERSTAT_1_TYPE",  
		Otherstat1Value:"OTHERSTAT_1_VALUE",  
		Otherstat2ID:"OTHERSTAT_2_ID",  
		Otherstat2Type:"OTHERSTAT_2_TYPE",  
		Otherstat2Value:"OTHERSTAT_2_VALUE",  
		Otherstat3ID:"OTHERSTAT_3_ID",  
		Otherstat3Type:"OTHERSTAT_3_TYPE",  
		Otherstat3Value:"OTHERSTAT_3_VALUE",  
		Otherstat4ID:"OTHERSTAT_4_ID",  
		Otherstat4Type:"OTHERSTAT_4_TYPE",  
		Otherstat4Value:"OTHERSTAT_4_VALUE",  
		Otherstat5ID:"OTHERSTAT_5_ID",  
		Otherstat5Type:"OTHERSTAT_5_TYPE",  
		Otherstat5Value:"OTHERSTAT_5_VALUE",  
		Otherstat6ID:"OTHERSTAT_6_ID",  
		Otherstat6Type:"OTHERSTAT_6_TYPE",  
		Otherstat6Value:"OTHERSTAT_6_VALUE",  
		Otherstat7ID:"OTHERSTAT_7_ID",  
		Otherstat7Type:"OTHERSTAT_7_TYPE",  
		Otherstat7Value:"OTHERSTAT_7_VALUE",  
		Otherstat8ID:"OTHERSTAT_8_ID",  
		Otherstat8Type:"OTHERSTAT_8_TYPE",  
		Otherstat8Value:"OTHERSTAT_8_VALUE",  
		Otherstat9ID:"OTHERSTAT_9_ID",  
		Otherstat9Type:"OTHERSTAT_9_TYPE",  
		Otherstat9Value:"OTHERSTAT_9_VALUE",  
		Otherstat10ID:"OTHERSTAT_10_ID",  
		Otherstat10Type:"OTHERSTAT_10_TYPE",  
		Otherstat10Value:"OTHERSTAT_10_VALUE",  
		OtherXML:"OTHER_XML",  
		PlanOperationInactive:"PLAN_OPERATION_INACTIVE",             
	}
	
// V$sqlPlanStatistics [...]		
type	V$sqlPlanStatistics	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
PlanID	int64	`gorm:"column:PLAN_ID" json:"plan_id"`			
OperationID	int64	`gorm:"column:OPERATION_ID" json:"operation_id"`			
Executions	int64	`gorm:"column:EXECUTIONS" json:"executions"`			
OutputRows	int64	`gorm:"column:OUTPUT_ROWS" json:"output_rows"`			
InputRows	int64	`gorm:"column:INPUT_ROWS" json:"input_rows"`			
RescanTimes	int64	`gorm:"column:RESCAN_TIMES" json:"rescan_times"`			
BufferGets	int64	`gorm:"column:BUFFER_GETS" json:"buffer_gets"`			
DiskReads	int64	`gorm:"column:DISK_READS" json:"disk_reads"`			
DiskWrites	int64	`gorm:"column:DISK_WRITES" json:"disk_writes"`			
ElapsedTime	int64	`gorm:"column:ELAPSED_TIME" json:"elapsed_time"`			
ExtendInfo1	string	`gorm:"column:EXTEND_INFO1" json:"extend_info1"`			
ExtendInfo2	string	`gorm:"column:EXTEND_INFO2" json:"extend_info2"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sqlPlanStatistics) TableName() string {
	return "v$sql_plan_statistics"
}
	

// V$sqlPlanStatisticsColumns get sql column name.获取数据库列名
var V$sqlPlanStatisticsColumns = struct { 
	ConID string
	SvrIP string
	SvrPort string
	PlanID string
	OperationID string
	Executions string
	OutputRows string
	InputRows string
	RescanTimes string
	BufferGets string
	DiskReads string
	DiskWrites string
	ElapsedTime string
	ExtendInfo1 string
	ExtendInfo2 string    
	}{ 
		ConID:"CON_ID",  
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		PlanID:"PLAN_ID",  
		OperationID:"OPERATION_ID",  
		Executions:"EXECUTIONS",  
		OutputRows:"OUTPUT_ROWS",  
		InputRows:"INPUT_ROWS",  
		RescanTimes:"RESCAN_TIMES",  
		BufferGets:"BUFFER_GETS",  
		DiskReads:"DISK_READS",  
		DiskWrites:"DISK_WRITES",  
		ElapsedTime:"ELAPSED_TIME",  
		ExtendInfo1:"EXTEND_INFO1",  
		ExtendInfo2:"EXTEND_INFO2",             
	}
	
// V$sqlWorkarea [...]		
type	V$sqlWorkarea	struct {		
Address	[]byte	`gorm:"column:address" json:"address"`			
HashValue	int64	`gorm:"column:hash_value" json:"hash_value"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
ChildNumber	int64	`gorm:"column:child_number" json:"child_number"`			
WorkareaAddress	[]byte	`gorm:"column:workarea_address" json:"workarea_address"`			
OperationType	string	`gorm:"column:operation_type" json:"operation_type"`			
OperationID	int64	`gorm:"column:operation_id" json:"operation_id"`			
Policy	string	`gorm:"column:policy" json:"policy"`			
EstimatedOptimalSize	int64	`gorm:"column:estimated_optimal_size" json:"estimated_optimal_size"`			
EstimatedOnepassSize	int64	`gorm:"column:estimated_onepass_size" json:"estimated_onepass_size"`			
LastMemoryUsed	int64	`gorm:"column:last_memory_used" json:"last_memory_used"`			
LastExecution	string	`gorm:"column:last_execution" json:"last_execution"`			
LastDegree	int64	`gorm:"column:last_degree" json:"last_degree"`			
TotalExecutions	int64	`gorm:"column:total_executions" json:"total_executions"`			
OptimalExecutions	int64	`gorm:"column:optimal_executions" json:"optimal_executions"`			
OnepassExecutions	int64	`gorm:"column:onepass_executions" json:"onepass_executions"`			
MultipassesExecutions	int64	`gorm:"column:multipasses_executions" json:"multipasses_executions"`			
ActiveTime	int64	`gorm:"column:active_time" json:"active_time"`			
MaxTempsegSize	int64	`gorm:"column:max_tempseg_size" json:"max_tempseg_size"`			
LastTempsegSize	int64	`gorm:"column:last_tempseg_size" json:"last_tempseg_size"`			
ConID	int64	`gorm:"column:con_id" json:"con_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sqlWorkarea) TableName() string {
	return "v$sql_workarea"
}
	

// V$sqlWorkareaColumns get sql column name.获取数据库列名
var V$sqlWorkareaColumns = struct { 
	Address string
	HashValue string
	SQLID string
	ChildNumber string
	WorkareaAddress string
	OperationType string
	OperationID string
	Policy string
	EstimatedOptimalSize string
	EstimatedOnepassSize string
	LastMemoryUsed string
	LastExecution string
	LastDegree string
	TotalExecutions string
	OptimalExecutions string
	OnepassExecutions string
	MultipassesExecutions string
	ActiveTime string
	MaxTempsegSize string
	LastTempsegSize string
	ConID string    
	}{ 
		Address:"address",  
		HashValue:"hash_value",  
		SQLID:"sql_id",  
		ChildNumber:"child_number",  
		WorkareaAddress:"workarea_address",  
		OperationType:"operation_type",  
		OperationID:"operation_id",  
		Policy:"policy",  
		EstimatedOptimalSize:"estimated_optimal_size",  
		EstimatedOnepassSize:"estimated_onepass_size",  
		LastMemoryUsed:"last_memory_used",  
		LastExecution:"last_execution",  
		LastDegree:"last_degree",  
		TotalExecutions:"total_executions",  
		OptimalExecutions:"optimal_executions",  
		OnepassExecutions:"onepass_executions",  
		MultipassesExecutions:"multipasses_executions",  
		ActiveTime:"active_time",  
		MaxTempsegSize:"max_tempseg_size",  
		LastTempsegSize:"last_tempseg_size",  
		ConID:"con_id",             
	}
	
// V$sqlWorkareaActive [...]		
type	V$sqlWorkareaActive	struct {		
SQLHashValue	int64	`gorm:"column:sql_hash_value" json:"sql_hash_value"`			
SQLID	string	`gorm:"column:sql_id" json:"sql_id"`			
SQLExecStart	datatypes.Date	`gorm:"column:sql_exec_start" json:"sql_exec_start"`			
SQLExecID	int64	`gorm:"column:sql_exec_id" json:"sql_exec_id"`			
WorkareaAddress	[]byte	`gorm:"column:workarea_address" json:"workarea_address"`			
OperationType	string	`gorm:"column:operation_type" json:"operation_type"`			
OperationID	int64	`gorm:"column:operation_id" json:"operation_id"`			
Policy	string	`gorm:"column:policy" json:"policy"`			
Sid	int64	`gorm:"column:sid" json:"sid"`			
QcinstID	int64	`gorm:"column:qcinst_id" json:"qcinst_id"`			
Qcsid	int64	`gorm:"column:qcsid" json:"qcsid"`			
ActiveTime	int64	`gorm:"column:active_time" json:"active_time"`			
WorkAreaSize	int64	`gorm:"column:work_area_size" json:"work_area_size"`			
ExpectSize	int64	`gorm:"column:expect_size" json:"expect_size"`			
ActualMemUsed	int64	`gorm:"column:actual_mem_used" json:"actual_mem_used"`			
MaxMemUsed	int64	`gorm:"column:max_mem_used" json:"max_mem_used"`			
NumberPasses	int64	`gorm:"column:number_passes" json:"number_passes"`			
TempsegSize	int64	`gorm:"column:tempseg_size" json:"tempseg_size"`			
Tablespace	string	`gorm:"column:tablespace" json:"tablespace"`			
Segrfno#	int64	`gorm:"column:segrfno#" json:"segrfno#"`			
Segblk#	int64	`gorm:"column:segblk#" json:"segblk#"`			
ConID	int64	`gorm:"column:con_id" json:"con_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sqlWorkareaActive) TableName() string {
	return "v$sql_workarea_active"
}
	

// V$sqlWorkareaActiveColumns get sql column name.获取数据库列名
var V$sqlWorkareaActiveColumns = struct { 
	SQLHashValue string
	SQLID string
	SQLExecStart string
	SQLExecID string
	WorkareaAddress string
	OperationType string
	OperationID string
	Policy string
	Sid string
	QcinstID string
	Qcsid string
	ActiveTime string
	WorkAreaSize string
	ExpectSize string
	ActualMemUsed string
	MaxMemUsed string
	NumberPasses string
	TempsegSize string
	Tablespace string
	Segrfno# string
	Segblk# string
	ConID string    
	}{ 
		SQLHashValue:"sql_hash_value",  
		SQLID:"sql_id",  
		SQLExecStart:"sql_exec_start",  
		SQLExecID:"sql_exec_id",  
		WorkareaAddress:"workarea_address",  
		OperationType:"operation_type",  
		OperationID:"operation_id",  
		Policy:"policy",  
		Sid:"sid",  
		QcinstID:"qcinst_id",  
		Qcsid:"qcsid",  
		ActiveTime:"active_time",  
		WorkAreaSize:"work_area_size",  
		ExpectSize:"expect_size",  
		ActualMemUsed:"actual_mem_used",  
		MaxMemUsed:"max_mem_used",  
		NumberPasses:"number_passes",  
		TempsegSize:"tempseg_size",  
		Tablespace:"tablespace",  
		Segrfno#:"segrfno#",  
		Segblk#:"segblk#",  
		ConID:"con_id",             
	}
	
// V$sqlWorkareaHistogram [...]		
type	V$sqlWorkareaHistogram	struct {		
LowOptimalSize	int64	`gorm:"column:low_optimal_size" json:"low_optimal_size"`			
HighOptimalSize	int64	`gorm:"column:high_optimal_size" json:"high_optimal_size"`			
OptimalExecutions	int64	`gorm:"column:optimal_executions" json:"optimal_executions"`			
OnepassExecutions	int64	`gorm:"column:onepass_executions" json:"onepass_executions"`			
MultipassesExecutions	int64	`gorm:"column:multipasses_executions" json:"multipasses_executions"`			
TotalExecutions	int64	`gorm:"column:total_executions" json:"total_executions"`			
ConID	int64	`gorm:"column:con_id" json:"con_id"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sqlWorkareaHistogram) TableName() string {
	return "v$sql_workarea_histogram"
}
	

// V$sqlWorkareaHistogramColumns get sql column name.获取数据库列名
var V$sqlWorkareaHistogramColumns = struct { 
	LowOptimalSize string
	HighOptimalSize string
	OptimalExecutions string
	OnepassExecutions string
	MultipassesExecutions string
	TotalExecutions string
	ConID string    
	}{ 
		LowOptimalSize:"low_optimal_size",  
		HighOptimalSize:"high_optimal_size",  
		OptimalExecutions:"optimal_executions",  
		OnepassExecutions:"onepass_executions",  
		MultipassesExecutions:"multipasses_executions",  
		TotalExecutions:"total_executions",  
		ConID:"con_id",             
	}
	
// V$sstable [...]		
type	V$sstable	struct {		
TableType	int64	`gorm:"column:TABLE_TYPE" json:"table_type"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
TableName	string	`gorm:"column:TABLE_NAME" json:"table_name"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
IndexID	int64	`gorm:"column:INDEX_ID" json:"index_id"`			
BaseVersion	int64	`gorm:"column:BASE_VERSION" json:"base_version"`			
MultiVersionStart	int64	`gorm:"column:MULTI_VERSION_START" json:"multi_version_start"`			
SnapshotVersion	int64	`gorm:"column:SNAPSHOT_VERSION" json:"snapshot_version"`			
StartLogTs	uint64	`gorm:"column:START_LOG_TS" json:"start_log_ts"`			
EndLogTs	uint64	`gorm:"column:END_LOG_TS" json:"end_log_ts"`			
MaxLogTs	uint64	`gorm:"column:MAX_LOG_TS" json:"max_log_ts"`			
Version	int64	`gorm:"column:VERSION" json:"version"`			
LogicalDataVersion	int64	`gorm:"column:LOGICAL_DATA_VERSION" json:"logical_data_version"`			
Size	int64	`gorm:"column:SIZE" json:"size"`			
IsActive	int64	`gorm:"column:IS_ACTIVE" json:"is_active"`			
Ref	int64	`gorm:"column:REF" json:"ref"`			
WriteRef	int64	`gorm:"column:WRITE_REF" json:"write_ref"`			
TrxCount	int64	`gorm:"column:TRX_COUNT" json:"trx_count"`			
PendingLogPersistingRowCnt	int64	`gorm:"column:PENDING_LOG_PERSISTING_ROW_CNT" json:"pending_log_persisting_row_cnt"`			
UpperTransVersion	int64	`gorm:"column:UPPER_TRANS_VERSION" json:"upper_trans_version"`			
ContainUncommittedRow	int8	`gorm:"column:CONTAIN_UNCOMMITTED_ROW" json:"contain_uncommitted_row"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sstable) TableName() string {
	return "v$sstable"
}
	

// V$sstableColumns get sql column name.获取数据库列名
var V$sstableColumns = struct { 
	TableType string
	TableID string
	TableName string
	TenantID string
	PartitionID string
	IndexID string
	BaseVersion string
	MultiVersionStart string
	SnapshotVersion string
	StartLogTs string
	EndLogTs string
	MaxLogTs string
	Version string
	LogicalDataVersion string
	Size string
	IsActive string
	Ref string
	WriteRef string
	TrxCount string
	PendingLogPersistingRowCnt string
	UpperTransVersion string
	ContainUncommittedRow string    
	}{ 
		TableType:"TABLE_TYPE",  
		TableID:"TABLE_ID",  
		TableName:"TABLE_NAME",  
		TenantID:"TENANT_ID",  
		PartitionID:"PARTITION_ID",  
		IndexID:"INDEX_ID",  
		BaseVersion:"BASE_VERSION",  
		MultiVersionStart:"MULTI_VERSION_START",  
		SnapshotVersion:"SNAPSHOT_VERSION",  
		StartLogTs:"START_LOG_TS",  
		EndLogTs:"END_LOG_TS",  
		MaxLogTs:"MAX_LOG_TS",  
		Version:"VERSION",  
		LogicalDataVersion:"LOGICAL_DATA_VERSION",  
		Size:"SIZE",  
		IsActive:"IS_ACTIVE",  
		Ref:"REF",  
		WriteRef:"WRITE_REF",  
		TrxCount:"TRX_COUNT",  
		PendingLogPersistingRowCnt:"PENDING_LOG_PERSISTING_ROW_CNT",  
		UpperTransVersion:"UPPER_TRANS_VERSION",  
		ContainUncommittedRow:"CONTAIN_UNCOMMITTED_ROW",             
	}
	
// V$statname [...]		
type	V$statname	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
StatID	int64	`gorm:"column:STAT_ID" json:"stat_id"`			
Statistic#	int64	`gorm:"column:STATISTIC#" json:"statisti_c#"`			
Name	string	`gorm:"column:NAME" json:"name"`			
DisplayName	string	`gorm:"column:DISPLAY_NAME" json:"display_name"`			
Class	int64	`gorm:"column:CLASS" json:"class"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$statname) TableName() string {
	return "v$statname"
}
	

// V$statnameColumns get sql column name.获取数据库列名
var V$statnameColumns = struct { 
	ConID string
	StatID string
	Statistic# string
	Name string
	DisplayName string
	Class string    
	}{ 
		ConID:"CON_ID",  
		StatID:"STAT_ID",  
		Statistic#:"STATISTIC#",  
		Name:"NAME",  
		DisplayName:"DISPLAY_NAME",  
		Class:"CLASS",             
	}
	
// V$sysstat [...]		
type	V$sysstat	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
Statistic#	int64	`gorm:"column:STATISTIC#" json:"statisti_c#"`			
Value	int64	`gorm:"column:VALUE" json:"value"`			
StatID	int64	`gorm:"column:STAT_ID" json:"stat_id"`			
Name	string	`gorm:"column:NAME" json:"name"`			
Class	int64	`gorm:"column:CLASS" json:"class"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$sysstat) TableName() string {
	return "v$sysstat"
}
	

// V$sysstatColumns get sql column name.获取数据库列名
var V$sysstatColumns = struct { 
	ConID string
	Statistic# string
	Value string
	StatID string
	Name string
	Class string    
	}{ 
		ConID:"CON_ID",  
		Statistic#:"STATISTIC#",  
		Value:"VALUE",  
		StatID:"STAT_ID",  
		Name:"NAME",  
		Class:"CLASS",             
	}
	
// V$systemEvent [...]		
type	V$systemEvent	struct {		
ConID	int64	`gorm:"column:CON_ID" json:"con_id"`			
EventID	int64	`gorm:"column:EVENT_ID" json:"event_id"`			
Event	string	`gorm:"column:EVENT" json:"event"`			
WaitClassID	int64	`gorm:"column:WAIT_CLASS_ID" json:"wait_class_id"`			
WaitClass#	int64	`gorm:"column:WAIT_CLASS#" json:"wait_clas_s#"`			
WaitClass	string	`gorm:"column:WAIT_CLASS" json:"wait_class"`			
TotalWaits	int64	`gorm:"column:TOTAL_WAITS" json:"total_waits"`			
TotalTimeouts	int64	`gorm:"column:TOTAL_TIMEOUTS" json:"total_timeouts"`			
TimeWaited	float64	`gorm:"column:TIME_WAITED" json:"time_waited"`			
AverageWait	float64	`gorm:"column:AVERAGE_WAIT" json:"average_wait"`			
TimeWaitedMicro	int64	`gorm:"column:TIME_WAITED_MICRO" json:"time_waited_micro"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$systemEvent) TableName() string {
	return "v$system_event"
}
	

// V$systemEventColumns get sql column name.获取数据库列名
var V$systemEventColumns = struct { 
	ConID string
	EventID string
	Event string
	WaitClassID string
	WaitClass# string
	WaitClass string
	TotalWaits string
	TotalTimeouts string
	TimeWaited string
	AverageWait string
	TimeWaitedMicro string    
	}{ 
		ConID:"CON_ID",  
		EventID:"EVENT_ID",  
		Event:"EVENT",  
		WaitClassID:"WAIT_CLASS_ID",  
		WaitClass#:"WAIT_CLASS#",  
		WaitClass:"WAIT_CLASS",  
		TotalWaits:"TOTAL_WAITS",  
		TotalTimeouts:"TOTAL_TIMEOUTS",  
		TimeWaited:"TIME_WAITED",  
		AverageWait:"AVERAGE_WAIT",  
		TimeWaitedMicro:"TIME_WAITED_MICRO",             
	}
	
// V$tenantMemstoreAllocatorInfo [...]		
type	V$tenantMemstoreAllocatorInfo	struct {		
SvrIP	string	`gorm:"column:SVR_IP" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:SVR_PORT" json:"svr_port"`			
TenantID	int64	`gorm:"column:TENANT_ID" json:"tenant_id"`			
TableID	int64	`gorm:"column:TABLE_ID" json:"table_id"`			
PartitionID	int64	`gorm:"column:PARTITION_ID" json:"partition_id"`			
MtBaseVersion	int64	`gorm:"column:MT_BASE_VERSION" json:"mt_base_version"`			
RetireClock	int64	`gorm:"column:RETIRE_CLOCK" json:"retire_clock"`			
MtIsFrozen	int64	`gorm:"column:MT_IS_FROZEN" json:"mt_is_frozen"`			
MtProtectionClock	int64	`gorm:"column:MT_PROTECTION_CLOCK" json:"mt_protection_clock"`			
MtSnapshotVersion	int64	`gorm:"column:MT_SNAPSHOT_VERSION" json:"mt_snapshot_version"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$tenantMemstoreAllocatorInfo) TableName() string {
	return "v$tenant_memstore_allocator_info"
}
	

// V$tenantMemstoreAllocatorInfoColumns get sql column name.获取数据库列名
var V$tenantMemstoreAllocatorInfoColumns = struct { 
	SvrIP string
	SvrPort string
	TenantID string
	TableID string
	PartitionID string
	MtBaseVersion string
	RetireClock string
	MtIsFrozen string
	MtProtectionClock string
	MtSnapshotVersion string    
	}{ 
		SvrIP:"SVR_IP",  
		SvrPort:"SVR_PORT",  
		TenantID:"TENANT_ID",  
		TableID:"TABLE_ID",  
		PartitionID:"PARTITION_ID",  
		MtBaseVersion:"MT_BASE_VERSION",  
		RetireClock:"RETIRE_CLOCK",  
		MtIsFrozen:"MT_IS_FROZEN",  
		MtProtectionClock:"MT_PROTECTION_CLOCK",  
		MtSnapshotVersion:"MT_SNAPSHOT_VERSION",             
	}
	
// V$tenantPxWorkerStat [...]		
type	V$tenantPxWorkerStat	struct {		
SessionID	int64	`gorm:"column:session_id" json:"session_id"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
TraceID	string	`gorm:"column:trace_id" json:"trace_id"`			
QcID	int64	`gorm:"column:qc_id" json:"qc_id"`			
SqcID	int64	`gorm:"column:sqc_id" json:"sqc_id"`			
WorkerID	int64	`gorm:"column:worker_id" json:"worker_id"`			
DfoID	int64	`gorm:"column:dfo_id" json:"dfo_id"`			
StartTime	time.Time	`gorm:"column:start_time" json:"start_time"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$tenantPxWorkerStat) TableName() string {
	return "v$tenant_px_worker_stat"
}
	

// V$tenantPxWorkerStatColumns get sql column name.获取数据库列名
var V$tenantPxWorkerStatColumns = struct { 
	SessionID string
	TenantID string
	SvrIP string
	SvrPort string
	TraceID string
	QcID string
	SqcID string
	WorkerID string
	DfoID string
	StartTime string    
	}{ 
		SessionID:"session_id",  
		TenantID:"tenant_id",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		TraceID:"trace_id",  
		QcID:"qc_id",  
		SqcID:"sqc_id",  
		WorkerID:"worker_id",  
		DfoID:"dfo_id",  
		StartTime:"start_time",             
	}
	
// V$unit [...]		
type	V$unit	struct {		
UnitID	int64	`gorm:"column:unit_id" json:"unit_id"`			
UnitConfigID	int64	`gorm:"column:unit_config_id" json:"unit_config_id"`			
UnitConfigName	string	`gorm:"column:unit_config_name" json:"unit_config_name"`			
ResourcePoolID	int64	`gorm:"column:resource_pool_id" json:"resource_pool_id"`			
ResourcePoolName	string	`gorm:"column:resource_pool_name" json:"resource_pool_name"`			
Zone	string	`gorm:"column:zone" json:"zone"`			
TenantID	int64	`gorm:"column:tenant_id" json:"tenant_id"`			
TenantName	string	`gorm:"column:tenant_name" json:"tenant_name"`			
SvrIP	string	`gorm:"column:svr_ip" json:"svr_ip"`			
SvrPort	int64	`gorm:"column:svr_port" json:"svr_port"`			
MigrateFromSvrIP	string	`gorm:"column:migrate_from_svr_ip" json:"migrate_from_svr_ip"`			
MigrateFromSvrPort	int64	`gorm:"column:migrate_from_svr_port" json:"migrate_from_svr_port"`			
MaxCPU	float64	`gorm:"column:max_cpu" json:"max_cpu"`			
MinCPU	float64	`gorm:"column:min_cpu" json:"min_cpu"`			
MaxMemory	int64	`gorm:"column:max_memory" json:"max_memory"`			
MinMemory	int64	`gorm:"column:min_memory" json:"min_memory"`			
MaxIops	int64	`gorm:"column:max_iops" json:"max_iops"`			
MinIops	int64	`gorm:"column:min_iops" json:"min_iops"`			
MaxDiskSize	int64	`gorm:"column:max_disk_size" json:"max_disk_size"`			
MaxSessionNum	int64	`gorm:"column:max_session_num" json:"max_session_num"`			
}		

// TableName get sql table name.获取数据库表名
func (m *V$unit) TableName() string {
	return "v$unit"
}
	

// V$unitColumns get sql column name.获取数据库列名
var V$unitColumns = struct { 
	UnitID string
	UnitConfigID string
	UnitConfigName string
	ResourcePoolID string
	ResourcePoolName string
	Zone string
	TenantID string
	TenantName string
	SvrIP string
	SvrPort string
	MigrateFromSvrIP string
	MigrateFromSvrPort string
	MaxCPU string
	MinCPU string
	MaxMemory string
	MinMemory string
	MaxIops string
	MinIops string
	MaxDiskSize string
	MaxSessionNum string    
	}{ 
		UnitID:"unit_id",  
		UnitConfigID:"unit_config_id",  
		UnitConfigName:"unit_config_name",  
		ResourcePoolID:"resource_pool_id",  
		ResourcePoolName:"resource_pool_name",  
		Zone:"zone",  
		TenantID:"tenant_id",  
		TenantName:"tenant_name",  
		SvrIP:"svr_ip",  
		SvrPort:"svr_port",  
		MigrateFromSvrIP:"migrate_from_svr_ip",  
		MigrateFromSvrPort:"migrate_from_svr_port",  
		MaxCPU:"max_cpu",  
		MinCPU:"min_cpu",  
		MaxMemory:"max_memory",  
		MinMemory:"min_memory",  
		MaxIops:"max_iops",  
		MinIops:"min_iops",  
		MaxDiskSize:"max_disk_size",  
		MaxSessionNum:"max_session_num",             
	}
	

